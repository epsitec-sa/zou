#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG ]] && . zoul-git-config
ZOUL_GIT_CONFIG=true

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG_SKU ]]    && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]] && . zoul-git-config-select
[[ -z $ZOUL_GIT_BRANCH_SYNC ]]   && . zoul-git-branch-sync

# global options
#   noSkuFilter      -- process all level 0 submodules
#   noSelectFilter   -- process all level>0 submodules

headChangedEvent+=( _config_reset_scope )
branchSyncEvent+=( _config_on_sync )

_config_on_sync()
{
  [[ $3 =~ ^\< ]] || return 0
  _config_reset_scope
}

# usage:
#   module_run config_scope $*
config_scope()
{
  # setup config context
  local configIncludedSubmodules configExcludedSubmodules \
        configInternalSubmodules configExternalSubmodules \
        configInternalSubmoduleBundlePaths configExternalSubmoduleBundlePaths \
        configScopeInitialized=true
  
  _config_reset_scope

  # execute next russian doll
  $1 "${@:2}"
}
config_has_internal_submodules() { [ ${#configInternalSubmodules[@]} -gt 0 ]; }

config_list_external()
{
  if [[ $noSelectFilter == true ]]; then
    local external=( $(config_select_list_excluded moduleSubmodulePaths[@]) )
    external=( $(array_remove_array external[@] configExcludedSubmodules[@]) )
    printf '%s\n' "${external[@]}"
  else
    printf '%s\n' "${configExternalSubmodules[@]}"
  fi
}
_config_reset_scope()
{
  # io_trace ">>>> _config_reset_scope"

  [[ $configScopeInitialized == true ]] || return 0

  if [ ${#moduleSubmodulePaths[@]} -eq 0 ]; then
    configExcludedSubmodules=()
    configIncludedSubmodules=()
    configExternalSubmodules=()
    configInternalSubmodules=()
    configInternalSubmoduleBundlePaths=()
    configExternalSubmoduleBundlePaths=()
  else
    if [[ $noSkuFilter == true ]]; then
      configExcludedSubmodules=()
      configIncludedSubmodules=( ${moduleSubmodulePaths[@]} )
    else
      configExcludedSubmodules=( $(config_sku_list_excluded) )
      configIncludedSubmodules=( $(config_sku_list_included moduleSubmodulePaths[@] configExcludedSubmodules[@]) )
    fi
    if [[ $noSelectFilter == true ]]; then
      configExternalSubmodules=()
      configInternalSubmodules=( ${configIncludedSubmodules[@]} )
    else
      local exclude=( $(config_select_list_excluded moduleSubmodulePaths[@]) )
      local include=( $(config_select_list_included moduleSubmodulePaths[@]) )
      # io_trace "_config_reset_scope -- $(print_vars exclude[@] include[@])" ${Green}
      configExternalSubmodules=( $(array_remove_array exclude[@] configExcludedSubmodules[@]) )
      configInternalSubmodules=( $(array_remove_array include[@] configExcludedSubmodules[@]) )
    fi
    configInternalSubmoduleBundlePaths=( "${configInternalSubmodules[@]/#/$moduleBundlePath\/}" )
    configExternalSubmoduleBundlePaths=( "${configExternalSubmodules[@]/#/$moduleBundlePath\/}" )
    configInternalSubmoduleBundlePaths=( "${configInternalSubmoduleBundlePaths[@]#/}" )
    configExternalSubmoduleBundlePaths=( "${configExternalSubmoduleBundlePaths[@]#/}" )
  fi

  [[ $noSubmodulesInit == true ]] || module_sync_upd_sync_uninitialized_submodules

  _config_trace true
  # io_trace "<<<< _config_reset_scope"
}
_config_trace()
{
  [[ $zouTraceScope == true ]] || return 0

  io_lock_enter
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars noSkuFilter noSelectFilter)"
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars configIncludedSubmodules[@])"
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars configExcludedSubmodules[@])"
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars configInternalSubmodules[@])"
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars configExternalSubmodules[@])"
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars configInternalSubmoduleBundlePaths[@])"
  [[ -n $1 ]] && io_trace "_config_reset_scope -- $(print_vars configExternalSubmoduleBundlePaths[@])"
  io_lock_exit
}
