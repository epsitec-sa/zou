#!/usr/bin/env bash

[[ -z $ZOUL_CORE ]]       && . zoul-core
[[ -z $ZOUL_GIT_REPO ]]   && . zoul-git-repo
[[ -z $ZOUL_GIT_BUNDLE ]] && . zoul-git-bundle
[[ -z $ZOUL_GIT_CMD ]]    && . zoul-git-cmd

bundler_parse()
{
  local paths=() path

  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; paths+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -a|--all)        allBundles=true;;
    -q|--quiet)      export quiet=true;;
    -f|--force)      export forceConfig=true;;
    -t|--prune-tags) export pruneTags=true;;
    -u|--unregister) export unregister=true;;
    --reset)         resetRegisteredBundles=true;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  paths+=("$1")
  esac; shift; done

  bundle_add_bundle_paths "${paths[@]}"
}

bundler_run()
{
  # avoid default registration
  doNotRegisterBundle=true

  local unregister allBundles forceConfig quiet \
        resetRegisteredBundles pruneTags \
        bundlePaths=() bundleRegisteredPaths=()

  bundler_parse "$@"
  
  local broot
  broot=$(repo_bundle_root)
  if [ $? -ne 0 ]; then
    allBundles=true
    broot=$(repo_bundle_root "$zouDir")
  fi
  # io_trace "bundler_run -- $(print_vars broot)"

  _bundler_process_registration
  if [ ${#bundleRegisteredPaths[@]} -eq 0 ]; then
    [[ -z $quiet ]] && io_warning "No bundle registered."
    return 1
  fi

  [[ -z $quiet ]] && io_message "${Cyan}[zou]${White} : ${Brown}Configuring bundles, please wait..."
  if [[ $allBundles == true ]]; then
    # io_trace "bundler_run -3- $(print_vars bundleRegisteredPaths[@])"
    bundle_visit 'bundleRegisteredPaths[@]' _bundler_config
  else
    # io_trace "bundler_run -4- $(print_vars bundlePaths[@])"
    bundle_visit 'bundlePaths[@]' _bundler_config
  fi
}

# in:
#   broot
#   resetRegisteredBundles
#   allBundles
#   unregister
# in-out:
#   bundlePaths
#   bundleRegisteredPaths
_bundler_process_registration()
{
  local path

  # process registration
  [[ $resetRegisteredBundles == true ]] && bundle_unregister_all

  if [[ $allBundles == true ]]; then
    bundle_set_siblings "$broot"
  fi
  [ ${#bundlePaths[@]} -eq 0 ] && bundlePaths+=("$broot")
  # io_trace "_bundler_process_registration -1- $(print_vars bundlePaths[@])"

  for path in "${bundlePaths[@]}"; do
    bundle_register_bundle "$path" "$unregister"
  done

  bundle_set_registered_paths # -> bundleRegisteredPaths
  # io_trace "_bundler_process_registration -2- $(print_vars bundleRegisteredPaths[@])"
}

_bundler_config()
{
  local command='_bundler' subcommand='config' \
        noSkuFilter=true cmdScopes=( config_scope )

  local message="${LightBlue}$bundleUrl${White} -> ${VC}$bundleRoot${White}"

  # check if bundle is already configured (exit code 1)
  if module_configure "$forceConfig"; then
    # bundle was not configured (now it is) - configure submodules
    # io_trace "_bundler_config -1- $(print_vars bundleRoot)"
    io_message "${Brown}┅ $message" "$bundleTracePrefix" ${White}
    cmd_register_module_paths true "$bundleRoot"
    cmd_visit_modules
  else
    # bundle is already configured
    # io_trace "_bundler_config -1- $(print_vars bundleRoot)"
    io_message "${Green}√ $message" "$bundleTracePrefix" ${White}
  fi
}
_bundler_config_scope()
{
  local abort=0 stopConfig
  # execute next russian doll
  $1 "${@:2}"
}
_bundler_config_prolog()
{
  # bundle is already configured in _bundler_config
  module_is_bundle && return 0

  # TODO: check if it is still necessary with zou-flow notes operations
  gitx config push.followTags true

  # repair previous zou installation
  # notes_repair &>>"$stdallRedir" || forceConfig=true
  # hooks_repair &>>"$stdallRedir" || forceConfig=true

  local verbose='false'
  [ -z $quiet ] && verbose=true
  # io_lock_enter
  if [[ -z $stopConfig ]] && module_configure "$forceConfig" "$verbose"; then
    : # module was not configured or configuration is forced
  else
    # already configured : do not abort if prune tags is asked
    stopConfig=true
    [[ $pruneTags == true ]] || abort=1
  fi
  if [[ $pruneTags == true ]]; then
    [[ -z $quiet ]] && mio_warning_unsafe '  Pruning tags...'
    repo_prune_tags
  fi
  # io_lock_exit

  return $abort
}

bundler_run "$@"

