#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG_SKU ]] && . zoul-git-config-sku
ZOUL_GIT_CONFIG_SKU=true

[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# configure SKU submodules
# modify .zou-flow configuration file
#
# By default all submodules are included
#
# [sku "sku/sal/dev"]
#   exclude = compta
#   exclude = fact
#   exclude = banking
#   exclude = sync-client
#   exclude = sync-server

config_sku_include()
{
  # io_trace "config_sku_include ${*@Q}"
  case $# in
    0) config_sku_include_all;;
    1) config_sku_include_single "$1";;
    *) config_sku_include_many "$@"
  esac
}
config_sku_exclude()
{
  # io_trace "config_sku_exclude ${*@Q}"
  case $# in
    0) config_sku_exclude_all;;
    1) config_sku_exclude_single "$1";;
    *) config_sku_exclude_many "$@"
  esac
}

config_sku_include_single()
{
  # remove path from excluded list

  local path=$1 rePath configFile="$(_config_sku_file_path)"
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  _config_sku_check_path "$path" || return 1
  rePath=$(wildcard_to_regex "$path")
  # io_trace "config_sku_include_single ${*@Q} -- $(print_vars path rePath configFile)"

  gitx config --file "$configFile" --unset-all 'sku.exclude' "$rePath" &>>"$stdallRedir" || io_trace_error 'config_sku_include_single -1-'

  gitx update-index --add -- "$configFile" &>>"$stdallRedir" \
  && git_commit "include submodule '$path' in SKU" "$configFile" || io_trace_error 'config_sku_include_single -2-'
}
config_sku_exclude_single()
{
  # add path to excluded list

  # io_trace "config_sku_exclude_single ${*@Q}"
  local path=$1 rePath configFile="$(_config_sku_file_path)"
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  _config_sku_check_path "$path" || return 1
  rePath=$(wildcard_to_regex_match_whole "$path")

  gitx config --file "$configFile" --get-all "sku.exclude" "$rePath" &>>"$stdallRedir" \
  || gitx config --file "$configFile" --add "sku.exclude" "$path" &>>"$stdallRedir"

  gitx update-index --add -- "$configFile" &>>"$stdallRedir" \
  && git_commit "exclude submodule '$path' from SKU" "$configFile"
}

config_sku_include_many()
{
  # remove pathes from excluded list

  # io_trace "config_sku_include_many ${*@Q}"
  local path rePath configFile="$(_config_sku_file_path)"

  for path in $(string_sort "$@"); do
    _config_sku_check_path "$path" || return 1
    rePath=$(wildcard_to_regex_match_whole "$path")
    gitx config --file "$configFile" --unset-all "sku.exclude" "$rePath" &>>"$stdallRedir"
  done

  gitx update-index --add -- "$configFile" &>>"$stdallRedir" && \
  git_commit "include submodules '$(string_join ', ' $@)' in SKU" "$configFile"
}
config_sku_exclude_many()
{
  # include pathes in excluded list

  # io_trace "config_sku_exclude_many ${*@Q}"
  local path rePath configFile="$(_config_sku_file_path)"

  for path in $(string_sort "$@"); do
    _config_sku_check_path "$path" || return 1
    rePath=$(wildcard_to_regex_match_whole "$path")
    gitx config --file "$configFile" --get-all "sku.exclude" "$rePath" &>>"$stdallRedir" \
    || gitx config --file "$configFile" --add "sku.exclude" "$path"
  done

  gitx update-index --add -- "$configFile" &>>"$stdallRedir" && \
  git_commit "exclude submodules '$(string_join ', ' $@)' from SKU" "$configFile"
}

config_sku_include_all()
{
  # remove excluded list
  
  # io_trace "config_sku_include_all ${*@Q}"
  local configFile="$(_config_sku_file_path)"
  gitx config --file "$configFile" --remove-section "sku" &>>"$stdallRedir"

  gitx update-index --add -- "$configFile" &>>"$stdallRedir" \
  && git_commit 'include all submodules in SKU' "$configFile"
}
config_sku_exclude_all()
{
  # include all sub-modules in excluded list
  local smpaths=( "${moduleSubmodulePaths[@]}" )
  [ ${#smpaths[@]} -eq 0 ] && smpaths=( $(repo_list_submodule_paths) )
  config_sku_exclude_many "${smpaths[@]}"
}

config_sku_update()
{
  # remove unexisting sub-modules from excluded list

  local smpaths existing configFile="$(_config_sku_file_path)" path smlist s
  smpaths=( $(gitx config --file "$configFile" --get-all "sku.exclude" 2>>"$stderrRedir") )
  [ ${#smpaths[@]} -eq 0 ] && return 0

  existing=( "${moduleSubmodulePaths[@]}" )
  [ ${#existing[@]} -eq 0 ] && existing=( $(repo_list_submodule_paths) )
  # io_trace "config_sku_update -1- $(print_vars smpaths[@] existing[@])"

  smpaths=($(array_remove_array 'smpaths[@]' 'existing[@]'))
  [ ${#smpaths[@]} -eq 0 ] && return 0
  # io_trace "config_sku_update -2- $(print_vars smpaths[@] existing[@])"

  [ ${#smpaths[@]} -gt 1 ] && s='s'
  smlist=$(string_join ', ' "${smpaths[@]}")
  io_message "Unconfiguring ${VC}$smlist" "$moduleTracePrefix"

  for path in "${smpaths[@]}"; do
    # io_trace "config_sku_update -3- $(print_vars path)"
    gitx config --file "$configFile" --unset-all "sku.exclude" "$path" &>>"$stdallRedir" || io_trace_error 'config_sku_update -3-'
  done
  
  gitx update-index --add -- "$configFile" &>>"$stdallRedir" && \
  git_commit "unconfigure submodule$s '$smlist'" "$configFile"
}

config_sku_is_included() { ! config_sku_is_excluded "$@"; }
config_sku_is_excluded()
{
  local path=$1 rePath
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  rePath=$(wildcard_to_regex_match_whole "$path")

  gitx config --file "$(_config_sku_file_path)" --get-all "sku.exclude" "$rePath" &>>"$stdallRedir"
}
config_sku_list_included()
{
  local submodules skuExclude
  [[ -n $1 ]] && submodules=( "${!1}" ) || submodules=( $(repo_list_submodule_paths) )
  [[ -n $2 ]] && skuExclude=( "${!2}" ) || skuExclude=( $(config_sku_list_excluded) )
  array_remove_array submodules[@] skuExclude[@]
}
config_sku_list_excluded()
{
  gitx config --file "$(_config_sku_file_path)" --get-all "sku.exclude" 2>>"$stderrRedir" || true
}

config_sku_set_principal_module_id()
{
  local pid=$1
  gitx config --file "$bundleConfigFile" "sku.principalModuleId" "$pid" &>>"$stdallRedir"

  gitx update-index --add -- "$bundleConfigFile" &>>"$stdallRedir" \
  && git_commit "modify principal module to '$pid'" "$bundleConfigFile"
}
config_sku_get_principal_module_id()
{
  gitx config --file "$bundleConfigFile" "sku.principalModuleId" 2>>"$stderrRedir"
}

config_sku_status()
{
  local mode=$1

  io_lock_enter
  if module_is_bundle; then
    if [[ -n "$principalModuleId" ]]; then
      io_message_unsafe "  principal module = $principalModuleId" "$moduleTracePrefix" ${White}
    else
      io_warning_unsafe "  no principal module ${LightCyan}(use ${VC}git sku config -m PMID${LightCyan} to define one)" "$moduleTracePrefix"
    fi
  fi
  if [[ -z $mode || $mode == 'include' ]]; then
    for path in $(config_sku_list_included | sort); do
      io_success_unsafe "  $path" "$moduleTracePrefix"
    done
  fi
  if [[ -z $mode || $mode == 'exclude' ]]; then
    for path in $(config_sku_list_excluded | sort); do
      io_message_unsafe "x $path" "$moduleTracePrefix" ${Purple}
    done
  fi
  io_lock_exit
}

_config_sku_file_path() { [[ -n $moduleConfigFile ]] && echo "$moduleConfigFile" || echo "$PWD/.zou-flow"; }
_config_sku_check_path(){ [ -d "$1" ] || { io_error "Submodule ${VC}$1${Red} does not exist" "$moduleTracePrefix"; return 1; }; }
