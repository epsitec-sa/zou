<?xml version="1.0" encoding="utf-8"?>
<!--
The Import.targets can be used to build and export the output of one or many projects or solutions.
Input parameters:
- @(ImportProjects)
  - %(ImportDir)
  - %(ImportPlatform)
  - %(ImportConfiguration)

Targets
- ImportClean
- ImportBuild
- ImportRebuild

	WARNING: MSBuild tool|task properties
  Do not move the 'OutDir' property definition at the end of the properties definition.
	When used with the command line of the 'Exec' task (see '_ImportCommand'
	later),	the ending backslash of its value escapes the end quote character
	of the enclosing argument - msbuild ... "/p:...;...\Debug\" "solution.sln".
	The escaped quote will break the shell unquoting process. 
-->
<Project ToolsVersion="4.0" InitialTargets="ImportTrace" DefaultTargets="ImportBuild" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Zou targets -->
  <ImportGroup Condition="'$(Zou)' == ''">
    <Import Project="private\zou.targets"/>
  </ImportGroup>
  
  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>
    <ImportProjects>
      <ImportConfiguration Condition="'%(ImportConfiguration)' == ''">$(Configuration)</ImportConfiguration>
      <ImportPlatform      Condition="'%(ImportPlatform)' == ''">Any CPU</ImportPlatform>
      <ImportDir           Condition="'%(ImportDir)' == ''">$(OutDir)</ImportDir>
    </ImportProjects>
    <ImportFiles>
      <ImportDir           Condition="'%(ImportDir)' == ''">$(OutDir)</ImportDir>
      <ImportFile          Condition="'%(ImportFile)' == ''">%(FileName)%(Extension)</ImportFile>
    </ImportFiles>
  </ItemDefinitionGroup>

  <!-- ================ ImportProjectsClean ================ -->
  
  <Target Name="ImportProjectsClean">
    <MSBuild Projects="@(ImportProjects)" Targets="Clean" Properties="OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration)" />
  </Target>

  <!-- ================ ImportFilesClean ================ -->

  <Target Name="ImportFilesClean">
    <Delete  Files="%(ImportFiles.ImportDir)%(RecursiveDir)%(ImportFile)" />
    <Message Text="  [-] %(ImportFiles.ImportDir)%(RecursiveDir)%(ImportFile)" Importance="high" />
  </Target>
  
  <!-- ================ ImportProjects ================ -->
  
  <Target Name="ImportProjects" >
    <!-- Restore nuget packages -->
    <Exec Command="&quot;$(ZouDir)\nuget&quot; restore &quot;%(ImportProjects.Identity)&quot;" />
    
    <!--
	  The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(ImportProjects.Identity)" Targets="Build" Properties="OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration) " />
    Instead with use the Exec task which starts the MSBuild process.
	  -->
    <Exec Command="&quot;$(MSBuildToolsPath)\msbuild&quot; /nologo /v:m /t:Build &quot;/p:OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration)&quot; &quot;%(ImportProjects.Identity)&quot;" />
  </Target>

  <!-- ================ ImportFiles ================ -->

  <Target Name="ImportFiles"
          Inputs="@(ImportFiles)"
          Outputs="@(ImportFiles -> '%(ImportDir)%(RecursiveDir)%(ImportFile)')">
    <Copy SourceFiles="%(ImportFiles.Identity)" DestinationFiles="%(ImportDir)%(RecursiveDir)%(ImportFile)" />
    <Message Text="  [+] %(ImportFiles.Identity) =&gt; %(ImportDir)%(RecursiveDir)%(ImportFile)" Importance="high" />
  </Target>
  
  <!-- ================ Main targets ================ -->

  <Target Name="ImportClean"   DependsOnTargets="ImportFilesClean;ImportProjectsClean" />
  <Target Name="ImportBuild"   DependsOnTargets="ImportProjects;ImportFiles" />  
  <Target Name="ImportRebuild" DependsOnTargets="ImportClean;ImportBuild" />
  
  <!-- ================ ImportTrace ================ -->
  
  <Target Name="ImportTrace">
    <Message Text="[%(ImportConfiguration)|%(ImportPlatform)] %(ImportProjects.Identity) =&gt; %(ImportDir)" />
    <Message Text="[+] %(ImportFiles.Identity) =&gt; %(ImportDir)%(ImportFile)" />
  </Target>
</Project>