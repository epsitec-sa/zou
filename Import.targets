<?xml version="1.0" encoding="utf-8"?>
<!--
The Import.targets can be used to build and export the output of one or many projects or solutions.
Input parameters:
- @(ImportProjects)
  - %(ImportDir)
  - %(ImportPlatform)
  - %(ImportConfiguration)

Targets
- ImportClean
- ImportBuild
- ImportRebuild
-->
<Project ToolsVersion="4.0" DefaultTargets="ImportBuild" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Condition="'$(TargetDir)' == ''" >
    <TargetDir>$(OutDir)</TargetDir>
  </PropertyGroup>
  
  <!-- Zou targets -->
  <Import Condition="'$(Zou)' == ''" Project="private\zou.targets" />
  
  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>
    <ImportProjects>
      <ImportConfiguration Condition="'%(ImportConfiguration)' == ''">$(Configuration)</ImportConfiguration>
      <ImportPlatform      Condition="'%(ImportPlatform)' == ''">Any CPU</ImportPlatform>
      <ImportDir           Condition="'%(ImportDir)' == ''">$(TargetDir)</ImportDir>
    </ImportProjects>
    <ImportFiles>
      <ImportDir           Condition="'%(ImportDir)' == ''">$(TargetDir)</ImportDir>
      <ImportFile          Condition="'%(ImportFile)' == ''">%(FileName)%(Extension)</ImportFile>
    </ImportFiles>
  </ItemDefinitionGroup>

  <!-- ================ ImportProjectsClean ================ -->
  
  <Target Name="ImportProjectsClean">
    <MSBuild Projects="@(ImportProjects)" Targets="Clean" Properties="OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration)" />
  </Target>

  <!-- ================ ImportFilesClean ================ -->

  <Target Name="ImportFilesClean">
    <Delete  Files="%(ImportFiles.ImportDir)%(RecursiveDir)%(ImportFile)" />
    <Message Text="  [-] %(ImportFiles.ImportDir)%(RecursiveDir)%(ImportFile)" Condition="'%(ImportFile)' != ''"/>
  </Target>
  
  <!-- ================ ImportProjects ================ -->
  
  <Target Name="ImportProjects" >
    <!-- Restore nuget packages for solutions... -->
    <Exec
      Command="&quot;$(ZouDir)nuget&quot; restore &quot;%(ImportProjects.Identity)&quot;"
      Condition="'%(Extension)' == '.sln'"/>
    <!-- ...and projects -->
    <Message
      Text="&quot;$(ZouDir)nuget&quot; restore &quot;%(ImportProjects.RootDir)%(Directory)packages.config&quot; -PackagesDirectory &quot;$(SolutionDir)packages\.&quot;"
      Condition="'%(Extension)' != '.sln' And Exists('%(RootDir)%(Directory)packages.config')"
      Importance="high"/>
    <Exec
      Command="&quot;$(ZouDir)nuget&quot; restore &quot;%(ImportProjects.RootDir)%(Directory)packages.config&quot; -PackagesDirectory &quot;$(SolutionDir)packages\.&quot;"
      Condition="'%(Extension)' != '.sln' And Exists('%(RootDir)%(Directory)packages.config')"/>
    
    <!--
	  The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(ImportProjects.Identity)" Targets="Build" Properties="OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration) " />
    Instead with use the Exec task which starts the MSBuild process.
	  -->
    
    <!-- Build solutions... -->
    <Exec
      Command="&quot;$(MSBuildToolsPath)\msbuild&quot; /nologo /v:m /t:Build &quot;/p:OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration)&quot; &quot;%(ImportProjects.Identity)&quot;"
      Condition="'%(Extension)' == '.sln'" />
    <!-- ...and projects -->
    <MSBuild
      Projects="%(ImportProjects.Identity)"
      Targets="Build"
      Properties="OutDir=%(ImportDir);Platform=%(ImportPlatform);Configuration=%(ImportConfiguration)"
      Condition="'%(Extension)' != '.sln'" />
  </Target>

  <!-- ================ ImportFiles ================ -->

  <Target Name="ImportFiles"
          Inputs="@(ImportFiles)"
          Outputs="@(ImportFiles -> '%(ImportDir)%(RecursiveDir)%(ImportFile)')">
    <Copy SourceFiles="%(ImportFiles.Identity)" DestinationFiles="%(ImportDir)%(RecursiveDir)%(ImportFile)" />
    <Message Text="  [+] %(ImportFiles.Identity) =&gt; %(ImportDir)%(RecursiveDir)%(ImportFile)" Importance="high" />
  </Target>
  
  <!-- ================ Main targets ================ -->

  <Target Name="ImportClean"   DependsOnTargets="ImportFilesClean;ImportProjectsClean" />
  <Target Name="ImportBuild"   DependsOnTargets="ImportProjects;ImportFiles" />  
  <Target Name="ImportRebuild" DependsOnTargets="ImportClean;ImportBuild" />
  
  <!-- ================ ImportTrace ================ -->
  
  <Target Name="ImportTrace">
    <Message Importance="high" Text="[%(ImportConfiguration)|%(ImportPlatform)] %(ImportProjects.Identity) =&gt; %(ImportDir)" />
    <Message Importance="high" Text="[+] %(ImportFiles.Identity) =&gt; %(ImportDir)%(ImportFile)" />
  </Target>
</Project>