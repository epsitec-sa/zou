<?xml version="1.0" encoding="utf-8"?>
<!--
Import this script at the end of the C# interop project

Layout:
=======
    
  bundle1\.po\                                          $(PoBundleRootDir)
      bundle1.fr-CH.po                                  %(PoResource.PoBundlePath)  
      bundle1.de-CH.po
      .refs\                                            $(PoReferencesDir)
        PotModules.zou                                  $(PotModuleReferencesPath)
          - module1\.po\module1.pot                     $(PotModulePath)
        PotDomains.zou                                  $(PotDomainReferencesPath)
          - project1\obj\$(Configuration)\domain1.pot   %(PoResource.PotDomainPath)
          - project1\obj\$(Configuration)\domain2.pot
        PoModules.fr-CH.zou                             %(PoResource.PoModuleReferencesPath)
          - module1\.po\module1.fr-CH.po                %(PoResource.PoModulePath)
        PoDomains.fr-CH.zou                             %(PoResource.PoDomainReferencesPath)
          - project1\Resource\domain1.fr-CH.po          %(PoResource.FullPath)
          - project1\Resource\domain2.fr-CH.po
        MoDomains.fr-CH.zou                             %(PoResource.MoDomainReferencesPath)
          -project1\bin\$(Configuration)\locale\fr-CH\LC_MESSAGES\domain1.mo  %(PoResource.MoDomainPath)
          -project1\bin\$(Configuration)\locale\fr-CH\LC_MESSAGES\domain2.mo
            
    module1\.po\                                        $(PoModuleRootDir)
      module1.pot                                       $(PotModulePath)
      module1.fr-CH.po                                  %(PoResource.PoModulePath)
      module1.de-CH.po
          
    project1\
      Source\
        *.cs
        
      Resource\
        domain1.fr-CH.po                                %(PoResource.FullPath)
        domain1.de-CH.po
        domain2.fr-CH.po
        domain2.de-CH.po
        
      obj\$(Configuration)\                             $(PotDomainDir)
        domain1.Sources.zou                             %(PoResource.PotSourceReferencesPath)
        domain1.pot                                     %(PoResource.PotDomainPath)
        domain2.pot
          
      bin\$(Configuration)\locale\fr-CH\LC_MESSAGES\    %(PoResource.MoDomainDir)
        domain1.mo                                      %(PoResource.MoDomainPath)
        domain2.mo

  where:
      bundle1           $(BundleName)
      module1           $(ModuleName)
      domain1           %(PoResource.Domain)
      fr-CH             %(PoResource.Culture)
      bundle1.fr-CH.po  %(PoResource.PoBundleFileName)
      module1.fr-CH.po  %(PoResource.PoModuleFileName)

Pseudo-code:
============

  foreach (project in solution)
  {
    PoBundle    = msgcat  (culture, PoReferences)                         // integrate external translations
    PotDomain   = xgettext(*.cs)                                          // update domain message IDs
    PotModule   = msgcat  (anyCulture, PotDomain[, PotModule])            // update module message IDs

    foreach (poResource)
    {
        PoBundle    = msginit (PotDomain) - (if PoBundle not Initialized)
        PoModule    = msginit (PotModule) - (if PoModule not Initialized)
        PoDomain    = msginit (PotDomain) - (if PoDomain not initialized)

        PoBundle    = msgcat  (culture, PoBundle, PoDomain)               // concat domain changes into bundle
        PoModule    = msgmerge(culture, -C PoBundle, nul, PotModule)      // import bundle changes into module
        PoDomain    = msgmerge(culture, -C PoBundle, nul, PoDomain)       // import bundle changes into domain

        MoDomain    = msgfmt(PoDomain)                                    // compile domain
    }
  
    if (project is last)
    {
      // touch all references to same last 
      PotReferences.Time = PoReferences.Time = MoReferences.Time = LastModifiedMoDomain.Time 
    }
  }
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="GetTextBuild">

  <!-- Make sure that PoResource is available in VisualStudio's Build Action combo -->
  <ItemGroup>
    <AvailableItemName Include="PoResource" />
    <!--<AvailableItemName Include="PoGlobalResource" />-->
  </ItemGroup>

  <Import Project="Cs.Boot.props" Condition="'$(CsBootImported)' != 'true'"/>
  <Import Project="BuildSequence.targets" Condition="'$(BuildSequencePath)' == ''"/>

  <!--=========================================================================-->
  <!-- Definitions -->
  
  <PropertyGroup>
    <PoClearFuzzy>false</PoClearFuzzy>
    
    <PoLocaleSubdir>locale\</PoLocaleSubdir>
    
    <PoBundleName>$(BundleName)</PoBundleName>
    
    <PoBundleRootDir>$(BundleDir).po\</PoBundleRootDir>
    <PoReferencesDir>$(PoBundleRootDir).refs\</PoReferencesDir>

    <PotModuleReferencesPath>$(PoReferencesDir)PotModules.zou</PotModuleReferencesPath>
    <PotDomainReferencesPath>$(PoReferencesDir)PotDomains.zou</PotDomainReferencesPath>
    
    <PoModuleName    Condition="'$(ModuleName)' != ''">$(ModuleName)</PoModuleName>
    <PoModuleRootDir Condition="'$(ModuleName)' != ''">$(ModuleDir).po\</PoModuleRootDir>
    <PotModulePath   Condition="'$(ModuleName)' != ''">$(PoModuleRootDir)$(PoModuleName).pot</PotModulePath>
    
    <PotDomainDir>$([System.IO.Path]::Combine($(ProjectDir),$(IntermediateOutputPath)))</PotDomainDir>

    <XGetText>$(ZouBinDir)xgettext</XGetText>
    <MsgInit>$(ZouBinDir)msginit</MsgInit>
    <MsgMerge>$(ZouBinDir)msgmerge</MsgMerge>
    <MsgCat>$(ZouBinDir)msgcat</MsgCat>
    <MsgFmt>$(ZouBinDir)msgfmt</MsgFmt>
    <MsgAttrib>$(ZouBinDir)msgattrib</MsgAttrib>

    <PoCopyright>EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland</PoCopyright>
    <PoPackageName Condition="'$(ModuleName)' == ''">'$(BundleName)'</PoPackageName>
    <PoPackageName Condition="'$(ModuleName)' != ''">'$(BundleName).$(ModuleName)'</PoPackageName>

    <!-- Use default keyword to extract messages (same as NGetText.Catalog methods) -->
    <PoKeywordSpec></PoKeywordSpec>
  </PropertyGroup>

  <!--=========================================================================-->
  <!--
  PoResourceItems.Init()
  {
    foreach(item in g::poResourceItems)
    {
      item.Culture     = ...
      item.Domain      = ...
      item.Initialized = ...
      item.PoModule    = { Path, Initialized }
      item.PoBundle    = { Path, Initialized }
      item.MoResource  = { Dir, Path }
    }
  }
  -->
  
  <Target Name="InitPoResources">
    <MakeDir Directories="$(PoReferencesDir)" />
    <MakeDir Directories="$(PoModuleRootDir)" Condition="'$(ModuleName)' != ''"/>
    <MakeDir Directories="$(PotDomainDir)" />

    <!-- Extract Culture metadata from PO project resource name (exemple: Project1.fr-CH.po) -->
    <AssignCulture Files="@(PoResource);@(PoGlobalResource)">
      <Output TaskParameter="AssignedFilesWithCulture" ItemName="PoResourceWithCulture" />
      <Output TaskParameter="AssignedFilesWithNoCulture" ItemName="PoResourceWithNoCulture" />
    </AssignCulture>
    <AddFileInfo Files="@(PoResourceWithCulture);@(PoResourceWithNoCulture)">
      <Output TaskParameter="OutputFiles" ItemName="PoResourceWithInfo" />
    </AddFileInfo>
    <!-- Add metadata helpers -->
    <ItemGroup>
      <PoResource Remove="@(PoResourceWithInfo)" />
      <PoResource Include="@(PoResourceWithInfo)" />
      <PoResource>
        <!-- Use en-US as default culture -->
        <Culture     Condition="'%(Culture)' == ''">en-US</Culture>
        <!-- PO resource is considered as initialized if not empty. -->
        <Initialized Condition="'%(Length)' &gt; '10'">true</Initialized>
        <Domain>$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)'))</Domain>
      </PoResource>
      <PoResource>
        <PoModuleReferencesPath>$(PoReferencesDir)PoModules.%(Culture).zou</PoModuleReferencesPath>
        <PoDomainReferencesPath>$(PoReferencesDir)PoDomains.%(Culture).zou</PoDomainReferencesPath>
        <MoDomainReferencesPath>$(PoReferencesDir)MoDomains.%(Culture).zou</MoDomainReferencesPath>

        <PotSourceReferencesPath>$(PotDomainDir)%(Domain).Sources.zou</PotSourceReferencesPath>
        <PotDomainPath>$(PotDomainDir)%(Domain).pot</PotDomainPath>
        <PoBundleFileName>$(PoBundleName).%(Culture).po</PoBundleFileName>
        <PoModuleFileName Condition="'$(ModuleName)' != ''">$(PoModuleName).%(Culture).po</PoModuleFileName>
        <MoDomainDir>$(TargetDir)$(PoLocaleSubdir)%(Culture)\LC_MESSAGES\</MoDomainDir>
      </PoResource>
      <PoResource>
        <PoBundlePath>$(PoBundleRootDir)%(PoBundleFileName)</PoBundlePath>
        <PoModulePath Condition="'$(ModuleName)' != ''">$(PoModuleRootDir)%(PoModuleFileName)</PoModulePath>
        <MoDomainPath>%(MoDomainDir)%(Domain).mo</MoDomainPath>
      </PoResource>
      <PoResource>
        <PoModuleInitialized Condition="'$(ModuleName)' != '' And Exists('%(PoModulePath)')">true</PoModuleInitialized>
      </PoResource>
    </ItemGroup>

    <!--<LogItems Items="@(PoResource)" Title="PoResource" AllMetadata="true" />-->
  </Target>

  <!--=========================================================================-->

  <Target Name="ReadPotModuleReferences"
        DependsOnTargets="InitPoResources"
        Outputs="$(PotModuleReferencesPath)">

    <ReadLinesFromFile File="$(PotModuleReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <PoResource>
        <PotModuleReferences>@(_Temporary->'$(BundleDir)%(Identity)')</PotModuleReferences>
      </PoResource>
    </ItemGroup>

    <!--<Message Importance="high" Text="PotModuleReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PotModuleReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePotModuleReferences"
        DependsOnTargets="ReadPotModuleReferences"
        Outputs="$(PotModuleReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PotModuleReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="$(PotModulePath)" />
      <_Temporary Include="$(PotModulePath)" />
      <PoResource>
        <PotModuleReferences>@(_Temporary)</PotModuleReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="$(PotModuleReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PotModuleReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PotModuleReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->

  <Target Name="ReadPotDomainReferences"
          DependsOnTargets="InitPoResources"
          Outputs="$(PotDomainReferencesPath)">

    <ReadLinesFromFile File="$(PotDomainReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <PoResource>
        <PotDomainReferences>@(_Temporary->'$(BundleDir)%(Identity)')</PotDomainReferences>
      </PoResource>
    </ItemGroup>

    <!--<Message Importance="high" Text="PotDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PotDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePotDomainReferences"
        DependsOnTargets="ReadPotDomainReferences"
        Outputs="$(PotDomainReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PotDomainReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.PotDomainPath)" />
      <_Temporary Include="%(PoResource.PotDomainPath)" />
      <PoResource>
        <PotDomainReferences>@(_Temporary)</PotDomainReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="$(PotDomainReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PotDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PotDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->

  <Target Name="ReadPoModuleReferences"
          DependsOnTargets="InitPoResources"
          Outputs="%(PoResource.PoModuleReferencesPath)">

    <ReadLinesFromFile File="%(PoResource.PoModuleReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    
    <ItemGroup>
      <PoResource>
        <PoModuleReferences>@(_Temporary->'$(BundleDir)%(Identity)')</PoModuleReferences>
      </PoResource>
    </ItemGroup>

    <!--<Message Importance="high" Text="PoModuleReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoModuleReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePoModuleReferences"
        DependsOnTargets="ReadPoModuleReferences"
        Outputs="%(PoResource.PoModuleReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PoModuleReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.PoModulePath)" />
      <_Temporary Include="%(PoResource.PoModulePath)" />
      <PoResource>
        <PoModuleReferences>@(_Temporary)</PoModuleReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="%(PoResource.PoModuleReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PoModuleReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoModuleReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->

  <Target Name="ReadPoDomainReferences"
          DependsOnTargets="InitPoResources"
          Outputs="%(PoResource.PoDomainReferencesPath)">

    <ReadLinesFromFile File="%(PoResource.PoDomainReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <PoResource>
        <PoDomainReferences>@(_Temporary->'$(BundleDir)%(Identity)')</PoDomainReferences>
      </PoResource>
    </ItemGroup>
    
    <!--<Message Importance="high" Text="PoDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoDomainReference" />-->
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePoDomainReferences"
        DependsOnTargets="ReadPoDomainReferences"
        Outputs="%(PoResource.PoDomainReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PoDomainReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.FullPath)" />
      <_Temporary Include="%(PoResource.FullPath)" />
      <PoResource>
        <PoDomainReferences>@(_Temporary)</PoDomainReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="%(PoResource.PoDomainReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PoDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->

  <Target Name="ReadMoDomainReferences"
          DependsOnTargets="InitPoResources"
          Outputs="%(PoResource.MoDomainReferencesPath)">

    <ReadLinesFromFile File="%(PoResource.MoDomainReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <PoResource>
        <MoDomainReferences>@(_Temporary->'$(BundleDir)%(Identity)')</MoDomainReferences>
      </PoResource>
    </ItemGroup>
    
    <!--<Message Importance="high" Text="MoDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="MoDomainReference" />-->
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="WriteMoDomainReferences"
        DependsOnTargets="ReadMoDomainReferences"
        Outputs="%(PoResource.MoDomainReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.MoDomainReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.MoDomainPath)" />
      <_Temporary Include="%(PoResource.MoDomainPath)" />
      <PoResource>
        <MoDomainReferences>@(_Temporary)</MoDomainReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="%(PoResource.MoDomainReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="MoDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="MoDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>


  <!--=========================================================================-->
  <!--
  PoBundle.Consolidate(poResourceItem, poFileItems)
  {
    this.poBundleFile = msgcat(culture, poInitialReferences)
  }
  -->

  <Target Name="ConsolidatePoBundle"
          DependsOnTargets="
            ReadPoModuleReferences;
            ReadPoDomainReferences"
          Inputs="
            %(PoResource.PoModuleReferences);
            %(PoResource.PoDomainReferences)"
          Outputs="%(PoResource.PoBundlePath)">

    <!-- PoBundle = msgcat(culture, PoReferences) -->
    <ItemGroup>
      <PoReference Include="%(PoResource.PoBundlePath)" Condition="Exists(%(PoResource.PoBundlePath))"/>
      <PoReference Include="%(PoResource.PoModuleReferences);%(PoResource.PoDomainReferences)" />
    </ItemGroup>
    
    <PropertyGroup>
      <_Options>--no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture) -o"%(PoResource.PoBundlePath)"</_Options>
      <PoReferences>@(PoReference->'"%(FullPath)"')</PoReferences>
      <PoReferences>$(PoReferences.Replace(';', ' '))</PoReferences>
    </PropertyGroup>
    
    <Exec Command='"$(MsgCat)" $(_Options) $(PoReferences)' />
    <CleanPoFile Condition="'$(NoPoClean)' == ''" SourceFiles="%(PoResource.PoBundlePath)" />
    
    <ItemGroup>
      <PoReference Remove="@(PoReference)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!--
  Sources.Create(compileItems, bool includeProjectReferences)
  {
    var sourceItems = compileItems.Exclude(tmp\*);
    if (includeProjectReferences)
    {
      sourceItems.Concat (projectReferences.Select (dir\**\*.cs).Exclude (dir\obj\**\*.cs))
    }
    return sourceItems.Do (item.RelativePath = ...);
  }
  -->

  <Target Name="CreatePotSources"
          Condition="'@(Compile)' != '' Or ('@(PoGlobalResource)' != '' And '@(ProjectReference)' != '')"
          Outputs="@(PotSource)">
    <ItemGroup>
      <PotSource Include="@(Compile)" Exclude="$(TMP)\*;$(PotDomainDir)\*" />
      <PotSource Condition="'@(PoGlobalResource)' != ''" Include="%(ProjectReference.RootDir)%(Directory)**\*.cs" Exclude="%(ProjectReference.RootDir)%(Directory)obj\**\*.cs" />
      <PotSource>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(PotSource.FullPath)))</RelativePath>
      </PotSource>
    </ItemGroup>
    <!--<LogItems Items="@(PotSource)" Title="PotSource" AllMetadata="true"/>-->
  </Target>

  <!--=========================================================================-->
  <!--
  Source.Create(sourceItems)
  {
    var sourceFile = File.Create(sourceItems.Select (item.RelativePath));
    return new Source (sourceFile)
  }
  -->

  <Target Name="WritePotSourceReferences"
          DependsOnTargets="InitPoResources;CreatePotSources"
          Inputs="@(PotSource)"
          Outputs="%(PoResource.PotSourceReferencesPath)">

    <WriteLinesToFile File="%(PoResource.PotSourceReferencesPath)" Lines="@(PotSource->'%(RelativePath)')" Overwrite="true" />
  </Target>

  <!--=========================================================================-->
  <!--
  PotDomain.Create(potSourceFile)
  {
    var potDomainFile = xgettext(potSourceFile);
    potDomainFile.Replace(CHARSET, UTF-8);
    return new PotDomain(potDomainFile);
  }
  -->

  <Target Name="CreatePotDomain"
          DependsOnTargets="WritePotSourceReferences"
          Inputs="%(PoResource.PotSourceReferencesPath)"
          Outputs="%(PoResource.PotDomainPath)">

    <!-- PotDomain = xgettext(PotSource) -->
    <PropertyGroup>
      <_Options>--from-code=UTF-8 --no-wrap -D"$(BundleDir)." -f"%(PoResource.PotSourceReferencesPath)" -o"%(PoResource.PotDomainPath)"</_Options>
      <_Options Condition="'$(PoCopyright)'   != ''">$(_Options) --copyright-holder="$(PoCopyright)"</_Options>
      <_Options Condition="'$(PoPackageName)' != ''">$(_Options) --package-name="$(PoPackageName)"</_Options>
      <_Options Condition="'$(PoKeywordSpec)' != ''">$(_Options) --keyword="$(PoKeywordSpec)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(XGetText)" $(_Options)' />

    <Error Code="$(ErrorPoNoMessageIdCode)" Text="$(ErrorPoNoMessageId)" Condition="!Exists(%(PoResource.PotDomainPath))" ContinueOnError="false" />

    <!-- Replace CHARSET with UTF-8 and remove BOM -->
    <FileUpdate Files="%(PoResource.PotDomainPath)" Multiline="true" IgnoreCase="true" Encoding="utf-8-without-bom"
                Regex='^("Content-Type.+?charset=)(CHARSET)(.*)$' ReplacementText="$1UTF-8$3"/>
  </Target>
  
  <Target Name="DeletePotDomain">
    <Delete Files="@(PoResource->'%(PotSourceReferencesPath)');@(PoResource->'%(PotDomainPath)')" />
  </Target>

  <!--=========================================================================-->
  <!--
  PotModule.CreateOrUpdate(potDomainFile)
  {
    if (!potModuleFile.Initialized)
    {
      potModuleFile = potDomainFile.Copy()
    }
    
    else
    {
      potModuleFile = msgcat(anyCulture, potModuleFile, potDomainFile)
    }
    return new PotModule(potModuleFile);
  }
  -->

  <Target Name="CreateOrUpdatePotModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoResources;CreatePotDomain"
          Inputs="@(PoResource->'%(PotDomainPath)')"
          Outputs="$(PotModulePath)">

    <!--PotModule = msgcat (anyCulture, PotReferences) -->
    <ItemGroup>
      <PotReference Include="$(PotModulePath)" Condition="Exists($(PotModulePath))"/>
      <PotReference Include="@(PoResource->'%(PotDomainPath)')" />
    </ItemGroup>

    <PropertyGroup>
      <_Options>--no-wrap -D"$(BundleDir)." --lang="" -o"$(PotModulePath)"</_Options>
      <PotReferences>@(PotReference->'"%(FullPath)"')</PotReferences>
      <PotReferences>$(PotReferences.Replace(';', ' '))</PotReferences>
    </PropertyGroup>

    <Exec Command='"$(MsgCat)" $(_Options) $(PotReferences)' />
    <CleanPoFile Condition="'$(NoPoClean)' == ''" SourceFiles="$(PotModulePath)" />

    <ItemGroup>
      <PotReference Remove="@(PotReference)" />
    </ItemGroup>
  </Target>
  
  <Target Name="DeletePotModule">
    <Delete Files="$(PotModulePath)" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoBundle.Create(poResourceItem, potDomainFile)
  {
    var poBundleFile = poResourceItem.BundleFile;
    if (!poBundleFile.Exists)
    {
      poBundleFile = msginit (potDomainFile);
      // poBundleFile = msgAttrib (poBundleFile, clear-fuzzy);
    }
    return new PoBundle(poBundleFile);
  }
  -->

  <Target Name="InitPoBundle"
          DependsOnTargets="InitPoResources;CreateOrUpdatePotModule"
          Inputs="$(PotModulePath)"
          Outputs="%(PoResource.PoBundlePath)">

    <PropertyGroup>
      <PoBundleInitialized Condition="Exists('%(PoResource.PoBundlePath)')">true</PoBundleInitialized>
    </PropertyGroup>

    <!-- PoBundle = msginit(PotDomain) if PoBundle does not exist -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoBundlePath)" -i"$(PotModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'$(PoBundleInitialized)' != 'true'" />

    <!-- PoBundle -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>--clear-fuzzy -o"%(PoResource.PoBundlePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.PoBundlePath)"' Condition="'$(PoClearFuzzy)' == 'true' And '$(PoBundleInitialized)' != 'true'" />


    <!-- Force a refresh if PoResource or PoModule files exist -->
    <PropertyGroup>
      <PoBundleShouldBeUpdated Condition="'$(PoBundleInitialized)' != 'true' And ('%(PoResource.Initialized)' == 'true' Or ('$(ModuleName)' != '' And '%(PoResource.PoModuleInitialized)' == 'true'))">true</PoBundleShouldBeUpdated>
    </PropertyGroup>
    <Touch Files="%(PoResource.PoBundlePath)" Time="01.01.2016" Condition="'$(PoBundleShouldBeUpdated)' == 'true'" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoModule.Create(poResourceItem, potModuleFile)
  {
    var poModuleFile = poResourceItem.ModuleFile;
    if (!poModuleFile.Initialized)
    {
      poModuleFile = msginit (potModuleFile);
      // poModuleFile = msgAttrib (poModuleFile, clear-fuzzy);
    }
    return new PoModule(poModuleFile);
  }
  -->

  <Target Name="InitPoModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoResources;CreateOrUpdatePotModule"
          Inputs="$(PotModulePath)"
          Outputs="%(PoResource.PoModulePath)">

    <!-- PoModule = msginit(PotModule) if PoModule does not exist -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoModulePath)" -i"$(PotModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'%(PoResource.PoModuleInitialized)' != 'true'" />

    <!-- PoModule -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>--clear-fuzzy -o"%(PoResource.PoModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.PoModulePath)"' Condition="'$(PoClearFuzzy)' == 'true' And '%(PoResource.PoModuleInitialized)' != 'true'" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoResource.Create(poResourceItem, potDomainFile)
  {
    var poResourceFile = poResourceItem.File;
    if (!poResourceFile.Initialized)
    {
      poResourceFile = msginit (potDomainFile);
      // poResourceFile = msgAttrib (poResourceFile, clear-fuzzy);
    }
    return new PoResource(poResourceFile);
  }
  -->

  <Target Name="InitPoDomain"
          DependsOnTargets="InitPoResources;CreatePotDomain"
          Inputs="%(PoResource.PotDomainPath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoResource = msginit(PotDomain) - fuzzy marker (if not initialized) -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)" -i"%(PoResource.PotDomainPath)"</_Options>
    </PropertyGroup>
    
    <MakeDir Directories="%(PoResource.RootDir)%(Directory)" />
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'%(PoResource.Initialized)' != 'true'" />

    <!-- PoResource -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>--clear-fuzzy -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.FullPath)"' Condition="'$(PoClearFuzzy)' == 'true' And '%(PoResource.Initialized)' != 'true'" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoDomain.UpdateFromPot(poResourceItem, potDomainFile, poBundle)
  {
    this.poResourceFile = msgmerge(poResourceItem, compendium: poBundle, potDomainFile)
  }
  -->

  <Target Name="UpdatePoDomainFromPot"
          DependsOnTargets="InitPoDomain"
          Inputs="%(PoResource.PotDomainPath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoDomain = msmerge(culture, -C PoBundle, PotDomain) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgMerge)" $(_Options) nul "%(PoResource.PotDomainPath)"' />
  </Target>

  <!--=========================================================================-->
  <!--
  PoBundle.UpdateFromResource(poResourceItem, potDomainFile, poResourceFile)
  {
    this.poBundleFile = msgcat(culture, poBundleFile, poResourceFile)
  }
  -->

  <Target Name="UpdatePoBundleFromDomain"
          DependsOnTargets="InitPoBundle;UpdatePoDomainFromPot"
          Inputs="%(PoResource.FullPath)"
          Outputs="%(PoResource.PoBundlePath)">

    <!-- PoBundle = msgcat(culture, PoBundle, PoResource) -->
    <PropertyGroup>
      <_Options>--no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture) -o"%(PoResource.PoBundlePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgCat)" $(_Options) "%(PoResource.PoBundlePath)" "%(PoResource.FullPath)"' />
    <CleanPoFile Condition="'$(NoPoClean)' == ''" SourceFiles="%(PoResource.PoBundlePath)" />
  </Target>


  <!--=========================================================================-->
  <!--
  PoModule.Update(poResourceItem, potModuleFile, poBundleFile)
  {
    this.poModuleFile = msgmerge(poResourceItem.Culture, compendium: poBundleFile, potModuleFile)
  }
  -->

  <Target Name="UpdatePoModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoModule;UpdatePoBundleFromDomain"
          Inputs="$(PotModulePath);%(PoResource.PoBundlePath)"
          Outputs="%(PoResource.PoModulePath)">

    <!-- PoModule = msmerge(culture, -C PoBundle, PotModule) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgMerge)" $(_Options) nul "$(PotModulePath)"' />
    
    <!-- Disable ConsolidatePoBundleFromModule -->
    <!--<Touch Files="%(PoResource.PoModulePath)" Time="%(PoResource.ModifiedTime)" />-->
  </Target>

  <!--=========================================================================-->
  <!--
  PoDomain.Update(poResourceItem, potDomainFile, poBundle)
  {
    this.poResourceFile = msgmerge(poResourceItem, compendium: poBundle, potDomainFile)
  }
  -->

  <Target Name="UpdatePoDomain"
          DependsOnTargets="InitPoDomain;UpdatePoBundleFromDomain"
          Inputs="%(PoResource.PotDomainPath);%(PoResource.PoBundlePath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoDomain = msmerge(culture, -C PoBundle, PotDomain) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgMerge)" $(_Options) nul "%(PoResource.PotDomainPath)"' />
  </Target>

  <!--=========================================================================-->
  <!-- Create MO Resource -->

  <Target Name="CreateMoDomain"
          DependsOnTargets="UpdatePoDomain"
          Inputs="%(PoResource.FullPath)"
          Outputs="%(PoResource.MoDomainPath)">

    <MakeDir Directories="%(PoResource.MoDomainDir)" />
    <Exec Command='"$(MsgFmt)" -o"%(PoResource.MoDomainPath)" "%(PoResource.FullPath)"' />

    <ItemGroup>
      <_Temporary Include="%(PoResource.MoDomainPath)" />
    </ItemGroup>
    
    <PropertyGroup>
      <MoDomainLastModifiedTime>%(_Temporary.ModifiedTime)</MoDomainLastModifiedTime>
    </PropertyGroup>

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="DeleteMoDomain" DependsOnTargets="InitPoResources">
    <!--<Message Importance="high" Text="[-] %(PoResource.MoDomainPath)" />-->
    <Delete Files="@(PoResource->'%(MoDomainPath)')" />
  </Target>

  <!--=========================================================================-->

  <Target Name="WritePoReferences"
          DependsOnTargets="
            WritePotModuleReferences;
            WritePotDomainReferences;
            WritePoModuleReferences;
            WritePoDomainReferences;
            WriteMoDomainReferences" />

  <!--=========================================================================-->

  <Target Name="GetPoBundleReferences">
    <ItemGroup>
      <PoBundleReference Include="$(PoBundleRootDir)*.po" />
    </ItemGroup>
  </Target>

  <Target Name="GetPoReferences"
          DependsOnTargets="WritePoReferences">

    <ItemGroup>
      <_PoReferenceFile Include="$(PoReferencesDir)*" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_PoReferenceFile.FullPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <PoReference      Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferenceFile Remove="@(_PoReferenceFile)" />
      <_Temporary       Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="TouchPoReferences"
          Condition="'$(BuildSequenceIsLastProject)' == 'true'"
          DependsOnTargets="GetPoBundleReferences;GetPoReferences"
          Inputs="@(PoReference)"
          Outputs="@(PoBundleReference)">

    <Touch Files="%(PoBundleReference.FullPath)" Time="$(MoDomainLastModifiedTime)" />
    <Touch Files="%(PoReference.FullPath)"       Time="$(MoDomainLastModifiedTime)" Condition="Exists(%(PoReference.FullPath))" />

    <ItemGroup>
      <PoBundleReference Remove="@(PoBundleReference)" />
      <PoReference Remove="@(PoReference)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!-- Import MO Resources References -->
  <!--=========================================================================-->

  <Target Name="GetMoReferences">
    <ItemGroup>
      <MoResourceReference Include="%(ProjectReference.RootDir)%(Directory)$(OutputPath)$(PoLocaleSubdir)**\*.mo">
        <ProjectOwnerDirectory>%(ProjectReference.RootDir)%(Directory)</ProjectOwnerDirectory>
      </MoResourceReference>
      <MoResourceReference>
        <Link>$([MSBuild]::MakeRelative(%(MoResourceReference.ProjectOwnerDirectory)$(OutputPath), %(MoResourceReference.FullPath)))</Link>
      </MoResourceReference>
    </ItemGroup>
    <!--<LogItems Items="@(ProjectReference)" Title="ProjectReference" AllMetadata="true" />
    <LogItems Items="@(MoResourceReference)" Title="MoResourceReference" AllMetadata="true" />-->
  </Target>

  <Target Name="ImportMoResourceReferences"
          DependsOnTargets="GetMoReferences"
          Inputs="%(MoResourceReference.FullPath)"
          Outputs="$(TargetDir)$(PoLocaleSubdir)%(MoResourceReference.RecursiveDir)%(FileName)%(Extension)">
    <Copy SourceFiles="%(MoResourceReference.FullPath)" DestinationFiles="$(TargetDir)$(PoLocaleSubdir)%(RecursiveDir)%(FileName)%(Extension)" Condition="Exists(%(MoResourceReference.FullPath))"/>
  </Target>

  <!-- Set MO Resources files as content -->
  <Target Name="SetMoResourceReferencesAsContent"
          DependsOnTargets="GetMoReferences"
          Inputs="@(MoResourceReference)"
          Outputs="@(MoResourceReference->'$(TargetDir)%(RecursiveDir)%(FileName)%(Extension)')">
    <ItemGroup>
      <Content Include="%(MoResourceReference.FullPath)" Condition="Exists(%(MoResourceReference.FullPath))">
        <Link>%(MoResourceReference.Link)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Visible>false</Visible>
      </Content>
    </ItemGroup>
  </Target>

  <Target Name="ImportMoResourceReferencesBuild"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="ImportMoResourceReferences;SetMoResourceReferencesAsContent" />

  <Target Name="ImportMoResourceReferencesClean"
          AfterTargets="AfterClean"
          DependsOnTargets="GetMoReferences"
          Outputs="@(MoResourceReference)">

    <Delete Files="@(MoResourceReference)" />
  </Target>

  <!--=========================================================================-->
  <!-- Build -->
  <!--=========================================================================-->

  <Target Name="PoResourceBuild"
          Condition="'@(PoResource)' != ''"
          BeforeTargets="Build"
          DependsOnTargets="
            ReadBuildSequence;
            
            ConsolidatePoBundle;
            CreatePotDomain;
            CreateOrUpdatePotModule;
            InitPoBundle;
            InitPoModule;
            InitPoDomain;
            UpdatePoBundleFromDomain;
            
            UpdatePoModule;
            UpdatePoDomain;
            CreateMoDomain;

            TouchPoReferences;
            
            WriteBuildSequence">
    <!--<LogItems Items="@(PoResource)" AllMetadata="true" />-->
  </Target>

  <Target Name ="PoResourceReset"
          Condition="$(PoReset) != ''">

    <ItemGroup>
      <_Temporary Include="$(PoBundleRootDir)**\*" />
      <_Temporary Include="$(PoModuleRootDir)**\*" />
      <_Temporary Include="@(PoResource)" />
    </ItemGroup>

    <Delete Files="@(_Temporary)" />

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
      <_Temporary Include="$(PoBundleRootDir);$(PoBundleRootDir)**" />
      <_Temporary Include="$(PoModuleRootDir);$(PoModuleRootDir)**" />
    </ItemGroup>
    
    <RemoveDir Directories="@(_Temporary)" />
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="PoResourceClean"
          AfterTargets="Clean"
          DependsOnTargets="
            DeleteMoDomain;
            DeletePotDomain;
            PoResourceReset">

    <ItemGroup>
      <_Temporary Include="$(PoReferencesDir)*.zou" />
      <_Temporary Include="$(PoBundleRootDir)*.mo" />
      <_Temporary Include="$(PoModuleRootDir)*.mo" />
      <_Temporary Include="%(PoResource.RootDir)%(Directory)*.mo" />
    </ItemGroup>
    
    <Delete Files="@(_Temporary)" />
    <RemoveDir Directories="$(PoReferencesDir)" ContinueOnError="true" />

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>
    
</Project>