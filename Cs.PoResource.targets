<?xml version="1.0" encoding="utf-8"?>
<!-- Import this script at the end of the C# interop project -->
<!--
Pseudo-code:
============

Source      = *.cs
PotResource = xgettext(Source)

PotModule   = PotResource if PotModule does not exist
PotModule   = msgcat  (anyCulture, PotModule, PotResource)            // aggregate msgid

foreach (poResourceItem)
{
    PoBundle    = msginit (PotResource) (if PoBundle   not Initialized)
    PoModule    = msginit (PotModule)   (if PoModule   not Initialized)
    PoResource  = msginit (PotResource) (if PoResource not initialized)

    PoBundle    = msgcat  (culture, PoBundle, PoModule)               // aggregate msgstr (translations)
    PoBundle    = msgcat  (culture, PoBundle, PoResource)             // aggregate msgstr (translations)

    PoModule    = msgmerge(culture, -C PoBundle, nul, PotModule)      // give priority to PoBundle translations
    PoResource  = msgmerge(culture, -C PoBundle, nul, PotResource)    // give priority to PoBundle translations

    
    PoResource.Time = PoModule.Time = PoBundle.Time

    MoResource  = msgfmt(PoResource)
}

git push/pull module

PoBundle    = msgcat  (culture, PoBundle, PoModule)

===========================

g::poResourceItems.Init(global);

var sourceItems    = SourceItems.Create(g::compileItems, g::poGlobalResourceItems != null);
var source         = Source.Create(sourceItems);

var potModule      = PotModule.CreateOrUpdate (potResource);
var potResource    = PotResource.Create (source);

var poResourceItems = poResourceItems.Init();
foreach(item in poResourceItems)
{
  var poBundle   = PoBundle.CreateOrConsolidate(item, g::poFiles;g:potFiles);
  var poResource = PoResource.Create(item, potResource);
  var poModule   = PoModule.Create(item, potModule);
  
  var poBundle   = PoBundle.UpdateFromResource(item, poResource);
  
  poModule.Update(item, potResource, poBundle, poModule);
  poResource.Update(item, potResource, poBundle, poModule);
  
  var moResource = MoResource.Create(poResource);
}

-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="GetTextBuild">

  <!-- Make sure that PoResource is available in VisualStudio's Build Action combo -->
  <ItemGroup>
    <AvailableItemName Include="PoResource" />
    <!--<AvailableItemName Include="PoGlobalResource" />-->
  </ItemGroup>

  <Import Project="Cs.Boot.props"  Condition="'$(CsBootImported)' != 'true'"/>

  <!--=========================================================================-->
  <!-- Definitions -->
  
  <PropertyGroup>
    <PoLocaleSubdir>locale\</PoLocaleSubdir>
    <PoIntDir>$([System.IO.Path]::Combine($(ProjectDir),$(IntermediateOutputPath)))</PoIntDir>
    
    <PoRootDir>$(BundleDir)</PoRootDir>
    <PoBundleName>Bundle</PoBundleName>
    
    <PotBundleDir>$(BundleDir).po\</PotBundleDir>
    <PotReferencesDir>$(PotBundleDir)</PotReferencesDir>
    <PotReferencesPath>$(PotReferencesDir)PotReferences.txt</PotReferencesPath>
    
    <PotSourceDir>$(PoIntDir)</PotSourceDir>
    <PotSourcePath>$(PoIntDir)PotSource.txt</PotSourcePath>
    
    <PotResourceDir>$(PoIntDir)</PotResourceDir>
    <PotProjectPath>$(PoIntDir)$(ProjectName).pot</PotProjectPath>
    
    <PoModuleName  Condition="'$(ModuleName)' != ''">$(ModuleName)</PoModuleName>
    <PotModuleDir  Condition="'$(ModuleName)' != ''">$(PotBundleDir)</PotModuleDir>
    <PotModulePath Condition="'$(ModuleName)' != ''">$(PotModuleDir)$(PoModuleName).pot</PotModulePath>

    <XGetText>$(ZouBinDir)xgettext</XGetText>
    <MsgInit>$(ZouBinDir)msginit</MsgInit>
    <MsgMerge>$(ZouBinDir)msgmerge</MsgMerge>
    <MsgCat>$(ZouBinDir)msgcat</MsgCat>
    <MsgFmt>$(ZouBinDir)msgfmt</MsgFmt>
    <MsgAttrib>$(ZouBinDir)msgattrib</MsgAttrib>

    <PoCopyright>EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland</PoCopyright>
    <PoPackageName Condition="'$(ModuleName)' == ''">'$(BundleName)'</PoPackageName>
    <PoPackageName Condition="'$(ModuleName)' != ''">'$(BundleName).$(ModuleName)'</PoPackageName>

    <!-- Use default keyword to extract messages (same as NGetText.Catalog methods) -->
    <PoKeywordSpec></PoKeywordSpec>
  </PropertyGroup>

  <!--=========================================================================-->
  <!--
  PoResourceItems.Init()
  {
    foreach(item in g::poResourceItems)
    {
      item.Culture     = ...
      item.Domain      = ...
      item.Initialized = ...
      item.PoModule    = { Path, Initialized }
      item.PoBundle    = { Path, Initialized }
      item.MoResource  = { Dir, Path }
    }
  }
  -->
  
  <Target Name="InitPoResourceItems">
    <!-- Extract Culture metadata -->
    <AssignCulture Files="@(PoResource);@(PoGlobalResource)">
      <Output TaskParameter="AssignedFilesWithCulture" ItemName="PoResourceWithCulture" />
      <Output TaskParameter="AssignedFilesWithNoCulture" ItemName="PoResourceWithNoCulture" />
    </AssignCulture>
    <AddFileInfo Files="@(PoResourceWithCulture);@(PoResourceWithNoCulture)">
      <Output TaskParameter="OutputFiles" ItemName="PoResourceWithInfo" />
    </AddFileInfo>
    <!-- Add metadata helpers -->
    <ItemGroup>
      <PoResource Remove="@(PoResourceWithInfo)" />
      <PoResource Include="@(PoResourceWithInfo)" />
      <!-- Use en-US as default culture -->
      <PoResource>
        <Culture     Condition="'%(Culture)' == ''">en-US</Culture>
        <Initialized Condition="'%(Length)' &gt; '10'">true</Initialized>
        <Domain>$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)'))</Domain>
      </PoResource>
      <PoResource>
        <PoBundleDir>$(PotBundleDir)%(Culture)\</PoBundleDir>
        <PoBundleFileName>$(PoBundleName).%(Culture).po</PoBundleFileName>
        <PoModuleFileName Condition="'$(ModuleName)' != ''">$(PoModuleName).%(Culture).po</PoModuleFileName>
        <MoProjectDir >$(TargetDir)$(PoLocaleSubdir)%(Culture)\LC_MESSAGES\</MoProjectDir>
      </PoResource>
      <PoResource>
        <PoBundlePath>%(PoBundleDir)%(PoBundleFileName)</PoBundlePath>
        <PoModulePath Condition="'$(ModuleName)' != ''">%(PoBundleDir)%(PoModuleFileName)</PoModulePath>
        <MoProjectPath>%(MoProjectDir)%(Domain).mo</MoProjectPath>
        
        <PoReferencesPath>%(PoBundleDir)PoReferences.txt</PoReferencesPath>
        <MoReferencesPath>%(PoBundleDir)MoProjectReferences.txt</MoReferencesPath>
      </PoResource>
      <PoResource>
        <PoModuleInitialized Condition="'$(ModuleName)' != '' And Exists('%(PoModulePath)')">true</PoModuleInitialized>
      </PoResource>
    </ItemGroup>

    <!--<LogItems Items="@(PoResource)" Title="PoResource" AllMetadata="true" />-->
  </Target>

  <!--=========================================================================-->

  <Target Name="GetPotModuleReferenceItems">
    <ItemGroup>
      <PotModuleReference Include="$(PotBundleDir)*.pot"/>
    </ItemGroup>
    <!--<Message Importance="high" Text="PotModuleReference=@(PotModuleReference->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(PotModuleReference)" />-->
  </Target>

  <!--=========================================================================-->

  <Target Name="GetPotProjectReferenceItems">
    <ReadLinesFromFile File="$(PotReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <PotProjectReference Include="@(_Temporary->'$(PoRootDir)%(Identity)')" />
    </ItemGroup>
    
    <!--<Message Importance="high" Text="PotProjectReference=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" />-->
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>
  
  <!--=========================================================================-->

  <Target Name="GetPoCompendiumReferenceItems"
          DependsOnTargets="InitPoResourceItems"
          Outputs="%(PoResource.Identity)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PoBundleDir)*.po" />
      <PoResource>
        <PoCompendiumReferences>@(_Temporary)</PoCompendiumReferences>
      </PoResource>
    </ItemGroup>
    <!--<Message Importance="high" Text="PoCompendiumReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<LogItems Items="@(PoResource)" />-->
  </Target>

  <!--=========================================================================-->

  <Target Name="GetPoProjectReferenceItems"
          DependsOnTargets="InitPoResourceItems"
          Outputs="%(PoResource.Identity)">

    <!-- Project -->
    <ReadLinesFromFile File="%(PoResource.PoReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <PoResource>
        <PoProjectReferences>@(_Temporary->'$(PoRootDir)%(Identity)')</PoProjectReferences>
      </PoResource>
    </ItemGroup>
    <!--<Message Importance="high" Text="PoProjectReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<LogItems Items="@(PoResource)" />-->
  </Target>

  <!--=========================================================================-->

  <Target Name="GetMoProjectReferenceItems"
          DependsOnTargets="InitPoResourceItems"
          Outputs="%(PoResource.Identity)">

    <ReadLinesFromFile File="%(PoResource.MoReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <ItemGroup>
      <PoResource>
        <MoProjectReferences>@(_Temporary->'$(PoRootDir)%(Identity)')</MoProjectReferences>
      </PoResource>
    </ItemGroup>
    
    <!--<Message Importance="high" Text="MoProjectReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <LogItems Items="@(PoResource)" />
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!--
  PoBundle.Consolidate(poResourceItem, poFileItems)
  {
    this.poBundleFile = msgcat(culture, poInitialReferences)
  }
  -->

  <Target Name="ConsolidatePoBundle"
          DependsOnTargets="
            GetPoCompendiumReferenceItems;
            GetPoProjectReferenceItems"
          Inputs="
            %(PoResource.PoCompendiumReferences);
            %(PoResource.PoProjectReferences)"
          Outputs="%(PoResource.PoBundlePath)">

    <MakeDir Directories="%(PoResource.PoBundleDir)" />

    <!-- PoBundle = msgcat(culture, PoBundle, PoFiles) -->
    <ItemGroup>
      <PoReference Include="%(PoResource.PoCompendiumReferences);%(PoResource.PoProjectReferences)" />
    </ItemGroup>
    <PropertyGroup>
      <_Options>--no-wrap -D"$(PoRootDir)." --lang=%(PoResource.Culture) -o"%(PoResource.PoBundlePath)"</_Options>
      <PoReferences>@(PoReference->'"%(FullPath)"')</PoReferences>
      <PoReferences>$(PoReferences.Replace(';', ' '))</PoReferences>
    </PropertyGroup>
    <Exec Command='"$(MsgCat)" $(_Options) $(PoReferences)' />
  </Target>

  <!--=========================================================================-->
  <!--
  SourceItems.Create(compileItems, bool includeProjectReferences)
  {
    var sourceItems = compileItems.Exclude(tmp\*);
    if (includeProjectReferences)
    {
      sourceItems.Concat (projectReferences.Select (dir\**\*.cs).Exclude (dir\obj\**\*.cs))
    }
    return sourceItems.Do (item.RelativePath = ...);
  }
  -->

  <Target Name="CreatePotProjectSourceItems"
          Condition="'@(Compile)' != '' Or ('@(PoGlobalResource)' != '' And '@(ProjectReference)' != '')"
          Outputs="@(PotSource)">
    <ItemGroup>
      <PotSource Include="@(Compile)" Exclude="$(TMP)\*" />
      <PotSource Condition="'@(PoGlobalResource)' != ''" Include="%(ProjectReference.RootDir)%(Directory)**\*.cs" Exclude="%(ProjectReference.RootDir)%(Directory)obj\**\*.cs" />
      <PotSource>
        <RelativePath>$([MSBuild]::MakeRelative($(PoRootDir), %(PotSource.FullPath)))</RelativePath>
      </PotSource>
    </ItemGroup>
    <!--<LogItems Items="@(PotSource)" Title="PotSource" AllMetadata="true"/>-->
  </Target>

  <!--=========================================================================-->
  <!--
  Source.Create(sourceItems)
  {
    var sourceFile = File.Create(sourceItems.Select (item.RelativePath));
    return new Source (sourceFile)
  }
  -->

  <Target Name="CreatePotProjectSourceFile"
          DependsOnTargets="CreatePotProjectSourceItems"
          Inputs="@(PotSource)"
          Outputs="$(PotSourcePath)">

    <MakeDir Directories="$(PoSourceDir)" />
    <WriteLinesToFile File="$(PotSourcePath)" Lines="@(PotSource->'%(RelativePath)')" Overwrite="true" />
  </Target>

  <!--=========================================================================-->
  <!--
  PotResource.Create(potSourceFile)
  {
    var potResourceFile = xgettext(potSourceFile);
    potResourceFile.Replace(CHARSET, UTF-8);
    return new PotResource(potResourceFile);
  }
  -->

  <Target Name="CreatePotProject"
          DependsOnTargets="CreatePotProjectSourceFile"
          Inputs="$(PotSourcePath)"
          Outputs="$(PotProjectPath)">

    <!-- PotResource = xgettext(PotSource) -->
    <PropertyGroup>
      <_Options>--from-code=UTF-8 --no-wrap -D"$(PoRootDir)." -f"$(PotSourcePath)" -o"$(PotProjectPath)"</_Options>
      <_Options Condition="'$(PoCopyright)'   != ''">$(_Options) --copyright-holder="$(PoCopyright)"</_Options>
      <_Options Condition="'$(PoPackageName)' != ''">$(_Options) --package-name="$(PoPackageName)"</_Options>
      <_Options Condition="'$(PoKeywordSpec)' != ''">$(_Options) --keyword="$(PoKeywordSpec)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(XGetText)" $(_Options)' />

    <!-- Replace CHARSET with UTF-8 -->
    <FileUpdate Files="$(PotProjectPath)" Multiline="true" IgnoreCase="true" Encoding="utf-8-without-bom"
                Regex='^("Content-Type.+?charset=)(CHARSET)(.*)$' ReplacementText="$1UTF-8$3" />
  </Target>
  
  <Target Name="DeletePotProject">
    <Delete Files="$(PotSourcePath);$(PotProjectPath)" />
  </Target>

  <!--=========================================================================-->
  <!--
  PotModule.CreateOrUpdate(potResourceFile)
  {
    if (!potModuleFile.Initialized)
    {
      potModuleFile = potResourceFile.Copy()
    }
    
    else
    {
      potModuleFile = msgcat(anyCulture, potModuleFile, potResourceFile)
    }
    return new PotModule(potModuleFile);
  }
  -->

  <Target Name="CreateOrUpdatePotModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="CreatePotProject"
          Inputs="$(PotProjectPath)"
          Outputs="$(PotModulePath)">

    <MakeDir Directories="$(PotModuleDir)" />
    <PropertyGroup>
      <PotModuleInitialized Condition="'$(ModuleName)' != '' And Exists('$(PotModulePath)')">true</PotModuleInitialized>
    </PropertyGroup>

    <!--PotModule = PotResource if PotModule does not exist-->
    <Copy SourceFiles="$(PotProjectPath)" DestinationFiles="$(PotModulePath)" Condition="'$(PotModuleInitialized)' != 'true'"/>

    <!--PotModule = msgcat (anyCulture, PotModule, PotResource) -->
    <PropertyGroup>
      <_Options>--no-wrap -D"$(PoRootDir)." --lang="" -o"$(PotModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgCat)" $(_Options) "$(PotModulePath)" "$(PotProjectPath)"' Condition="'$(PotModuleInitialized)' == 'true'" />
  </Target>
  
  <Target Name="DeletePotModule">
    <Delete Files="$(PotModulePath)" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoBundle.Create(poResourceItem, potResourceFile)
  {
    var poBundleFile = poResourceItem.BundleFile;
    if (!poBundleFile.Exists)
    {
      poBundleFile = msginit (potResourceFile);
      // poBundleFile = msgAttrib (poBundleFile, clear-fuzzy);
    }
    return new PoBundle(poBundleFile);
  }
  -->

  <Target Name="InitPoBundle"
          DependsOnTargets="InitPoResourceItems;CreatePotProject"
          Inputs="$(PotProjectPath)"
          Outputs="%(PoResource.PoBundlePath)">

    <PropertyGroup>
      <PoBundleInitialized Condition="Exists('%(PoResource.PoBundlePath)')">true</PoBundleInitialized>
    </PropertyGroup>


    <MakeDir Directories="%(PoResource.PoBundleDir)" Condition="'$(PoBundleInitialized)' != 'true'" />

    <!-- PoBundle = msginit(PotResource) if PoBundle does not exist -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoBundlePath)" -i"$(PotProjectPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'$(PoBundleInitialized)' != 'true'" />

    <!-- PoBundle -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>--clear-fuzzy -o"%(PoResource.PoBundlePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.PoBundlePath)"' Condition="'$(PoBundleInitialized)' != 'true'" />


    <!-- Force a refresh if PoResource or PoModule files exist -->
    <PropertyGroup>
      <PoBundleShouldBeUpdated Condition="'$(PoBundleInitialized)' != 'true' And ('%(PoResource.Initialized)' == 'true' Or ('$(ModuleName)' != '' And '%(PoResource.PoModuleInitialized)' == 'true'))">true</PoBundleShouldBeUpdated>
    </PropertyGroup>
    <Touch Files="%(PoResource.PoBundlePath)" Time="01.01.2016" Condition="'$(PoBundleShouldBeUpdated)' == 'true'" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoModule.Create(poResourceItem, potModuleFile)
  {
    var poModuleFile = poResourceItem.ModuleFile;
    if (!poModuleFile.Initialized)
    {
      poModuleFile = msginit (potModuleFile);
      // poModuleFile = msgAttrib (poModuleFile, clear-fuzzy);
    }
    return new PoModule(poModuleFile);
  }
  -->

  <Target Name="InitPoModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoResourceItems;CreateOrUpdatePotModule"
          Inputs="$(PotModulePath)"
          Outputs="%(PoResource.PoModulePath)">

    <!-- PoModule = msginit(PotModule) if PoModule does not exist -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoModulePath)" -i"$(PotModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'%(PoResource.PoModuleInitialized)' != 'true'" />

    <!-- PoModule -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>--clear-fuzzy -o"%(PoResource.PoModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.PoModulePath)"' Condition="'%(PoResource.PoModuleInitialized)' != 'true'" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoResource.Create(poResourceItem, potResourceFile)
  {
    var poResourceFile = poResourceItem.File;
    if (!poResourceFile.Initialized)
    {
      poResourceFile = msginit (potResourceFile);
      // poResourceFile = msgAttrib (poResourceFile, clear-fuzzy);
    }
    return new PoResource(poResourceFile);
  }
  -->

  <Target Name="InitPoProject"
          DependsOnTargets="InitPoResourceItems;CreatePotProject"
          Inputs="$(PotProjectPath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoResource = msginit(PotResource) - fuzzy marker (if not initialized) -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)" -i"$(PotProjectPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'%(PoResource.Initialized)' != 'true'" />

    <!-- PoResource -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>--clear-fuzzy -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.FullPath)"' Condition="'%(PoResource.Initialized)' != 'true'" />
  </Target>

  <!--=========================================================================-->
  <!--
  PoBundle.UpdateFromResource(poResourceItem, potResourceFile, poResourceFile)
  {
    this.poBundleFile = msgcat(culture, poBundleFile, poResourceFile)
  }
  -->

  <Target Name="UpdatePoBundleFromProject"
          DependsOnTargets="InitPoBundle;InitPoProject"
          Inputs="%(PoResource.FullPath)"
          Outputs="%(PoResource.PoBundlePath)">

    <!-- PoBundle = msgcat(culture, PoBundle, PoResource) -->
    <PropertyGroup>
      <_Options>--no-wrap -D"$(PoRootDir)." --lang=%(PoResource.Culture) -o"%(PoResource.PoBundlePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgCat)" $(_Options) "%(PoResource.PoBundlePath)" "%(PoResource.FullPath)"' />
  </Target>


  <!--=========================================================================-->
  <!--
  PoModule.Update(poResourceItem, potModuleFile, poBundleFile)
  {
    this.poModuleFile = msgmerge(poResourceItem.Culture, compendium: poBundleFile, potModuleFile)
  }
  -->

  <Target Name="UpdatePoModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoModule;UpdatePoBundleFromProject"
          Inputs="$(PotModulePath);%(PoResource.PoBundlePath)"
          Outputs="%(PoResource.PoModulePath)">

    <!-- PoModule = msmerge(culture, -C PoBundle, PotModule) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(PoRootDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgMerge)" $(_Options) nul "$(PotModulePath)"' />
    
    <!-- Disable ConsolidatePoBundleFromModule -->
    <!--<Touch Files="%(PoResource.PoModulePath)" Time="%(PoResource.ModifiedTime)" />-->
  </Target>

  <!--=========================================================================-->
  <!--
  PoResource.Update(poResourceItem, potResourceFile, poBundle)
  {
    this.poResourceFile = msgmerge(poResourceItem, compendium: poBundle, potResourceFile)
  }
  -->

  <Target Name="UpdatePoProject"
          DependsOnTargets="InitPoProject;UpdatePoBundleFromProject"
          Inputs="$(PotProjectPath);%(PoResource.PoBundlePath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoResource = msmerge(culture, -C PoBundle, PotResource) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(PoRootDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgMerge)" $(_Options) nul "$(PotProjectPath)"' />
  </Target>

  <!--=========================================================================-->
  <!-- Create MO Resource -->

  <Target Name="CreateMoProject"
          DependsOnTargets="UpdatePoProject"
          Inputs="%(PoResource.FullPath)"
          Outputs="%(PoResource.MoProjectPath)">

    <MakeDir Directories="%(PoResource.MoProjectDir)" />
    <Exec Command='"$(MsgFmt)" -o"%(PoResource.MoProjectPath)" "%(PoResource.FullPath)"' />

  </Target>

  <Target Name="DeleteMoResource" DependsOnTargets="InitPoResourceItems" Outputs="%(PoResource.MoProjectPath)">
    <!--<Message Importance="high" Text="[-] %(PoResource.MoProjectPath)" />-->
    <Delete Files="%(PoResource.MoProjectPath)" />
  </Target>

  <!--=========================================================================-->
  <!-- Save references and touch them -->


  <Target Name="SavePotProjectReferences"
          DependsOnTargets="GetPotProjectReferenceItems">
    <ItemGroup>
      <PotProjectReference Remove="$(PotProjectPath)" />
      <PotProjectReference Include="$(PotProjectPath)" />
      <PotProjectReference>
        <RelativePath>$([MSBuild]::MakeRelative($(PoRootDir), %(FullPath)))</RelativePath>
      </PotProjectReference>
    </ItemGroup>
    <MakeDir Directories="$(PotReferencesDir)" />
    <WriteLinesToFile File="$(PotReferencesPath)" Lines="@(PotProjectReference->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PotProjectReference=@(PotProjectReference->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(PotProjectReference)" Title="PotProjectReference" />-->
  </Target>

  <Target Name="SavePoProjectReferences"
          DependsOnTargets="InitPoResourceItems;GetPoProjectReferenceItems"
          Outputs="%(PoResource.Identity)">
    
    <ItemGroup>
      <_Temporary Include="%(PoResource.PoProjectReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.FullPath)" />
      <_Temporary Include="%(PoResource.FullPath)" />
      <PoResource>
        <PoProjectReferences>@(_Temporary)</PoProjectReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(PoRootDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <MakeDir Directories="%(PoResource.PoBundleDir)" />
    <WriteLinesToFile File="%(PoResource.PoReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PoProjectReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoReference" />-->
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="SaveMoProjectReferences"
          DependsOnTargets="InitPoResourceItems;GetMoProjectReferenceItems"
          Outputs="%(PoResource.Identity)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.MoProjectReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.MoProjectPath)" />
      <_Temporary Include="%(PoResource.MoProjectPath)" />
      <PoResource>
        <MoProjectReferences>@(_Temporary)</MoProjectReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(PoRootDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>

    <MakeDir Directories="%(PoResource.PoBundleDir)" />
    <WriteLinesToFile File="%(PoResource.MoReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="MoProjectReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="SavePoReferences" DependsOnTargets="SavePoProjectReferences" />

  <!--=========================================================================-->

  <Target Name="TouchPoReferences0"
        DependsOnTargets="CreateMoProject"
        Outputs="%(PoResource.Identity)">

    <ItemGroup>
      <_UpdatedPoResource Include="%(PoResource.FullPath)" />
    </ItemGroup>

    <ItemGroup>
      <_Temporary Include="@(PotModuleReference);@(PotProjectReference);%(PoResource.PoCompendiumReferences);%(PoResource.PoProjectReferences);%(PoResource.MoProjectReferences)" />
      <_Temporary Remove="$(PotModulePath);$(PotProjectPath);%(PoResource.PoBundlePath);%(PoResource.PoModulePath);%(PoResource.FullPath);%(PoResource.MoProjectPath)" />
      <_Temporary Include="$(PotModulePath);$(PotProjectPath);%(PoResource.PoBundlePath);%(PoResource.PoModulePath);%(PoResource.FullPath);%(PoResource.MoProjectPath)" />
    </ItemGroup>

    <Touch Files="@(_Temporary)" Time="%(_UpdatedPoResource.ModifiedTime)" />

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
      <_UpdatedPoResource Remove="@(_UpdatedPoResource)" />
    </ItemGroup>
  </Target>

  <Target Name="TouchPoReferences"
        DependsOnTargets="CreateMoProject"
        Outputs="%(PoResource.Identity)">

    <Message Importance="high" Text="[1] LastModifiedTime = '$(LastModifiedTime)'" />
    <ItemGroup>
      <_UpdatedMoProject Include="%(PoResource.MoProjectPath)" />
    </ItemGroup>
    <PropertyGroup>
      <_ShouldTouchPoReferences Condition="$([System.StringComparer]::OrdinalIgnoreCase.Compare(%(_UpdatedMoProject.ModifiedTime), $(LastModifiedTime))) &gt; 0">true</_ShouldTouchPoReferences>
    </PropertyGroup>
    
    <Message Importance="high" Text="Compare('%(_UpdatedMoProject.ModifiedTime)', '$(LastModifiedTime)') &gt; 0 =&gt; '$(_ShouldTouchPoReferences)'" />
    
    <Touch Condition="'$(_ShouldTouchPoReferences)' == 'true'"
           Files="%(PoResource.PoBundlePath);%(PoResource.PoModulePath)" Time="%(_UpdatedPoResource.ModifiedTime)" />

    <PropertyGroup >
      <LastModifiedTime>%(_UpdatedMoProject.ModifiedTime)</LastModifiedTime>
    </PropertyGroup>
    
    <Message Importance="high" Text="[2] LastModifiedTime = '$(LastModifiedTime)'" />

    <ItemGroup>
      <_UpdatedMoProject Remove="@(_UpdatedMoProject)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!-- Import MO Resources References -->
  <!--=========================================================================-->

  <Target Name="GetMoReferenceItemss">
    <ItemGroup>
      <MoResourceReference Include="%(ProjectReference.RootDir)%(Directory)$(OutputPath)$(PoLocaleSubdir)**\*.mo">
        <ProjectOwnerDirectory>%(ProjectReference.RootDir)%(Directory)</ProjectOwnerDirectory>
      </MoResourceReference>
      <MoResourceReference>
        <Link>$([MSBuild]::MakeRelative(%(MoResourceReference.ProjectOwnerDirectory)$(OutputPath), %(MoResourceReference.FullPath)))</Link>
      </MoResourceReference>
    </ItemGroup>
    <!--<LogItems Items="@(ProjectReference)" Title="ProjectReference" AllMetadata="true" />
    <LogItems Items="@(MoResourceReference)" Title="MoResourceReference" AllMetadata="true" />-->
  </Target>

  <Target Name="ImportMoResourceReferences"
          DependsOnTargets="GetMoReferenceItemss"
          Inputs="%(MoResourceReference.FullPath)"
          Outputs="$(TargetDir)$(PoLocaleSubdir)%(MoResourceReference.RecursiveDir)%(FileName)%(Extension)">
    <Copy SourceFiles="%(MoResourceReference.FullPath)" DestinationFiles="$(TargetDir)$(PoLocaleSubdir)%(RecursiveDir)%(FileName)%(Extension)"  />
  </Target>

  <!-- Set MO Resources files as content -->
  <Target Name="SetMoResourceReferencesAsContent"
          DependsOnTargets="GetMoReferenceItemss"
          Inputs="@(MoResourceReference)"
          Outputs="@(MoResourceReference->'$(TargetDir)%(RecursiveDir)%(FileName)%(Extension)')">
    <ItemGroup>
      <Content Include="@(MoResourceReference)">
        <Link>%(MoResourceReference.Link)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Visible>false</Visible>
      </Content>
    </ItemGroup>
  </Target>

  <Target Name="ImportMoResourceReferencesBuild"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="ImportMoResourceReferences;SetMoResourceReferencesAsContent" />

  <Target Name="ImportMoResourceReferencesClean"
          AfterTargets="AfterClean"
          DependsOnTargets="GetMoReferenceItemss"
          Outputs="@(MoResourceReference)">

    <Delete Files="@(MoResourceReference)" />
  </Target>

  <!--=========================================================================-->
  <!-- Build -->
  <!--=========================================================================-->

  <Target Name="GetTextBuild"
          BeforeTargets="Build"
          DependsOnTargets="
            ConsolidatePoBundle;
            CreatePotProject;
            CreateOrUpdatePotModule;
            InitPoBundle;
            InitPoModule;
            InitPoProject;
            UpdatePoBundleFromProject;
            
            UpdatePoModule;
            UpdatePoProject;
            CreateMoProject;

            SavePoReferences;
            TouchPoReferences" />

  <Target Name="GetTextClean"
          AfterTargets="Clean"
          DependsOnTargets="DeleteMoResource;DeletePotProject;DeletePotModule">
    
    <!-- TODO: FOR TEST ONLY -->
    <ItemGroup>
      <PoDirectory Include="$(PotBundleDir);$(PotBundleDir)**" />
    </ItemGroup>
    <Delete Files="$(PotBundleDir)**\*;@(PoResource)" />
    <RemoveDir Directories="@(PoDirectory)" />
  </Target>
  
  
</Project>