<?xml version="1.0" encoding="utf-8"?>
<!--
Layout:
=======
    
  bundle1\.po\                                      $(PoBundleRootDir)
      bundle1.fr-CH.po                              %(PoResource.PoBundlePath)  
      bundle1.de-CH.po
      .refs\                                        $(PoReferencesDir)
        PotModules.zou                              $(PotModuleReferencesPath)
          - module1\.po\module1.pot                 $(PotModulePath)
        PotDomains.zou                              $(PotDomainReferencesPath)
          - project1\obj\Debug\domain1.pot          %(PoResource.PotDomainPath)
          - project1\obj\Debug\domain2.pot
        PoModules.fr-CH.zou                         %(PoResource.PoModuleReferencesPath)
          - module1\.po\module1.fr-CH.po            %(PoResource.PoModulePath)
        PoDomains.fr-CH.zou                         %(PoResource.PoDomainReferencesPath)
          - project1\Resource\domain1.fr-CH.po      %(PoResource.FullPath)
          - project1\Resource\domain2.fr-CH.po
        MoDomains.fr-CH.zou                         %(PoResource.MoDomainReferencesPath)
          -project1\bin\Debug\locale\fr-CH\LC_MESSAGES\domain1.mo  %(PoResource.MoDomainPath)
          -project1\bin\Debug\locale\fr-CH\LC_MESSAGES\domain2.mo
            
    module1\.po\                                    $(PoModuleRootDir)
      module1.fr-CH.po                              %(PoResource.PoModulePath)
      module1.de-CH.po
      obj\Debug\                                    $(PotModuleDir)
        module1.pot                                 $(PotModulePath)
          
    project1\
      Source\
        *.cs
      Resource\
        domain1.fr-CH.po                            %(PoResource.FullPath)
        domain1.de-CH.po
        domain2.fr-CH.po
        domain2.de-CH.po
      obj\Debug                                     $(PotDomainDir)
        LastSolution.zou                            $(LastSolutionSavePath)
        domain1.pot.src.zou                         %(PoResource.PotSourcePath)
        domain1.pot                                 %(PoResource.PotDomainPath)
        domain2.pot
      bin\Debug\locale\fr-CH\LC_MESSAGES\           %(PoResource.MoDomainDir)
        domain1.mo                                  %(PoResource.MoDomainPath)
        domain2.mo

  where:
      bundle1                   $(BundleName)
      module1                   $(ModuleName)
      domain1                   %(PoResource.Domain)
      fr-CH                     %(PoResource.Culture)
      bundle1.fr-CH.po          %(PoResource.PoBundleFileName)
      module1.fr-CH.po          %(PoResource.PoModuleFileName)
      locale\fr-CH\LC_MESSAGES\ %(PoResource.MoDomainSubdir)

Pseudo-code:
============

  foreach (project in solution)
  {
    PoBundle    = msgcat  (culture, PoReferences)                         // integrate external translations
    PotDomain   = xgettext(*.cs)                                          // update domain message IDs
    PotModule   = msgcat  (anyCulture, PotDomain[, PotModule])            // update module message IDs

    foreach (poResource)
    {
        PoBundle    = msginit (PotDomain) - (if PoBundle not Initialized)
        PoModule    = msginit (PotModule) - (if PoModule not Initialized)
        PoDomain    = msginit (PotDomain) - (if PoDomain not initialized)

        PoBundle    = msgcat  (culture, PoBundle, PoDomain)               // concat domain changes into bundle
        PoModule    = msgmerge(culture, -C PoBundle, nul, PotModule)      // import bundle changes into module
        PoDomain    = msgmerge(culture, -C PoBundle, nul, PoDomain)       // import bundle changes into domain

        MoDomain    = msgfmt(PoDomain)                                    // compile domain
    }
  
    if (project is last)
    {
      // touch all references to same last 
      PotReferences.Time = PoReferences.Time = MoReferences.Time = LastModifiedMoDomain.Time 
    }
  }
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="PoResourceBuild">

  <Import Project="Cs.Boot.props" Condition="'$(CsBootImported)' != 'true'"/>
  <Import Project="BuildSequence.targets" Condition="'$(LastBuildSequencePath)' == ''"/>

  <!--=========================================================================-->
  <!-- Constants -->
  <!--=========================================================================-->
  
  <PropertyGroup>
    <PoNoFuzzy         Condition="'$(PoNoFuzzy)'         == ''">false</PoNoFuzzy>
    <PoNoClean         Condition="'$(PoNoClean)'         == ''">false</PoNoClean>
    <PoNoLocation      Condition="'$(PoNoLocation)'      == ''">false</PoNoLocation>
    <NoPotCreationDate Condition="'$(NoPoRevisionDate)'  == ''">true</NoPotCreationDate>
    <NoPoRevisionDate  Condition="'$(NoPoRevisionDate)'  == ''">true</NoPoRevisionDate>
    
    <PoLocaleSubdir>locale\</PoLocaleSubdir>
    
    <PoBundleName>$(BundleName)</PoBundleName>
    
    <PoBundleRootDir>$(BundleDir).po\</PoBundleRootDir>
    <PoReferencesDir>$(PoBundleRootDir).refs\</PoReferencesDir>

    <PotModuleReferencesPath>$(PoReferencesDir)PotModules.zou</PotModuleReferencesPath>
    <PotDomainReferencesPath>$(PoReferencesDir)PotDomains.zou</PotDomainReferencesPath>
    
    <PoModuleName    Condition="'$(ModuleName)' != ''">$(ModuleName)</PoModuleName>
    <PoModuleRootDir Condition="'$(ModuleName)' != ''">$(ModuleDir).po\</PoModuleRootDir>
    <PotModuleDir    Condition="'$(ModuleName)' != ''">$(PoModuleRootDir)obj\$(Configuration)\</PotModuleDir>
    <PotModulePath   Condition="'$(ModuleName)' != ''">$(PotModuleDir)$(PoModuleName).pot</PotModulePath>

    <PotDomainDir>$([System.IO.Path]::Combine($(ProjectDir),$(IntermediateOutputPath)))</PotDomainDir>
    <LastSolutionSavePath>$(PotDomainDir)LastSolution.zou</LastSolutionSavePath>

    <XGetText>$(ZouBinDir)xgettext</XGetText>
    <MsgInit>$(ZouBinDir)msginit</MsgInit>
    <MsgMerge>$(ZouBinDir)msgmerge</MsgMerge>
    <MsgCat>$(ZouBinDir)msgcat</MsgCat>
    <MsgFmt>$(ZouBinDir)msgfmt</MsgFmt>
    <MsgAttrib>$(ZouBinDir)msgattrib</MsgAttrib>

    <PoCopyright>EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland</PoCopyright>
    <PoPackageName Condition="'$(ModuleName)' == ''">'$(BundleName)'</PoPackageName>
    <PoPackageName Condition="'$(ModuleName)' != ''">'$(ModuleName)'</PoPackageName>

    <!-- Use default keyword to extract messages (same as NGetText.Catalog methods) -->
    <PoKeywordSpec></PoKeywordSpec>
  </PropertyGroup>

  <!--=========================================================================-->
  <!-- Initialization -->
  <!--=========================================================================-->

  <ItemGroup>
    <!-- Make sure that PoResource is available in VisualStudio's Build Action combo -->
    <AvailableItemName Include="PoResource" />
  </ItemGroup>

  <ItemDefinitionGroup>
    <PoResource>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </PoResource>
  </ItemDefinitionGroup>

  <Target Name="InitPoResources">
    <!-- Extract Culture metadata from PO project resource name (exemple: Project1.fr-CH.po) -->
    <AssignCulture Files="@(PoResource)">
      <Output TaskParameter="AssignedFilesWithCulture" ItemName="PoResourceWithCulture" />
      <Output TaskParameter="AssignedFilesWithNoCulture" ItemName="PoResourceWithNoCulture" />
    </AssignCulture>
    <ItemGroup>
      <PoResourceWithNoCulture>
        <!-- Use en-US as default culture -->
        <Culture>en-US</Culture>
      </PoResourceWithNoCulture>
    </ItemGroup>
    <AddFileInfo Files="@(PoResourceWithCulture);@(PoResourceWithNoCulture)">
      <Output TaskParameter="OutputFiles" ItemName="PoResourceWithInfo" />
    </AddFileInfo>
    <!-- Add metadata helpers -->
    <ItemGroup>
      <PoResource Remove="@(PoResourceWithInfo)" />
      <PoResource Include="@(PoResourceWithInfo)" />
      <PoResource>
        <!-- PO resource is considered as initialized if not empty. -->
        <Initialized Condition="'%(Length)' &gt; '10'">true</Initialized>
        <Domain>$([System.IO.Path]::GetFileNameWithoutExtension('%(Filename)'))</Domain>
      </PoResource>
      <PoResource>
        <PoModuleReferencesPath>$(PoReferencesDir)PoModules.%(Culture).zou</PoModuleReferencesPath>
        <PoDomainReferencesPath>$(PoReferencesDir)PoDomains.%(Culture).zou</PoDomainReferencesPath>
        <MoDomainReferencesPath>$(PoReferencesDir)MoDomains.%(Culture).zou</MoDomainReferencesPath>

        <PotSourcePath>$(PotDomainDir)%(Domain).pot.src.zou</PotSourcePath>
        <PotDomainPath>$(PotDomainDir)%(Domain).pot</PotDomainPath>
        <PoBundleFileName>$(PoBundleName).%(Culture).po</PoBundleFileName>
        <PoModuleFileName Condition="'$(ModuleName)' != ''">$(PoModuleName).%(Culture).po</PoModuleFileName>
        <MoDomainSubdir>$(PoLocaleSubdir)%(Culture)\LC_MESSAGES\</MoDomainSubdir>
        <MoDomainFileName>%(Domain).mo</MoDomainFileName>
      </PoResource>
      <PoResource>
        <PoBundlePath>$(PoBundleRootDir)%(PoBundleFileName)</PoBundlePath>
        <PoModulePath Condition="'$(ModuleName)' != ''">$(PoModuleRootDir)%(PoModuleFileName)</PoModulePath>
        <MoDomainDir>$(TargetDir)%(MoDomainSubdir)</MoDomainDir>
      </PoResource>
      <PoResource>
        <MoDomainPath>%(MoDomainDir)%(MoDomainFileName)</MoDomainPath>
        <PoModuleInitialized Condition="'$(ModuleName)' != '' And Exists('%(PoModulePath)')">true</PoModuleInitialized>
      </PoResource>
    </ItemGroup>

    <!--<LogItems Items="@(PoResource)" Title="PoResource" AllMetadata="true" />-->
  </Target>

  <Target Name="PoCreateFolders">
    <MakeDir Directories="$(PoReferencesDir)" />
    <MakeDir Directories="$(PotModuleDir)" Condition="'$(ModuleName)' != ''"/>
    <MakeDir Directories="$(PotDomainDir)" />
  </Target>

  <!--=========================================================================-->
  <!-- PO references I/O -->
  <!--=========================================================================-->

  <Target Name="ReadPotModuleReferences"
        DependsOnTargets="InitPoResources"
        Outputs="$(PotModuleReferencesPath)">

    <ReadLinesFromFile File="$(PotModuleReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <_PoReferences Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferences Remove="$(PotModulePath)" />
      <_PoReferences Include="$(PotModulePath)" />
      <PoResource>
        <PotModuleReferences>@(_PoReferences)</PotModuleReferences>
      </PoResource>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<Message Importance="high" Text="PotModuleReferences.FileNames=@(_PoReferences->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_PoReferences)" Title="PotModuleReference" />-->

    <ItemGroup>
      <_PoReferences Remove="@(_PoReferences)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePotModuleReferences"
        DependsOnTargets="ReadPotModuleReferences"
        Outputs="$(PotModuleReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PotModuleReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="$(PotModulePath)" />
      <_Temporary Include="$(PotModulePath)" />
      <PoResource>
        <PotModuleReferences>@(_Temporary)</PotModuleReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="$(PotModuleReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PotModuleReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PotModuleReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="ReadPotDomainReferences"
          DependsOnTargets="InitPoResources"
          Outputs="$(PotDomainReferencesPath)">

    <ReadLinesFromFile File="$(PotDomainReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <_PoReferences Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferences Remove="%(PoResource.PotDomainPath)" />
      <_PoReferences Include="%(PoResource.PotDomainPath)" />
      <PoResource>
        <PotDomainReferences>@(_PoReferences)</PotDomainReferences>
      </PoResource>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<Message Importance="high" Text="PotDomainReferences.FileNames=@(_PoReferences->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_PoReferences)" Title="PotDomainReference" />-->

    <ItemGroup>
      <_PoReferences Remove="@(_PoReferences)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePotDomainReferences"
        DependsOnTargets="ReadPotDomainReferences"
        Outputs="$(PotDomainReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PotDomainReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.PotDomainPath)" />
      <_Temporary Include="%(PoResource.PotDomainPath)" />
      <PoResource>
        <PotDomainReferences>@(_Temporary)</PotDomainReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="$(PotDomainReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PotDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PotDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="ReadPoModuleReferences"
          DependsOnTargets="InitPoResources"
          Returns="%(PoResource.PoModuleReferencesPath)">

    <ReadLinesFromFile File="%(PoResource.PoModuleReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    
    <ItemGroup>
      <_PoReferences Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferences Remove="%(PoResource.PoModulePath)" />
      <_PoReferences Include="%(PoResource.PoModulePath)" />
      <PoResource>
        <PoModuleReferences>@(_PoReferences)</PoModuleReferences>
      </PoResource>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<Message Importance="high" Text="PoModuleReferences.FileNames=@(_PoReferences->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_PoReferences)" Title="PoModuleReference" />-->

    <ItemGroup>
      <_PoReferences Remove="@(_PoReferences)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePoModuleReferences"
        DependsOnTargets="ReadPoModuleReferences"
        Outputs="%(PoResource.PoModuleReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PoModuleReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.PoModulePath)" />
      <_Temporary Include="%(PoResource.PoModulePath)" />
      <PoResource>
        <PoModuleReferences>@(_Temporary)</PoModuleReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(Identity)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="%(PoResource.PoModuleReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PoModuleReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoModuleReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="ReadPoDomainReferences"
          DependsOnTargets="InitPoResources"
          Outputs="%(PoResource.PoDomainReferencesPath)">

    <ReadLinesFromFile File="%(PoResource.PoDomainReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    
    <ItemGroup>
      <_PoReferences Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferences Remove="%(PoResource.FullPath)" />
      <_PoReferences Include="%(PoResource.FullPath)" />
      <PoResource>
        <PoDomainReferences>@(_PoReferences)</PoDomainReferences>
      </PoResource>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<Message Importance="high" Text="PoDomainReferences.FileNames=@(_PoReferences->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_PoReferences)" Title="PoDomainReference" />-->

    <ItemGroup>
      <_PoReferences Remove="@(_PoReferences)" />
    </ItemGroup>
  </Target>

  <Target Name="WritePoDomainReferences"
        DependsOnTargets="ReadPoDomainReferences"
        Outputs="%(PoResource.PoDomainReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.PoDomainReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.FullPath)" />
      <_Temporary Include="%(PoResource.FullPath)" />
      <PoResource>
        <PoDomainReferences>@(_Temporary)</PoDomainReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="%(PoResource.PoDomainReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="PoDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="PoDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="ReadMoDomainReferences"
          DependsOnTargets="InitPoResources"
          Outputs="%(PoResource.MoDomainReferencesPath)">

    <ReadLinesFromFile File="%(PoResource.MoDomainReferencesPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <_PoReferences Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferences Remove="%(PoResource.MoDomainPath)" />
      <_PoReferences Include="%(PoResource.MoDomainPath)" />
      <PoResource>
        <MoDomainReferences>@(_PoReferences)</MoDomainReferences>
      </PoResource>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!--<Message Importance="high" Text="MoDomainReferences.FileNames=@(_PoReferences->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_PoReferences)" Title="MoDomainReference" />-->

    <ItemGroup>
      <_PoReferences Remove="@(_PoReferences)" />
    </ItemGroup>
  </Target>

  <Target Name="WriteMoDomainReferences"
        DependsOnTargets="ReadMoDomainReferences"
        Outputs="%(PoResource.MoDomainReferencesPath)">

    <ItemGroup>
      <_Temporary Include="%(PoResource.MoDomainReferences)" />
    </ItemGroup>
    <ItemGroup>
      <_Temporary Remove="%(PoResource.MoDomainPath)" />
      <_Temporary Include="%(PoResource.MoDomainPath)" />
      <PoResource>
        <MoDomainReferences>@(_Temporary)</MoDomainReferences>
      </PoResource>
      <_Temporary>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(FullPath)))</RelativePath>
      </_Temporary>
    </ItemGroup>
    <WriteLinesToFile File="%(PoResource.MoDomainReferencesPath)" Lines="@(_Temporary->'%(RelativePath)')" Overwrite="true" />

    <!--<Message Importance="high" Text="MoDomainReferences=@(_Temporary->'%(FileName)%(Extension)')" />-->
    <!--<LogItems Items="@(_Temporary)" Title="MoDomainReference" />-->

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="WritePoReferences"
        DependsOnTargets="WritePotModuleReferences;
                            WritePotDomainReferences;
                            WritePoModuleReferences;
                            WritePoDomainReferences;
                            WriteMoDomainReferences" />

  <!--=========================================================================-->
  <!-- Consolidation -->
  <!--=========================================================================-->

  <Target Name="ConsolidatePoBundle"
          DependsOnTargets="ReadPoModuleReferences;ReadPoDomainReferences"
          Returns="%(PoResource.PoBundlePath)">

    <!-- PoBundle = msgcat(culture, PoReferences) -->
    <ItemGroup>
      <_Temporary Include="%(PoResource.PoBundlePath);%(PoResource.PoModuleReferences);%(PoResource.PoDomainReferences)" />
      <PoReference Include="%(_Temporary.Identity)" Condition="Exists(%(_Temporary.Identity))"/>
      <_Temporary Remove="@(_Temporary)" />
      <PoReferenceModifiedTime Include="%(PoReference.ModifiedTime)"  />
    </ItemGroup>
    
    <PropertyGroup>
      <ConsolidatePoBundle Condition="'@(PoReferenceModifiedTime->Count())' != '1'">true</ConsolidatePoBundle>
    </PropertyGroup>

    <!--<Message Importance="high" Text="ConsolidatePoBundle = $(ConsolidatePoBundle) [$(ProjectName)]" />
    <LogItems Items="@(PoReference->'%(Identity)')" Title="PoReference" />
    <LogItems Items="@(PoReferenceModifiedTime)" Title="PoReferenceModifiedTime" />-->

    <PropertyGroup Condition="'$(ConsolidatePoBundle)' == 'true'">
      <_Options>--no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture) -o"%(PoResource.PoBundlePath)"</_Options>
      <_Options Condition="'$(PoNoLocation)' == 'true'">$(_Options) --no-location</_Options>
      <_PoReferences>@(PoReference->'"%(FullPath)"')</_PoReferences>
      <_PoReferences>$(_PoReferences.Replace(';', ' '))</_PoReferences>
    </PropertyGroup>
    
    <Exec Command='"$(MsgCat)" $(_Options) $(_PoReferences)' Condition="'$(ConsolidatePoBundle)' == 'true'" />

    <ItemGroup>
      <PoFile Include="%(PoResource.PoBundlePath)">
        <Bundle>$(BundleName)</Bundle>
        <NoPotCreationDate>$(NoPotCreationDate)</NoPotCreationDate>
        <NoPoRevisionDate>$(NoPoRevisionDate)</NoPoRevisionDate>
      </PoFile>
    </ItemGroup>

    <CleanPoFile SourceFiles="@(PoFile)"
                 Condition="'$(ConsolidatePoBundle)' == 'true' And '$(PoNoClean)' != 'true'"/>
    
    <ItemGroup>
      <PoFile Remove="@(PoFile)" />
      <PoReference Remove="@(PoReference)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!-- POT management -->
  <!--=========================================================================-->

  <Target Name="CreatePotSource"
          Condition="'@(Compile)' != ''"
          Returns="@(PotSource)">
    <ItemGroup>
      <PotSource Include="@(Compile)" Exclude="$(TMP)\*;$(PotDomainDir)\*;Properties\Resources.Designer.cs;Properties\AssemblyInfo.cs" />
      <PotSource>
        <RelativePath>$([MSBuild]::MakeRelative($(BundleDir), %(PotSource.FullPath)))</RelativePath>
      </PotSource>
    </ItemGroup>
    <!--<LogItems Items="@(PotSource)" Title="PotSource" AllMetadata="true"/>-->
  </Target>

  <Target Name="WritePotSource"
          DependsOnTargets="InitPoResources;CreatePotSource"
          Inputs="@(PotSource)"
          Outputs="%(PoResource.PotSourcePath)">

    <WriteLinesToFile File="%(PoResource.PotSourcePath)" Lines="@(PotSource->'%(RelativePath)')" Overwrite="true" />
  </Target>

  <!--.........................................................................-->

  <Target Name="CreatePotDomain"
          DependsOnTargets="WritePotSource"
          Inputs="%(PoResource.PotSourcePath)"
          Outputs="%(PoResource.PotDomainPath)">

    <!-- PotDomain = xgettext(PotSource) -->
    <PropertyGroup>
      <_Options>--from-code=UTF-8 --no-wrap -D"$(BundleDir)." -f"%(PoResource.PotSourcePath)" -o"%(PoResource.PotDomainPath)"</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
      <_Options Condition="'$(PoCopyright)'   != ''">$(_Options) --copyright-holder="$(PoCopyright)"</_Options>
      <_Options Condition="'$(PoPackageName)' != ''">$(_Options) --package-name="$(PoPackageName)"</_Options>
      <_Options Condition="'$(PoKeywordSpec)' != ''">$(_Options) --keyword="$(PoKeywordSpec)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(XGetText)" $(_Options)' />

    <Error Code="$(ErrorPoNoMessageIdCode)" Text="$(ErrorPoNoMessageId)" Condition="!Exists(%(PoResource.PotDomainPath))" ContinueOnError="false" />

    <!-- Replace CHARSET with UTF-8 and remove BOM -->
    <FileUpdate Files="%(PoResource.PotDomainPath)" Multiline="true" IgnoreCase="true" Encoding="utf-8-without-bom"
                Regex='^("Content-Type.+?charset=)(CHARSET)(.*)$' ReplacementText="$1UTF-8$3"/>
  </Target>

  <Target Name="DeletePotDomain">
    <Delete Files="@(PoResource->'%(PotSourcePath)');@(PoResource->'%(PotDomainPath)')" />
  </Target>

  <!--.........................................................................-->

  <Target Name="CreateOrUpdatePotModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoResources;CreatePotDomain"
          Inputs="@(PoResource->'%(PotDomainPath)')"
          Outputs="$(PotModulePath)">

    <!--PotModule = msgcat (anyCulture, PotReferences) -->
    <ItemGroup>
      <PotReference Include="$(PotModulePath)" Condition="Exists($(PotModulePath))"/>
      <PotReference Include="@(PoResource->'%(PotDomainPath)')" />
    </ItemGroup>

    <PropertyGroup>
      <_Options>--no-wrap -D"$(BundleDir)." --lang="" -o"$(PotModulePath)"</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
      <PotReferences>@(PotReference->'"%(FullPath)"')</PotReferences>
      <PotReferences>$(PotReferences.Replace(';', ' '))</PotReferences>
    </PropertyGroup>

    <Exec Command='"$(MsgCat)" $(_Options) $(PotReferences)' />

    <ItemGroup>
      <PoFile Include="$(PotModulePath)">
        <Bundle>$(BundleName)</Bundle>
        <Module>$(ModuleName)</Module>
        <NoPotCreationDate>$(NoPotCreationDate)</NoPotCreationDate>
        <NoPoRevisionDate>$(NoPoRevisionDate)</NoPoRevisionDate>
      </PoFile>
    </ItemGroup>

    <CleanPoFile SourceFiles="@(PoFile)"
                 Condition="'$(PoNoClean)' != 'true'" />

    <ItemGroup>
      <PoFile Remove="@(PoFile)" />
      <PotReference Remove="@(PotReference)" />
    </ItemGroup>
  </Target>
  
  <Target Name="DeletePotModule">
    <Delete Files="$(PotModulePath)" />
  </Target>

  <!--=========================================================================-->
  <!-- PO initialization -->
  <!--=========================================================================-->

  <Target Name="InitPoBundle"
          DependsOnTargets="InitPoResources;CreateOrUpdatePotModule"
          Inputs="$(PotModulePath)"
          Outputs="%(PoResource.PoBundlePath)">

    <PropertyGroup>
      <PoBundleInitialized Condition="Exists('%(PoResource.PoBundlePath)')">true</PoBundleInitialized>
    </PropertyGroup>

    <!-- PoBundle = msginit(PotDomain) if PoBundle does not exist -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoBundlePath)" -i"$(PotModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'$(PoBundleInitialized)' != 'true'" />

    <!-- PoBundle -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>-o"%(PoResource.PoBundlePath)"</_Options>
      <_Options Condition="'$(PoNoFuzzy)'  == 'true'">$(_Options) --clear-fuzzy</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.PoBundlePath)"' Condition="'$(PoNoFuzzy)' == 'true' And '$(PoBundleInitialized)' != 'true'" />

    <!-- Force a refresh if PoResource or PoModule files exist -->
    <PropertyGroup>
      <PoBundleShouldBeUpdated Condition="'$(PoBundleInitialized)' != 'true' And ('%(PoResource.Initialized)' == 'true' Or ('$(ModuleName)' != '' And '%(PoResource.PoModuleInitialized)' == 'true'))">true</PoBundleShouldBeUpdated>
    </PropertyGroup>
    <Touch Files="%(PoResource.PoBundlePath)" Time="01.01.2016" Condition="'$(PoBundleShouldBeUpdated)' == 'true'" />
  </Target>

  <!--.........................................................................-->

  <Target Name="InitPoModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoResources;CreateOrUpdatePotModule"
          Inputs="$(PotModulePath)"
          Outputs="%(PoResource.PoModulePath)">

    <!-- PoModule = msginit(PotModule) if PoModule does not exist -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoModulePath)" -i"$(PotModulePath)"</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'%(PoResource.PoModuleInitialized)' != 'true'" />

    <!-- PoModule -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>-o"%(PoResource.PoModulePath)"</_Options>
      <_Options Condition="'$(PoNoFuzzy)'  == 'true'">$(_Options) --clear-fuzzy</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.PoModulePath)"' Condition="'$(PoNoFuzzy)' == 'true' And '%(PoResource.PoModuleInitialized)' != 'true'" />
  </Target>

  <!--.........................................................................-->

  <Target Name="InitPoDomain"
          DependsOnTargets="InitPoResources;CreatePotDomain"
          Inputs="%(PoResource.PotDomainPath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoResource = msginit(PotDomain) - fuzzy marker (if not initialized) -->
    <PropertyGroup>
      <_Options>--no-wrap --no-translator --locale=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)" -i"%(PoResource.PotDomainPath)"</_Options>
    </PropertyGroup>
    
    <MakeDir Directories="%(PoResource.RootDir)%(Directory)" />
    <Exec Command='"$(MsgInit)" $(_Options)' Condition="'%(PoResource.Initialized)' != 'true'" />

    <!-- PoResource -= header's fuzzy marker -->
    <PropertyGroup>
      <_Options>-o"%(PoResource.FullPath)"</_Options>
      <_Options Condition="'$(PoNoFuzzy)'  == 'true'">$(_Options) --clear-fuzzy</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
    </PropertyGroup>
    <Exec Command='"$(MsgAttrib)" $(_Options) "%(PoResource.FullPath)"' Condition="'$(PoNoFuzzy)' == 'true' And '%(PoResource.Initialized)' != 'true'" />
  </Target>

  <!--=========================================================================-->
  <!-- PO update -->
  <!--=========================================================================-->

  <Target Name="UpdatePoDomainFromPot"
          DependsOnTargets="InitPoDomain"
          Inputs="%(PoResource.PotDomainPath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoDomain = msmerge(culture, -C PoBundle, PotDomain) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    
    <Exec Command='"$(MsgMerge)" $(_Options) nul "%(PoResource.PotDomainPath)"' />

    <ItemGroup>
      <PoFile Include="%(PoResource.FullPath)">
        <Bundle>$(BundleName)</Bundle>
        <Module Condition="'$(ModuleName)' != ''">$(ModuleName)</Module>
        <Domain>%(PoResource.Domain)</Domain>
        <NoPotCreationDate>$(NoPotCreationDate)</NoPotCreationDate>
        <NoPoRevisionDate>$(NoPoRevisionDate)</NoPoRevisionDate>
      </PoFile>
    </ItemGroup>

    <CleanPoFile SourceFiles="@(PoFile)"
                 Condition="'$(PoNoClean)' != 'true'"/>
    
    <ItemGroup>
      <PoFile Remove="@(PoFile)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="UpdatePoBundleFromDomain"
          DependsOnTargets="InitPoBundle;UpdatePoDomainFromPot"
          Inputs="%(PoResource.FullPath)"
          Outputs="%(PoResource.PoBundlePath)">

    <!-- PoBundle = msgcat(culture, PoBundle, PoResource) -->
    <PropertyGroup>
      <_Options>--no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture) -o"%(PoResource.PoBundlePath)"</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
    </PropertyGroup>
    
    <Exec Command='"$(MsgCat)" $(_Options) "%(PoResource.PoBundlePath)" "%(PoResource.FullPath)"' />

    <ItemGroup>
      <PoFile Include="%(PoResource.PoBundlePath)">
        <Bundle>$(BundleName)</Bundle>
        <NoPotCreationDate>$(NoPotCreationDate)</NoPotCreationDate>
        <NoPoRevisionDate>$(NoPoRevisionDate)</NoPoRevisionDate>
      </PoFile>
    </ItemGroup>

    <CleanPoFile SourceFiles="@(PoFile)"
                 Condition="'$(PoNoClean)' != 'true'" />
    
    <ItemGroup>
      <PoFile Remove="@(PoFile)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="UpdatePoModule"
          Condition="'$(ModuleName)' != ''"
          DependsOnTargets="InitPoModule;UpdatePoBundleFromDomain"
          Inputs="$(PotModulePath);%(PoResource.PoBundlePath)"
          Outputs="%(PoResource.PoModulePath)">

    <!-- PoModule = msmerge(culture, -C PoBundle, PotModule) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.PoModulePath)"</_Options>
    </PropertyGroup>
    
    <Exec Command='"$(MsgMerge)" $(_Options) nul "$(PotModulePath)"' />

    <ItemGroup>
      <PoFile Include="%(PoResource.PoModulePath)">
        <Bundle>$(BundleName)</Bundle>
        <Module>$(ModuleName)</Module>
        <NoPotCreationDate>$(NoPotCreationDate)</NoPotCreationDate>
        <NoPoRevisionDate>$(NoPoRevisionDate)</NoPoRevisionDate>
      </PoFile>
    </ItemGroup>

    <CleanPoFile SourceFiles="@(PoFile)"
                 Condition="'$(PoNoClean)' != 'true'" />
    
      <ItemGroup>
        <PoFile Remove="@(PoFile)" />
      </ItemGroup>
    </Target>

  <!--.........................................................................-->

  <Target Name="UpdatePoDomain"
          DependsOnTargets="InitPoDomain;UpdatePoBundleFromDomain"
          Inputs="%(PoResource.PotDomainPath);%(PoResource.PoBundlePath)"
          Outputs="%(PoResource.FullPath)">

    <!-- PoDomain = msmerge(culture, -C PoBundle, PotDomain) -->
    <PropertyGroup>
      <_Options>-q --no-wrap -D"$(BundleDir)." --lang=%(PoResource.Culture)</_Options>
      <_Options Condition="'$(PoNoLocation)'  == 'true'">$(_Options) --no-location</_Options>
      <_Options>$(_Options) -C"%(PoResource.PoBundlePath)"</_Options>
      <_Options>$(_Options) -o"%(PoResource.FullPath)"</_Options>
    </PropertyGroup>
    
    <Exec Command='"$(MsgMerge)" $(_Options) nul "%(PoResource.PotDomainPath)"' />

    <ItemGroup>
      <PoFile Include="%(PoResource.FullPath)">
        <Bundle>$(BundleName)</Bundle>
        <Module Condition="'$(ModuleName)' != ''">$(ModuleName)</Module>
        <Domain>%(PoResource.Domain)</Domain>
        <NoPotCreationDate>$(NoPotCreationDate)</NoPotCreationDate>
        <NoPoRevisionDate>$(NoPoRevisionDate)</NoPoRevisionDate>
      </PoFile>
    </ItemGroup>

    <CleanPoFile SourceFiles="@(PoFile)"
                 Condition="'$(PoNoClean)' != 'true'" />
    
      <ItemGroup>
        <PoFile Remove="@(PoFile)" />
      </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!-- MO management -->
  <!--=========================================================================-->

  <Target Name="CreateMoDomain"
          DependsOnTargets="UpdatePoDomain"
          Inputs="%(PoResource.FullPath)"
          Outputs="%(PoResource.MoDomainPath)">

    <MakeDir Directories="%(PoResource.MoDomainDir)" />
    <Exec Command='"$(MsgFmt)" -o"%(PoResource.MoDomainPath)" "%(PoResource.FullPath)"' />

    <ItemGroup>
      <_Temporary Include="%(PoResource.MoDomainPath)" />
    </ItemGroup>
    <PropertyGroup>
      <MoDomainLastModifiedTime>%(_Temporary.ModifiedTime)</MoDomainLastModifiedTime>
    </PropertyGroup>
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <Target Name="DeleteMoDomain" DependsOnTargets="InitPoResources">
    <!--<Message Importance="high" Text="[-] %(PoResource.MoDomainPath)" />-->
    <Delete Files="@(PoResource->'%(MoDomainPath)')" />
  </Target>

  <!--.........................................................................-->
  
  <Target Name="CreateMoDomainContent"
          DependsOnTargets="CreateMoDomain">
    <ItemGroup>
      <PoContent Include="%(PoResource.MoDomainPath)">
        <Link>%(PoResource.MoDomainSubdir)%(MoDomainFileName)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <Visible>false</Visible>
      </PoContent>
      <Content Include="@(PoContent)" />
    </ItemGroup>
  </Target>
  
  <!--=========================================================================-->
  <!-- Touch -->
  <!--=========================================================================-->

  <Target Name="GetPoBundleReferences">
    <ItemGroup>
      <PoBundleReference Include="$(PoBundleRootDir)*.po" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="GetPoReferences"
          DependsOnTargets="WritePoReferences">

    <ItemGroup>
      <_PoReferenceFile Include="$(PoReferencesDir)*" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_PoReferenceFile.FullPath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <PoReference      Include="@(_Temporary->'$(BundleDir)%(Identity)')" />
      <_PoReferenceFile Remove="@(_PoReferenceFile)" />
      <_Temporary       Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="TouchPoReferences"
          Condition="'$(BuildSequenceIsLastProject)' == 'true'"
          DependsOnTargets="GetPoBundleReferences;GetPoReferences"
          Inputs="@(PoReference)"
          Outputs="@(PoBundleReference)">

    <Touch Files="%(PoBundleReference.FullPath)" Time="$(MoDomainLastModifiedTime)" />
    <Touch Files="%(PoReference.Identity)"       Time="$(MoDomainLastModifiedTime)" Condition="Exists(%(PoReference.Identity))" />

    <ItemGroup>
      <PoBundleReference Remove="@(PoBundleReference)" />
      <PoReference Remove="@(PoReference)" />
    </ItemGroup>
  </Target>

  <!--=========================================================================-->
  <!-- Lock / Unlock -->
  <!--=========================================================================-->

  <Target Name="PoLock">
    <Lock Name="$(PoBundleRootDir)" />
  </Target>
  
  <Target Name="PoUnlock">
    <Unlock Name="$(PoBundleRootDir)" />
  </Target>
  
  <!--=========================================================================-->
  <!-- Last solution path -->
  <!--=========================================================================-->

  <Target Name ="ReadLastSolution">

    <ReadLinesFromFile File="$(LastSolutionSavePath)" >
      <Output TaskParameter="Lines" ItemName="_Temporary"/>
    </ReadLinesFromFile>
    <PropertyGroup >
      <LastSolutionPath>@(_Temporary)</LastSolutionPath>
    </PropertyGroup>

    <!--<Message Importance="high" Text="[R] SolutionPath     = $(SolutionPath)" />
    <Message Importance="high" Text="[R] LastSolutionPath = $(LastSolutionPath)" />-->
    
    <ItemGroup >
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>
  
  <Target Name ="WriteLastSolution">

    <!--<Message Importance="high" Text="[W] SolutionPath     = $(SolutionPath)" />-->
    
    <WriteLinesToFile File="$(LastSolutionSavePath)"
                      Lines="$(SolutionPath)"
                      Overwrite="true" />
  </Target>
  
  <Target Name="CleanLastSolution">
    <Delete Files="$(LastSolutionSavePath)" />
  </Target>

  <!--=========================================================================-->
  <!-- Clean -->
  <!--=========================================================================-->

  <Target Name="PoCleanIfSolutionChange"
          DependsOnTargets="InitPoResources;ReadLastSolution;WriteLastSolution"
          Condition="'$(LastSolutionPath)' != '$(SolutionPath)'">

    <Delete Files="@(PoResource->'%(PotSourcePath)')" />
  </Target>
  
  <Target Name="PoCleanIfNotInBuildSequence"
          DependsOnTargets="InitPoResources;ReadBuildSequence"
          Condition="'$(LastBuildSequenceContainsProject)' != 'true'">

    <Delete Files="@(PoResource->'%(PotSourcePath)')" />
  </Target>
  
  <Target Name="PoIncrementalClean"
          DependsOnTargets="InitPoResources;PoCleanIfNotInBuildSequence;PoCleanIfSolutionChange"
          Inputs="$(ProjectPath)"
          Outputs="@(PoResource->'%(PotSourcePath)')">

    <Delete Files="@(PoResource->'%(PotSourcePath)')" />
  </Target>

  <!--.........................................................................-->

  <Target Name ="PoReset"
          Condition="$(PoReset) != ''">

    <ItemGroup>
      <_Temporary Include="$(PoBundleRootDir)**\*" />
      <_Temporary Include="$(PoModuleRootDir)**\*" />
      <_Temporary Include="@(PoResource)" />
    </ItemGroup>

    <Delete Files="@(_Temporary)" />

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
      <_Temporary Include="$(PoBundleRootDir);$(PoBundleRootDir)**" />
      <_Temporary Include="$(PoModuleRootDir);$(PoModuleRootDir)**" />
    </ItemGroup>
    
    <RemoveDir Directories="@(_Temporary)" />
    
    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>
  </Target>

  <!--.........................................................................-->

  <Target Name="PoCleanCore"
          DependsOnTargets="
            CleanLastSolution;
            DeleteMoDomain;
            DeletePotDomain;
            DeletePotModule;
            PoReset">

    <ItemGroup>
      <_Temporary Include="$(PoReferencesDir)*.zou" />
      <_Temporary Include="$(PoBundleRootDir)*.mo" />
      <_Temporary Include="$(PoModuleRootDir)*.mo" />
      <_Temporary Include="%(PoResource.RootDir)%(Directory)*.mo" />
    </ItemGroup>
    
    <Delete Files="@(_Temporary)" />
    <RemoveDir Directories="$(PoReferencesDir)" ContinueOnError="true" />
  </Target>

  <Target Name="PoClean" BeforeTargets="Clean">
    <CallTarget Targets="PoLock;PoCleanCore;PoUnlock" RunEachTargetSeparately="true" />
  </Target>
    
  
  <!--=========================================================================-->
  <!-- Build -->
  <!--=========================================================================-->

  <Target Name="PoBuildCore"
          DependsOnTargets="
            ReadBuildSequence;
            ReadLastSolution;
            PoIncrementalClean;
            PoCreateFolders;
            
            ConsolidatePoBundle;
            CreatePotDomain;
            CreateOrUpdatePotModule;
            InitPoBundle;
            InitPoModule;
            InitPoDomain;
            UpdatePoBundleFromDomain;
            
            UpdatePoModule;
            UpdatePoDomain;
            CreateMoDomain;
            CreateMoDomainContent;
            
            TouchPoReferences;
            WriteBuildSequence" />

  <Target Name="PoBuild"
          Condition="'@(PoResource)' != ''"
          BeforeTargets="ResolveReferences">

    <CallTarget Targets="PoLock;PoBuildCore;PoUnlock" RunEachTargetSeparately="true" />
  </Target>
  
</Project>