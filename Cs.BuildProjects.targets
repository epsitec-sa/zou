<?xml version="1.0" encoding="utf-8"?>
<!--
The Cs.BuildProjects.targets can be used to build of one or many projects or solutions.
Input parameters:
- @(BuildProjects)
  - %(BuildInParallel)
  - %(BuildPlatform)
  - %(BuildConfiguration)
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="'$(Zou)' == ''" Project="zou.props" />

  <PropertyGroup Condition="'$(BuildProjects)' == ''">
    <BuildProjects>@(BuildProjects)</BuildProjects>
  </PropertyGroup>

  <PropertyGroup>
    <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
  </PropertyGroup>
  
  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>
    <BuildProjects>
      <BuildInParallel    Condition="'%(BuildInParallel)' == ''">true</BuildInParallel>
      <BuildPlatform      Condition="'%(BuildPlatform)' == ''">$(Platform)</BuildPlatform>
      <BuildConfiguration Condition="'%(BuildConfiguration)' == ''">$(Configuration)</BuildConfiguration>
    </BuildProjects>
  </ItemDefinitionGroup>

  <!-- ================ BuildProjectsClean ================ -->
  
  <Target Name="BuildProjectsClean" BeforeTargets="Clean" Condition="'$(BuildProjects)' != ''">
    <!-- The clean target does not care about project dependencies. This means that we can safely use the MSBuild task for solutions too. -->
    <MSBuild Projects="@(BuildProjects)" Targets="Clean" Properties="Platform=%(BuildPlatform);Configuration=%(BuildConfiguration)" />
  </Target>

  <!-- ================ BuildProjects ================ -->

  <!-- Runs the _PrepareForClean target (which deletes the calling-project.lastbuildstate) so that Visual Studio always runs this target. -->
  <Target Name="BuildProjects"
          DependsOnTargets="_PrepareForClean"
          BeforeTargets="Build"
          Condition="'$(BuildProjects)' != ''">
    <Message Text="[%(BuildConfiguration)|%(BuildPlatform)] %(BuildProjects.Identity)" />
    <Message Text="%0A" />
    <!-- Restore nuget packages for solutions... -->
    <Exec
      Command="&quot;$(ZouDir)nuget&quot; restore &quot;%(BuildProjects.Identity)&quot;"
      Condition="'%(Extension)' == '.sln'"/>
    <!-- ...and projects -->
    <!--<Message
      Text="&quot;$(ZouDir)nuget&quot; restore &quot;%(BuildProjects.RootDir)%(Directory)packages.config&quot; -PackagesDirectory &quot;$(SolutionDir)packages\.&quot;"
      Condition="'%(Extension)' != '.sln' And Exists('%(RootDir)%(Directory)packages.config')"/>-->
    <Exec
      Command="&quot;$(ZouDir)nuget&quot; restore &quot;%(BuildProjects.RootDir)%(Directory)packages.config&quot; -PackagesDirectory &quot;$(SolutionDir)packages\.&quot;"
      Condition="'%(Extension)' != '.sln' And Exists('%(RootDir)%(Directory)packages.config')"/>
    
    <!--
	  The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(BuildProjects.Identity)" Targets="Build" Properties="Platform=%(BuildPlatform);Configuration=%(BuildConfiguration) " />
    Instead with use the Exec task which starts the MSBuild process.
	  -->
    
    <!-- Build solutions... -->
    <Exec
      Condition="'%(Extension)' == '.sln'"
      Command="&quot;$(MSBuildToolsPath)\msbuild&quot; /nologo /v:m /t:Build &quot;/p:Platform=%(BuildPlatform);Configuration=%(BuildConfiguration);BuildInParallel=%(BuildInParallel)&quot; &quot;%(BuildProjects.Identity)&quot;" />
    <!-- ...and projects -->
    <MSBuild
      Condition="'%(Extension)' != '.sln'"
      Projects="%(BuildProjects.Identity)"
      Targets="Build"
      Properties="Platform=%(BuildPlatform);Configuration=%(BuildConfiguration)"
      BuildInParallel="%(BuildInParallel)" />
  </Target>
</Project>