<!--
The Sign.targets can be used to sign folders.

Input:
  $(SignToolBroker) - (*rn32|partout|local)
  $(Sign)           - (*true|false)
  $(SignFolder)
  @(SignFolder)
    %(Broker)
 
Operations:
  RemoveDuplicates( @(SignFolder) += $(SignFolder) )
-->
<Project TreatAsLocalProperty="Sign;SignToolBroker" InitialTargets="TraceSignTargets">
  <PropertyGroup>
    <SignTargetsImported>true</SignTargetsImported>
  </PropertyGroup>

  <Import Project="zou.props" Condition="'$(ZouImported)' == ''" />

  <!-- Setup defaults -->
  <PropertyGroup>
    <SignToolBroker Condition="'$(SignToolBroker)' == ''">rn32</SignToolBroker>
    <Sign           Condition="'$(Sign)'           == ''">false</Sign>
  </PropertyGroup>

  <!-- Forward properties -->
  <ItemDefinitionGroup>
    <ImportProject>
      <SignToolBroker>$(SignToolBroker)</SignToolBroker>
      <Sign          >$(Sign)</Sign>
    </ImportProject>
  </ItemDefinitionGroup>

  <!-- Setup default broker -->
  <ItemDefinitionGroup>
    <SignFolder>
      <Broker    Condition="'%(Broker)'    == ''">$(SignToolBroker)</Broker>
      <Recursive Condition="'%(Recursive)' == ''">true</Recursive>
    </SignFolder>
  </ItemDefinitionGroup>

  <Target Name="_InitSignFolder">
    <!-- Preprocess @(SignFolder) items and $(SignFolder) property-->
    <ItemGroup>
      <!-- Merge $(SignFolder) (semi-colon separated) into @(SignFolder) -->
      <SignFolder Include="$(SignFolder)" />
      
      <!-- Discriminate files from directories (CreatedTime metadata is empty for a directory) -->
      <SignFolder>
        <Folder Condition="'%(CreatedTime)' == ''">%(Identity)</Folder>
        <Folder Condition="'%(CreatedTime)' != ''">%(RelativeDir)</Folder>
      </SignFolder>
      <!-- Normalize separators so that RemoveDuplicate task can do its job -->
      <SignFolder>
        <Folder>$([System.String]::new('%(Folder)').TrimEnd('\/').Replace('\', '/'))</Folder>
      </SignFolder>

      <!-- Make a copy with normalized paths for RemoveDuplicate -->
      <_SignFolder Include="%(SignFolder.Folder)" Condition="Exists('%(Folder)')">
        <Broker>%(SignFolder.Broker)</Broker>
      </_SignFolder>

      <!-- Reset variable for reuse -->
      <SignFolder Remove="@(SignFolder)" />
    </ItemGroup>

    <!-- Remove duplicates from _SignFolder items into SignFolder -->
    <RemoveDuplicates Inputs="@(_SignFolder)">
      <Output TaskParameter="Filtered" ItemName="SignFolder"/>
    </RemoveDuplicates>

    <!-- Clean temp vars -->
    <ItemGroup>
      <_SignFolder Remove="@(_SignFolder)" />
    </ItemGroup>

    <ItemGroup>
      <SignFolder>
        <Command>esign --nologo --porcelain --verbose --%(Broker)</Command>
      </SignFolder>
      <SignFolder>
        <Command Condition="%(Recursive)">%(Command) --recursive</Command>
      </SignFolder>
      <SignFolder>
        <Command>%(Command) "%(Identity)"</Command>
      </SignFolder>
    </ItemGroup>

    <!--<LogItems Items="@(SignFolder)" Title="_InitSignFolder.SignFolder" />
    <Message Importance="high"  Text=" " />-->

  </Target>

  <Target Name="SignFolder" DependsOnTargets="_InitSignFolder" AfterTargets="PackBuild" Outputs="%(SignFolder.Identity)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] SignFolder" />
    <Message Condition="'$(ZouDebug)' == 'true' And '%(Command)' != ''" Importance="high" Text="%(SignFolder.Command)" />

    <Message Condition="'$(ZouDebug)' != 'true' And '%(SignFolder.Command)' != ''" Importance="high" Text=" " />
    <Message Condition="'$(ZouDebug)' != 'true' And '%(SignFolder.Command)' != ''" Importance="high" Text="$(L2p)Signing $(T1)%(SignFolder.Identity)$(XC)" />
    <Exec    Condition="'$(ZouDebug)' != 'true' And '%(SignFolder.Command)' != ''" Command="%(SignFolder.Command)" />
    <Message Condition="'$(ZouDebug)' != 'true' And '%(SignFolder.Command)' != ''" Importance="high" Text="$(NC)" />
  </Target>

  <!-- Sign dotnet tools before packaging  -->
  <Target Name="SignDotnetTool" AfterTargets="Build" BeforeTargets="PackTool" Condition="'$(Sign)'=='true' And '$(PackAsTool)'=='true' And Exists('$(PublishDir)')">
    <Message Importance="high" Text=" " />
    <Message Importance="high" Text="$(L2p)Signing $(T1)$(PublishDir).$(XC)" />
    <Exec Command="esign --nologo -r -l -v --$(SignToolBroker) &quot;$(PublishDir).&quot;" />
    <Message Importance="high" Text="$(NC)" />
  </Target>

  <Target Name="TraceSignTargets" Condition="'$(ZouTrace)' == 'true'">
    <Message Importance="high" Text="zou/Sign.targets [$(MSBuildProjectFile)]" />
    <Message Importance="high" Text="----------------" />
    <Message Importance="high" Text="Sign           = $(Sign)" />
    <Message Importance="high" Text="SignToolBroker = $(SignToolBroker)" />
    <Message Importance="high" Text="PublishDir     = $(PublishDir)" />
    <Message Importance="high" Text="OutDir         = $(OutDir)" />
    <Message Importance="high" Text="OutputPath     = $(OutputPath)" />
    
    <LogItems Items="@(SignFolder)" Title="@SignFolder" />
    <Message Importance="high" Text=" " />
  </Target>

</Project>
