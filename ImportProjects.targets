<?xml version="1.0" encoding="utf-8"?>
<!-- The ImportProjects.targets can be used to build and import the output of one or many projects or solutions. -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>
    <ImportProjects>
      <BuildInParallel>true</BuildInParallel>
      <Configuration>$(Configuration)</Configuration>
      <!-- Propagate the options specified on the command line -->
      <WorkDir         Condition="'$(ForwardWorkDir)'         != ''">$(ForwardWorkDir)</WorkDir>
      <PkgDir          Condition="'$(ForwardPkgDir)'          != ''">$(ForwardPkgDir)</PkgDir>
      <DbgDir          Condition="'$(ForwardDbgDir)'          != ''">$(ForwardDbgDir)</DbgDir>
      <OutDir          Condition="'$(ForwardOutDir)'          != ''">$(ForwardOutDir)</OutDir>
      <Platform        Condition="'$(ForwardPlatform)'        != ''">$(ForwardPlatform)</Platform>
      <PlatformToolset Condition="'$(ForwardPlatformToolset)' != ''">$(ForwardPlatformToolset)</PlatformToolset>
    </ImportProjects>
  </ItemDefinitionGroup>

  <!-- Preprocess build options and add a 'Properties' metadata -->
  <Target Name="AddBuildOptions">
    <AddBuildOptions Projects="@(ImportProjects)">
      <Output ItemName="ProjectsToBuild" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>
  </Target>

  <!-- ================ ImportProjectsClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectsClean"
          BeforeTargets="Clean"
          DependsOnTargets="AddBuildOptions"
          Outputs="%(ProjectsToBuild.Identity)">
    <!-- The clean target does not care about project dependencies. This means that we can safely use the MSBuild task for solutions too. -->
    <MSBuild Projects="@(ProjectsToBuild)" Targets="Clean" Properties="%(Properties)" BuildInParallel="%(BuildInParallel)" />
  </Target>

  <!-- ================ ImportProjects ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjects"
          DependsOnTargets="_DeleteLastBuildState;AddBuildOptions"
          BeforeTargets="Build"
          Outputs="%(ProjectsToBuild.Identity)">

    <LogItems Items="@(ProjectsToBuild)" Title="ProjectsToBuild" />
    <Message Text=" " />
    
    <!-- Restore nuget packages for solutions... -->
    <Exec Condition="'%(Extension)' == '.sln'"
          Command='"$(ZouDir)nuget" restore "%(ProjectsToBuild.Identity)"'/>
    <!-- ...and projects -->
    <Exec Condition="'%(Extension)' != '.sln' And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouDir)nuget" restore "%(ProjectsToBuild.RootDir)%(Directory)packages.config" -PackagesDirectory "$(SolutionDir)packages\."'/>
    
    <!--
	  The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(ProjectsToBuild.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
	  -->
    
    <!-- Build solutions... -->
    <!-- TODO: process targets and BuildInParallel (/m) for command line -->
    <Exec Condition="'%(Extension)' == '.sln'"
          Command='"$(MSBuildToolsPath)\msbuild" /nologo /v:m /m /t:Build "/p:%(Properties)" "%(ProjectsToBuild.Identity)"' />
    <!-- ...and projects -->
    <MSBuild Condition="'%(Extension)' != '.sln'"
             Projects="%(ProjectsToBuild.Identity)" Targets="Build" Properties="%(Properties)" BuildInParallel="%(BuildInParallel)" />
  </Target>
</Project>