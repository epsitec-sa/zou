<!-- The ImportProject.targets can be used to build and import the output of one or many projects or solutions. -->
<Project>

  <Import Project="Boot.Platform.props" Condition="'$(RuntimePlatform)' == ''" />

  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>

    <ImportProject>
      <!-- Forward following properties to nested commands -->
      <Verbosity         Condition="'%(Verbosity)'         == '' And '$(Verbosity)'         != ''">$(Verbosity)</Verbosity>
      <MaxCpuCount       Condition="'%(MaxCpuCount)'       == '' And '$(MaxCpuCount)'       != ''">$(MaxCpuCount)</MaxCpuCount>

      <WorkDir           Condition="'%(WorkDir)'           == '' And '$(WorkDir)'           != ''">$(WorkDir)</WorkDir>
      <PkgDir            Condition="'%(PkgDir)'            == '' And '$(PkgDir)'            != ''">$(PkgDir)</PkgDir>
      <PkgBinDir         Condition="'%(PkgBinDir)'         == '' And '$(PkgBinDir)'         != ''">$(PkgBinDir)</PkgBinDir>
      <AsmDir            Condition="'%(AsmDir)'            == '' And '$(AsmDir)'            != ''">$(AsmDir)</AsmDir>
      <OutDir            Condition="'%(OutDir)'            == '' And '$(OutDir)'            != ''">$(OutDir)</OutDir>
      
      <PlatformToolset   Condition="'%(PlatformToolset)'   == '' And '$(PlatformToolset)'   != ''">$(PlatformToolset)</PlatformToolset>
      <Platform          Condition="'%(Platform)'          == '' And '$(Platform)'          != ''">$(Platform)</Platform>
      
      <Configuration     Condition="'%(Configuration)'     == '' And '$(Configuration)'     != ''">$(Configuration)</Configuration>
      <RuntimeType       Condition="'%(RuntimeType)'       == '' And '$(RuntimeType)'       != ''">$(RuntimeType)</RuntimeType>
      <RuntimeIdentifier Condition="'%(RuntimeIdentifier)' == '' And '$(RuntimeIdentifier)' != ''">$(RuntimeIdentifier)</RuntimeIdentifier>
      <AssemblerOutput   Condition="'%(AssemblerOutput)'   == '' And '$(AssemblerOutput)'   != ''">$(AssemblerOutput)</AssemblerOutput>
      
      <CrossBuild        Condition="'%(CrossBuild)'        == '' And '$(CrossBuild)'        != ''">$(CrossBuild)</CrossBuild>
      <SignToolBroker    Condition="'%(SignToolBroker)'    == '' And '$(SignToolBroker)'    != ''">$(SignToolBroker)</SignToolBroker>
      <RedistFolder      Condition="'%(RedistFolder)'      == '' And '$(RedistFolder)'      != ''">$(RedistFolder)</RedistFolder>
      <RedistByFramework Condition="'%(RedistByFramework)' == '' And '$(RedistByFramework)' != ''">$(RedistByFramework)</RedistByFramework>
      <RedistByRuntime   Condition="'%(RedistByRuntime)'   == '' And '$(RedistByRuntime)'   != ''">$(RedistByRuntime)</RedistByRuntime>
      
    </ImportProject>

    <ImportProject>
      <!-- Setup default values -->
      <Verbosity             Condition="'%(Verbosity)'             == ''">minimal</Verbosity>
      
      <Configuration         Condition="'%(Configuration)'         == ''">Debug</Configuration>
      <RuntimeType           Condition="'%(RuntimeType)'           == ''">Core</RuntimeType>

      <Targets               Condition="'%(Targets)'               == ''">Build</Targets>
      <CopyToOutputDirectory Condition="'%(CopyToOutputDirectory)' == ''">PreserveNewest</CopyToOutputDirectory>
      
      <CrossBuild            Condition="'%(CrossBuild)'            == ''">false</CrossBuild>
      <SignToolBroker        Condition="'%(SignToolBroker)'        == ''">rn32</SignToolBroker>
    </ImportProject>
  </ItemDefinitionGroup>

  <!-- Preprocess build options and add a 'Properties' metadata -->
  <Target Name="AddBuildOptions">
    <AddBuildOptions Projects="@(ImportProject)">
      <Output ItemName="ProjectsToBuild" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>
  </Target>

  <!-- ================ ImportProjectClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectClean"
          DependsOnTargets="AddBuildOptions"
          Returns="%(ProjectsToBuild.Identity)">
    <!-- The clean target does not care about project dependencies. This means that we can safely use the MSBuild task for solutions too. -->
    <MSBuild Projects="%(ProjectsToBuild.Identity)" Targets="Clean" Properties="%(Properties)" ContinueOnError="WarnAndContinue" />
  </Target>

  <!-- ================ ImportProject ================ -->

  <Target Name="InitProjectsToBuild" DependsOnTargets="AddBuildOptions">
    <ItemGroup>
      <ProjectsToBuild>
        <MSBuildCmd>"$(MSBuildToolsPath)\msbuild"</MSBuildCmd>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildCmd Condition="'%(RuntimeType)' == 'Core' Or !$([MSBuild]::IsOsPlatform(Windows))">dotnet build</MSBuildCmd>
        <!-- Do not reuse MSBuild nodes after a build -->
        <MSBuildOptions>-nologo -nr:false</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(ProjectsToBuild.MaxCpuCount)' == '0'">%(MSBuildOptions) -m</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(ProjectsToBuild.MaxCpuCount)' != '0' And '%(ProjectsToBuild.MaxCpuCount)' != ''">%(MSBuildOptions) -m:%(ProjectsToBuild.MaxCpuCount)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(ProjectsToBuild.Verbosity)' != ''">%(MSBuildOptions) -v:%(ProjectsToBuild.Verbosity)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(ProjectsToBuild.Targets)' != ''">%(MSBuildOptions) -t:%(ProjectsToBuild.Targets)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(ProjectsToBuild.Properties)' != ''">%(MSBuildOptions) -p:%(ProjectsToBuild.Properties)</MSBuildOptions>
      </ProjectsToBuild>
    </ItemGroup>

    <!--<LogItems Items="@(ProjectsToBuild)" Title="ProjectsToBuild" />
    <Message Text=" " />-->

  </Target>
  
  <!-- Target batching -->
  <Target Name="ImportProject"
          Condition="'@(ImportProject)' != ''"
          DependsOnTargets="InitProjectsToBuild"
          Returns="%(ProjectsToBuild.Identity)">
    
    <!-- Restore nuget packages for solution... -->
    <Exec Condition="'%(ProjectsToBuild.Extension)' == '.sln'"
          Command='"$(ZouBinzOsDir)nuget" restore "%(ProjectsToBuild.Identity)"'/>
    
    <!-- ...or project with solution. -->
    <Exec Condition="'%(ProjectsToBuild.Extension)' != '.sln' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouBinzOsDir)nuget" restore "%(ProjectsToBuild.RootDir)%(Directory)packages.config" -Verbosity quiet -PackagesDirectory "$(NugetPackagesDir)."'/>

    <!--
    The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(ProjectsToBuild.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
    -->

    <!--<Message Importance="high" Text='%(MSBuildCmd) %(MSBuildOptions) "%(ProjectsToBuild.Identity)"' />-->
    <Exec Command='%(MSBuildCmd) %(MSBuildOptions) "%(ProjectsToBuild.Identity)"' />
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />
  </Target>

  <Target Name="_ImportProject" Condition="'$(ZouTrace)' == 'true'">
    <Message Importance="high" Text='$(MSBuildCmd) $(MSBuildOptions) "-t:%(MSBuildTarget.Identity)" "%(ProjectsToBuild.Identity)"' />
  </Target>

</Project>
