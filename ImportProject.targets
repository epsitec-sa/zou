<!-- The ImportProject.targets can be used to build and import the output of one or many projects or solutions. -->
<Project TreatAsLocalProperty="Verbosity">

  <PropertyGroup>
    <ImportProjectTargetsImported>true</ImportProjectTargetsImported>
  </PropertyGroup>
  
  <Import Project="Sign.targets" Condition="'$(SignTargetsImported)' == ''" />

  <PropertyGroup>
    <Verbosity Condition="'$(Verbosity)' == ''">minimal</Verbosity>
    <Configuration>Debug</Configuration>
  </PropertyGroup>
  
  <!--
  Define imported projects default metadata
  Forward properties to nested commands
  -->
  <ItemDefinitionGroup>
    <ImportProject>
      <Verbosity        >$(Verbosity)</Verbosity>
      <MaxCpuCount      >$(MaxCpuCount)</MaxCpuCount>

      <!-- Layout -->
      <WorkDir          >$(WorkDir)</WorkDir>
      <AsmDir           >$(AsmDir)</AsmDir>
      <OutDir           >$(OutDir)</OutDir>
      <PublishDir       >$(PublishDir)</PublishDir>
      <PkgDir           >$(PkgDir)</PkgDir>
      <PkgBinDir        >$(PkgBinDir)</PkgBinDir>
      <RedistFolder     >$(RedistFolder)</RedistFolder>

      <Configuration    >$(Configuration)</Configuration>
      <Platform         >$(Platform)</Platform>
      <PlatformToolset  >$(PlatformToolset)</PlatformToolset>
      <RuntimeIdentifier>$(RuntimeIdentifier)</RuntimeIdentifier>

      <RedistDebug      >$(RedistDebug)</RedistDebug>
      <ZouDebug         >$(ZouDebug)</ZouDebug>
    </ImportProject>
  </ItemDefinitionGroup>

  <Target Name="ImportProjectInit">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectInit" />

    <ItemGroup>
      <!--
      RuntimeType defines which build application is used:
        - Full -> 'msbuild'
        - Core -> 'dotnet build'
      
      Force 'msbuild' usage on Windows for:
        - C++ projects and solution
        - C# projects with TargetFramework == (Full|Windows)TargetFramework (see Redist.ImportProject.targets/RedistImportProjectInit)
      -->
      <ImportProject Condition="$([MSBuild]::IsOsPlatform(Windows))">
        <RuntimeType Condition="'%(ImportProject.Extension)' == '.vcxproj' Or '%(ImportProject.Extension)' == '.sln'">Full</RuntimeType>
      </ImportProject>
      <ImportProject Condition="!$([MSBuild]::IsOsPlatform(Windows))">
        <RuntimeType>Core</RuntimeType>
      </ImportProject>

      <!--
      Set default redistribution frameworks only for C# projects (avoid a publish of other project types).
      For redistribution projects, the target framework is deduced from the redistribution framework
      and the publish target is used if the target framework is defined (see Redist.ImportProject.targets)
      -->
      <ImportProject>
        <RedistX86Framework Condition="'%(ImportProject.RedistX86Framework)' == '' And '%(Extension)' == '.csproj'">$(FullTargetFramework)</RedistX86Framework>
        <RedistX64Framework Condition="'%(ImportProject.RedistX64Framework)' == '' And '%(Extension)' == '.csproj'">$(CoreTargetFramework)</RedistX64Framework>
      </ImportProject>
      <!-- Get default platform from runtime identifier -->
      <ImportProject>
        <Platform Condition="'%(ImportProject.Platform)' == '' And $([System.String]::new(%(ImportProject.RuntimeIdentifier)).EndsWith('x86'))">x86</Platform>
        <Platform Condition="'%(ImportProject.Platform)' == '' And $([System.String]::new(%(ImportProject.RuntimeIdentifier)).EndsWith('x64'))">x64</Platform>
      </ImportProject>
    </ItemGroup>
    <LogItems Condition="'$(ZouDebug)' == 'true'" Items="@(ImportProject)" Title="ImportProjectInit[2].ImportProject" />
    <Message  Condition="'$(ZouDebug)' == 'true'" Importance="high"  Text=" " />
  </Target>

  <Target Name="ImportProjectCrossBuild" DependsOnTargets="ImportProjectInit">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectCrossBuild(CrossBuild=$(CrossBuild))" />

    <!-- ImportFile x RuntimeOs (defined in Boot.Runtime.props ) -->
    <MulJoin Input="@(ImportProject)" Items="@(RuntimeOs)" ItemName="RuntimeOs" >
      <Output TaskParameter="Output" ItemName="_ImportProject" />
    </MulJoin>

    <ItemGroup>
      <ImportProject Remove="@(ImportProject)" />
      <ImportProject Include="@(_ImportProject)" />
      <_ImportProject Remove="@(_ImportProject)" />

      <!-- Do not forward RID if Build target is specified or if its a WindowsDesktop app -->
      <ImportProject>
        <RuntimeIdentifier Condition="'%(ImportProject.Targets)' != '' And $([System.String]::new('%(ImportProject.Targets)').IndexOf('Build', StringComparison.OrdinalIgnoreCase)) >= 0" />
        <RuntimeIdentifier Condition="'$(RuntimePlatform)' == 'x64' And '%(ImportProject.RedistX64Framework)' == '$(WindowsTargetFramework)'" />
        <RuntimeIdentifier Condition="'$(RuntimePlatform)' == 'x86' And '%(ImportProject.RedistX86Framework)' == '$(WindowsTargetFramework)'" />
      </ImportProject>
    </ItemGroup>

    <LogItems Condition="'$(ZouDebug)' == 'true'" Items="@(ImportProject)" Title="ImportProjectCrossBuild.ImportProject" />
    <Message  Condition="'$(ZouDebug)' == 'true'" Importance="high"  Text=" " />
  </Target>

  <!-- ================ MSBuildProject ================ -->

  <Target Name="CreateMSBuildProjects" DependsOnTargets="ImportProjectCrossBuild">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] CreateMSBuildProjects" />

    <!-- Preprocess build options and add a 'Properties' metadata -->
    <AddBuildOptions Projects="@(ImportProject)">
      <Output ItemName="MSBuildProject" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>

    <ItemGroup>
      <MSBuildProject>
        <BundleRelativeSrcDir>$([MSBuild]::MakeRelative('$(BundleDir)', '%(RootDir)%(Directory)'))</BundleRelativeSrcDir>
        <BundleRelativeDstDir Condition="'%(MSBuildProject.PublishDir)' != ''">$([MSBuild]::MakeRelative('$(BundleDir)', '%(MSBuildProject.PublishDir)'))</BundleRelativeDstDir>
        <BundleRelativeDstDir Condition="'%(MSBuildProject.OutDir)'     != ''">$([MSBuild]::MakeRelative('$(BundleDir)', '%(MSBuildProject.OutDir)'))</BundleRelativeDstDir>
        <BundleRelativeDstDir Condition="'%(MSBuildProject.OutputPath)' != ''">$([MSBuild]::MakeRelative('$(BundleDir)', '%(MSBuildProject.OutputPath)'))</BundleRelativeDstDir>
      </MSBuildProject>
    </ItemGroup>

    <!--<LogItems Items="@(MSBuildProject)" Title="CreateMSBuildProjects.MSBuildProject" />
    <Message Importance="high" Text=" " />-->
  </Target>

  <Target Name="UpdateMSBuildProjects" DependsOnTargets="CreateMSBuildProjects">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] UpdateMSBuildProjects" />

    <ItemGroup>
      <MSBuildProject>
        <Command Condition="'%(MSBuildProject.RuntimeType)' == 'Full' And Exists('$(MSBuildToolsPath)\msbuild.exe')">"$(MSBuildToolsPath)\msbuild"</Command>
      </MSBuildProject>
      <MSBuildProject>
        <Command Condition="'%(MSBuildProject.RuntimeType)' == 'Full' And '%(MSBuildProject.Command)' == ''">msbuild</Command>
        <Command Condition="'%(MSBuildProject.RuntimeType)' != 'Full'">dotnet build</Command>
        <!-- Do not reuse MSBuild nodes after a build -->
        <Options>-nologo -nr:false</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.MaxCpuCount)' == '0'">%(Options) -m</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.MaxCpuCount)' != '0' And '%(MSBuildProject.MaxCpuCount)' != ''">%(Options) -m:%(MSBuildProject.MaxCpuCount)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Verbosity)' != ''">%(Options) -v:%(MSBuildProject.Verbosity)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Targets)' != ''">%(Options) -t:%(MSBuildProject.Targets)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Properties)' != ''">%(Options) %(MSBuildProject.PropertyOptions)</Options>
      </MSBuildProject>

      <MSBuildProject>
        <Prefix Condition="'%(MSBuildProject.RuntimeIdentifier)' == '' And '$(Platform)' == ''">$(Configuration)|custom</Prefix>
        <Prefix Condition="'%(MSBuildProject.RuntimeIdentifier)' == '' And '$(Platform)' != ''">$(Configuration)|$(Platform)</Prefix>
        <Prefix Condition="'%(MSBuildProject.RuntimeIdentifier)' != ''"                        >$(Configuration)|%(RuntimeIdentifier)</Prefix>
      </MSBuildProject>
    </ItemGroup>

    <!--<LogItems Items="@(MSBuildProject)" Title="UpdateMSBuildProjects.MSBuildProject" AllMetadata="true"/>
    <Message Importance="high" Text=" " />-->
  </Target>

  <!-- ================ ImportProjectClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectClean" Condition="@(ImportProject->Count()) > 0" DependsOnTargets="CreateMSBuildProjects" Returns="%(MSBuildProject.Identity)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectClean.Begin(MSBuildRuntimeType=$(MSBuildRuntimeType), TargetFrameworks=$(TargetFrameworks))" />
    
    <Message Condition="'%(RuntimeIdentifier)' == '' And '$(Platform)' == ''" Importance="high" Text="$(L2m)[$(Configuration)|custom] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(RuntimeIdentifier)' == '' And '$(Platform)' != ''" Importance="high" Text="$(L2m)[$(Configuration)|$(Platform)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(RuntimeIdentifier)' != ''"                         Importance="high" Text="$(L2m)[$(Configuration)|%(RuntimeIdentifier)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />

    <Delete Files="%(MSBuildProject.RootDir)%(Directory)\obj\project.assets.json" />

    <MSBuild Projects="%(MSBuildProject.Identity)" Targets="Clean" Properties="%(Properties)" ContinueOnError="WarnAndContinue" BuildInParallel="true" />
    
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectClean.End" />
  </Target>
  
  <!-- ================ ImportProject ================ -->

  <Target Name="ImportProject" Condition="$(BuildAny) And @(ImportProject->Count()) > 0" DependsOnTargets="UpdateMSBuildProjects" Returns="%(MSBuildProject.Identity)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProject" />
    <!-- Append RuntimeType and TargetFramework to MSBuildProject.Prefix -->
    <ItemGroup>
      <MSBuildProject>
        <Prefix Condition="'%(MSBuildProject.RuntimeType)' != ''">%(Prefix)|%(MSBuildProject.RuntimeType)</Prefix>
      </MSBuildProject>
      <MSBuildProject>
        <Prefix Condition="'%(MSBuildProject.TargetFramework)' != ''">%(Prefix)|%(MSBuildProject.TargetFramework)</Prefix>
      </MSBuildProject>
    </ItemGroup>

    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' == ''" Importance="high" Text="$(L1b)[%(Prefix)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' != ''" Importance="high" Text="$(L1b)[%(Prefix)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension) $(T3)-> %(MSBuildProject.BundleRelativeDstDir)%(RecursiveDir)$(XC)" />

    <!-- Restore nuget packages for solution... -->
    <Exec Condition="'%(MSBuildProject.Extension)' == '.sln'"
          Command='"$(ZouBinzOsDir)nuget" restore "%(MSBuildProject.Identity)"'/>

    <!-- ...or project with solution. -->
    <Exec Condition="'%(MSBuildProject.Extension)' != '.sln' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouBinzOsDir)nuget" restore "%(MSBuildProject.RootDir)%(Directory)packages.config" -Verbosity quiet -PackagesDirectory "$(NugetPackagesDir)."'/>

    <!-- ...or when using msbuild with a .csproj. -->
    <Exec Condition="'%(MSBuildProject.Extension)' == '.csproj' And '%(MSBuildProject.RuntimeType)' == 'Full'"
          Command='dotnet restore "%(MSBuildProject.Identity)"' EnvironmentVariables="TargetFrameworkImport=%(MSBuildProject.TargetFramework)"/>

    <!--
    The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(MSBuildProject.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
    -->
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text='### [$(MSBuildProjectFile)] %(Command) %(Options) "%(MSBuildProject.Identity)"' />
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text=' ' />
    
    <Exec Command='%(Command) %(Options) "%(MSBuildProject.Identity)"' />
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />

    <Message Importance="high" Text="$(L1e)[%(Prefix)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)%(FileName)%(Extension)$(NC)" />
  </Target>

  <Target Name="_ImportProject"      BeforeTargets="Build" DependsOnTargets="ImportProject" />
  <Target Name="_ImportProjectClean" AfterTargets="Clean"  DependsOnTargets="ImportProjectClean" />
</Project>
