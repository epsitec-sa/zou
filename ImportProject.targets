<!-- The ImportProject.targets can be used to build and import the output of one or many projects or solutions. -->
<Project>
  <PropertyGroup>
    <ImportProjectTargetsImported>true</ImportProjectTargetsImported>
  </PropertyGroup>

  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>

    <ImportProject>
      <!-- Forward following properties to nested commands -->
      <Verbosity         Condition="'%(Verbosity)'         == '' And '$(Verbosity)'          != ''">$(Verbosity)</Verbosity>
      <MaxCpuCount       Condition="'%(MaxCpuCount)'       == '' And '$(MaxCpuCount)'        != ''">$(MaxCpuCount)</MaxCpuCount>

      <WorkDir           Condition="'%(WorkDir)'           == '' And '$(WorkDir)'            != ''">$(WorkDir)</WorkDir>
      <PkgDir            Condition="'%(PkgDir)'            == '' And '$(PkgDir)'             != ''">$(PkgDir)</PkgDir>
      <PkgBinDir         Condition="'%(PkgBinDir)'         == '' And '$(PkgBinDir)'          != ''">$(PkgBinDir)</PkgBinDir>
      <AsmDir            Condition="'%(AsmDir)'            == '' And '$(AsmDir)'             != ''">$(AsmDir)</AsmDir>
      <OutDir            Condition="'%(OutDir)'            == '' And '$(OutDir)'             != ''">$(OutDir)</OutDir>
      <PublishDir        Condition="'%(PublishDir)'        == '' And '$(PublishDir)'         != ''">$(PublishDir)</PublishDir>

      <PlatformToolset   Condition="'%(PlatformToolset)'   == '' And '$(PlatformToolset)'    != ''">$(PlatformToolset)</PlatformToolset>
      <Platform          Condition="'%(Platform)'          == '' And '$(Platform)'           != ''">$(Platform)</Platform>
      
      <Configuration     Condition="'%(Configuration)'     == '' And '$(Configuration)'      != ''">$(Configuration)</Configuration>
      <RuntimeType       Condition="'%(RuntimeType)'       == '' And '$(MSBuildRuntimeType)' != ''">$(MSBuildRuntimeType)</RuntimeType>
      <RuntimeIdentifier Condition="'%(RuntimeIdentifier)' == '' And '$(RuntimeIdentifier)'  != ''">$(RuntimeIdentifier)</RuntimeIdentifier>
      <AssemblerOutput   Condition="'%(AssemblerOutput)'   == '' And '$(AssemblerOutput)'    != ''">$(AssemblerOutput)</AssemblerOutput>
      
      <CrossBuild        Condition="'%(CrossBuild)'        == '' And '$(CrossBuild)'         != ''">$(CrossBuild)</CrossBuild>
      <SignToolBroker    Condition="'%(SignToolBroker)'    == '' And '$(SignToolBroker)'     != ''">$(SignToolBroker)</SignToolBroker>

      <RedistDebug       Condition="'%(RedistDebug)'       == '' And '$(RedistDebug)'        != ''">$(RedistDebug)</RedistDebug>
      <ZouDebug          Condition="'%(ZouDebug)'          == '' And '$(ZouDebug)'           != ''">$(ZouDebug)</ZouDebug>
    </ImportProject>

    <ImportProject>
      <!-- Setup default values -->
      <Verbosity             Condition="'%(Verbosity)'             == ''">minimal</Verbosity>
      
      <Configuration         Condition="'%(Configuration)'         == ''">Debug</Configuration>
      <RuntimeType           Condition="'%(RuntimeType)'           == ''">Core</RuntimeType>

      <CopyToOutputDirectory Condition="'%(CopyToOutputDirectory)' == ''">PreserveNewest</CopyToOutputDirectory>
      
      <SignToolBroker        Condition="'%(SignToolBroker)'        == ''">rn32</SignToolBroker>
    </ImportProject>
  </ItemDefinitionGroup>

  <Target Name="ImportProjectInitCrossBuild">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectInitCrossBuild(CrossBuild=$(CrossBuild))" />

    <!-- ImportProject = ImportProject x RuntimeIdentifier (defined in Boot.Runtime.props ) -->
    <MulJoin Input="@(ImportProject)" Items="@(RuntimeIdentifier)" ItemName="RuntimeIdentifier" >
      <Output ItemName="_ImportProject" TaskParameter="Output" />
    </MulJoin>

    <ItemGroup>
      <ImportProject Remove="@(ImportProject)" />
      <ImportProject Include="@(_ImportProject)" />
      <_ImportProject Remove="@(_ImportProject)" />
    </ItemGroup>

    <!--<LogItems Items="@(ImportProject)" Title="ImportProjectInitCrossBuild.ImportProject" />
    <Message Importance="high"  Text=" " />-->
  </Target>
  
  <Target Name="CreateMSBuildProjects" DependsOnTargets="ImportProjectInitCrossBuild">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] CreateMSBuildProjects" />

    <!-- Preprocess build options and add a 'Properties' metadata -->
    <AddBuildOptions Projects="@(ImportProject)">
      <Output ItemName="MSBuildProject" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>
    
    <!--<LogItems Items="@(ImportProject)" Title="CreateMSBuildProjects.ImportProject" />
    <Message Importance="high" Text=" " />-->
  </Target>

  <!-- ================ ImportProjectClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectClean"
          DependsOnTargets="CreateMSBuildProjects"
          Returns="%(MSBuildProject.Identity)">
    <!-- The clean target does not care about project dependencies. This means that we can safely use the MSBuild task for solutions too. -->
    <MSBuild Projects="%(MSBuildProject.Identity)" Targets="Clean" Properties="%(Properties)" ContinueOnError="WarnAndContinue" />
  </Target>

  <!-- ================ ImportProject ================ -->

  <Target Name="UpdateMSBuildProjects" DependsOnTargets="CreateMSBuildProjects">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] UpdateMSBuildProjects" />

    <ItemGroup>
      <MSBuildProject>
        <Command>"$(MSBuildToolsPath)\msbuild"</Command>
      </MSBuildProject>
      <MSBuildProject>
        <Command Condition="'%(RuntimeType)' != 'Full' Or !$([MSBuild]::IsOsPlatform(Windows))">dotnet build</Command>
        <!-- Do not reuse MSBuild nodes after a build -->
        <Options>-nologo -nr:false</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.MaxCpuCount)' == '0'">%(Options) -m</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.MaxCpuCount)' != '0' And '%(MSBuildProject.MaxCpuCount)' != ''">%(Options) -m:%(MSBuildProject.MaxCpuCount)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Verbosity)' != ''">%(Options) -v:%(MSBuildProject.Verbosity)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Targets)' != ''">%(Options) -t:%(MSBuildProject.Targets)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Properties)' != ''">%(Options) -p:%(MSBuildProject.Properties)</Options>
      </MSBuildProject>
    </ItemGroup>

    <!--<LogItems Items="@(MSBuildProject)" Title="MSBuildProject" />
    <Message Importance="high" Text=" " />-->
  </Target>
  
  <!-- Target batching -->
  <Target Name="ImportProject" Condition="'@(ImportProject)' != ''" DependsOnTargets="UpdateMSBuildProjects" Returns="%(MSBuildProject.Identity)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProject" />

    <!-- Restore nuget packages for solution... -->
    <Exec Condition="'%(MSBuildProject.Extension)' == '.sln'"
          Command='"$(ZouBinzOsDir)nuget" restore "%(MSBuildProject.Identity)"'/>
    
    <!-- ...or project with solution. -->
    <Exec Condition="'%(MSBuildProject.Extension)' != '.sln' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouBinzOsDir)nuget" restore "%(MSBuildProject.RootDir)%(Directory)packages.config" -Verbosity quiet -PackagesDirectory "$(NugetPackagesDir)."'/>

    <!--
    The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(MSBuildProject.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
    -->

    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text='### [$(MSBuildProjectFile)] %(Command) %(Options) "%(MSBuildProject.Identity)"' />
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text=' ' />
    <Exec Command='%(Command) %(Options) "%(MSBuildProject.Identity)"' />
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />
  </Target>

  <Target Name="_ImportProject"      BeforeTargets="Build" DependsOnTargets="ImportProject" />
  <Target Name="_ImportProjectClean" AfterTargets="Clean"  DependsOnTargets="ImportProjectClean" />
</Project>
