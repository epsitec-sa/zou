<?xml version="1.0" encoding="utf-8"?>
<!-- The ImportProject.targets can be used to build and import the output of one or many projects or solutions. -->
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="Boot.Platform.props" Condition="'$(RuntimePlatform)' == ''" />

  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>
    <ImportProject>
      <!-- Override options specified on the command line for nested command lines -->
      <WorkDir         Condition="'$(ForwardWorkDir)'         != ''">$(ForwardWorkDir)</WorkDir>
      <PkgDir          Condition="'$(ForwardPkgDir)'          != ''">$(ForwardPkgDir)</PkgDir>
      <AsmDir          Condition="'$(ForwardAsmDir)'          != ''">$(ForwardAsmDir)</AsmDir>
      <OutDir          Condition="'$(ForwardOutDir)'          != ''">$(ForwardOutDir)</OutDir>
      <Platform        Condition="'$(ForwardPlatform)'        != ''">$(ForwardPlatform)</Platform>
      <PlatformToolset Condition="'$(ForwardPlatformToolset)' != ''">$(ForwardPlatformToolset)</PlatformToolset>
    </ImportProject>

    <ImportProject>
      <Configuration Condition="'%(Configuration)' == '' And '$(Configuration)'      != ''">$(Configuration)</Configuration>
      <RuntimeType   Condition="'%(RuntimeType)'   == '' And '$(MSBuildRuntimeType)' != ''">$(MSBuildRuntimeType)</RuntimeType>
      <ZouSignTest   Condition="'%(ZouSignTest)'   == '' And '$(ZouSignTest)'        != ''">$(ZouSignTest)</ZouSignTest>
    </ImportProject>

    <ImportProject>
      <Configuration         Condition="'%(Configuration)'         == ''">Debug</Configuration>
      <RuntimeIdentifier     Condition="'%(RuntimeIdentifier)'     == '' And '$(RuntimeIdentifier)' != '' And '%(RuntimeType)' == 'Core'">$(RuntimeIdentifier)</RuntimeIdentifier>
      <AssemblerOutput       Condition="'%(AssemblerOutput)'       == '' And '$(AssemblerOutput)'   != ''">$(AssemblerOutput)</AssemblerOutput>
      <MaxCpuCount           Condition="'%(MaxCpuCount)'           == ''">$(MaxCpuCount)</MaxCpuCount>
      <Verbosity             Condition="'%(Verbosity)'             == ''">minimal</Verbosity>
      <Targets               Condition="'%(Targets)'               == ''">Build</Targets>
      <CopyToOutputDirectory Condition="'%(CopyToOutputDirectory)' == ''">PreserveNewest</CopyToOutputDirectory>
      <ZouSignTest           Condition="'%(ZouSignTest)'           == ''">false</ZouSignTest>
    </ImportProject>
  </ItemDefinitionGroup>

  <!-- Preprocess build options and add a 'Properties' metadata -->
  <Target Name="AddBuildOptions">
    <AddBuildOptions Projects="@(ImportProject)">
      <Output ItemName="ProjectsToBuild" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>
  </Target>

  <!-- ================ ImportProjectClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectClean"
          DependsOnTargets="AddBuildOptions"
          Returns="%(ProjectsToBuild.Identity)">
    <!-- The clean target does not care about project dependencies. This means that we can safely use the MSBuild task for solutions too. -->
    <MSBuild Projects="%(ProjectsToBuild.Identity)" Targets="Clean" Properties="%(Properties)" ContinueOnError="WarnAndContinue" />
  </Target>

  <!-- ================ ImportProject ================ -->

  <Target Name="InitProjectsToBuild" DependsOnTargets="AddBuildOptions">
    <ItemGroup>
      <ProjectsToBuild>
        <MSBuildCmd>"$(MSBuildToolsPath)$(V)msbuild"</MSBuildCmd>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildCmd Condition="'%(RuntimeType)' != 'Full'">dotnet build</MSBuildCmd>
        <!-- Do not reuse MSBuild nodes after a build -->
        <MSBuildOptions>-nologo -nr:false</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(MaxCpuCount)' != ''">%(MSBuildOptions) -m:%(MaxCpuCount)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(Verbosity)' != ''">%(MSBuildOptions) -v:%(Verbosity)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(Targets)' != ''">%(MSBuildOptions) -t:%(Targets)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(Properties)' != ''">%(MSBuildOptions) -p:%(Properties)</MSBuildOptions>
      </ProjectsToBuild>
    </ItemGroup>

    <!--<LogItems Items="@(ProjectsToBuild)" Title="ProjectsToBuild" />
    <Message Text=" " />-->

  </Target>
  
  <!-- Target batching -->
  <Target Name="ImportProject"
          Condition="'@(ImportProject)' != ''"
          DependsOnTargets="InitProjectsToBuild"
          Returns="%(ProjectsToBuild.Identity)">
    
    <!-- Restore nuget packages for solution... -->
    <Exec Condition="'%(ProjectsToBuild.Extension)' == '.sln'"
          Command='"$(ZouBinzOsDir)nuget" restore "%(ProjectsToBuild.Identity)"'/>
    
    <!-- ...or project with solution. -->
    <Exec Condition="'%(ProjectsToBuild.Extension)' != '.sln' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouBinzOsDir)nuget" restore "%(ProjectsToBuild.RootDir)%(Directory)packages.config" -Verbosity quiet -PackagesDirectory "$(NugetPackagesDir)."'/>

    <!--
    The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(ProjectsToBuild.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
    -->

    <!--<Message Importance="high" Text='%(MSBuildCmd) %(MSBuildOptions) "%(ProjectsToBuild.Identity)"' />-->
    <Exec Command='%(MSBuildCmd) %(MSBuildOptions) "%(ProjectsToBuild.Identity)"' />
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />
  </Target>

  <Target Name="_ImportProject" Condition="'$(ZouTrace)' == 'true'">
    <Message Importance="high" Text='$(MSBuildCmd) $(MSBuildOptions) "-t:%(MSBuildTarget.Identity)" "%(ProjectsToBuild.Identity)"' />
  </Target>

</Project>
