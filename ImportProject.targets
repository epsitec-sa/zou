<?xml version="1.0" encoding="utf-8"?>
<!-- The ImportProject.targets can be used to build and import the output of one or many projects or solutions. -->
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Define imported projects default metadata -->
  <ItemDefinitionGroup>
    <ImportProject>
      <RuntimeType>$(MSBuildRuntimeType)</RuntimeType>
      <BuildInParallel>false</BuildInParallel>
      <Verbosity>normal</Verbosity>
      <Configuration>$(Configuration)</Configuration>
      <Targets>Build</Targets>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <!-- Propagate the options specified on the command line -->
      <WorkDir         Condition="'$(ForwardWorkDir)'         != ''">$(ForwardWorkDir)</WorkDir>
      <PkgDir          Condition="'$(ForwardPkgDir)'          != ''">$(ForwardPkgDir)</PkgDir>
      <AsmDir          Condition="'$(ForwardAsmDir)'          != ''">$(ForwardAsmDir)</AsmDir>
      <OutDir          Condition="'$(ForwardOutDir)'          != ''">$(ForwardOutDir)</OutDir>
      <Platform        Condition="'$(ForwardPlatform)'        != ''">$(ForwardPlatform)</Platform>
      <PlatformToolset Condition="'$(ForwardPlatformToolset)' != ''">$(ForwardPlatformToolset)</PlatformToolset>
    </ImportProject>
  </ItemDefinitionGroup>

  <!-- Preprocess build options and add a 'Properties' metadata -->
  <Target Name="AddBuildOptions">
    <AddBuildOptions Projects="@(ImportProject)">
      <Output ItemName="ProjectsToBuild" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>
  </Target>

  <!-- ================ ImportProjectClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectClean"
          DependsOnTargets="AddBuildOptions"
          Returns="%(ProjectsToBuild.Identity)">
    <!-- The clean target does not care about project dependencies. This means that we can safely use the MSBuild task for solutions too. -->
    <MSBuild Projects="@(ProjectsToBuild)" Targets="Clean" Properties="%(Properties)" BuildInParallel="%(BuildInParallel)" />
  </Target>

  <!-- ================ ImportProject ================ -->

  <Target Name="InitProjectsToBuild" DependsOnTargets="AddBuildOptions">
    
    <ItemGroup>
      <ProjectsToBuild>
        <MSBuildCmd Condition="'%(RuntimeType)' != 'Full'">dotnet msbuild</MSBuildCmd>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildCmd Condition="'%(MSBuildCmd)' == ''">"$(MSBuildToolsPath)\msbuild"</MSBuildCmd>
        <MSBuildOptions>/nologo</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(BuildInParallel)' == 'false'">%(MSBuildOptions) /m:1 /nr:false</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(Verbosity)' != ''">%(MSBuildOptions) /v:%(Verbosity)</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(_Target)' != ''">%(MSBuildOptions) "/t:%(_Target)"</MSBuildOptions>
      </ProjectsToBuild>
      <ProjectsToBuild>
        <MSBuildOptions Condition="'%(Properties)' != ''">%(MSBuildOptions) "/p:%(Properties)"</MSBuildOptions>
      </ProjectsToBuild>
    </ItemGroup>

    <!--<LogItems Items="@(ProjectsToBuild)" Title="ProjectsToBuild" />
    <Message Text=" " />-->

  </Target>
  
  <!-- Target batching -->
  <Target Name="ImportProject"
          Condition="'@(ImportProject)' != ''"
          DependsOnTargets="InitProjectsToBuild"
          Returns="%(ProjectsToBuild.Identity)">
    
    <!-- Restore nuget packages for solution... -->
    <Exec Condition="'%(ProjectsToBuild.Extension)' == '.sln'"
          Command='"$(ZouBinDir)nuget" restore "%(ProjectsToBuild.Identity)"'/>
    
    <!-- ...or project with solution. -->
    <Exec Condition="'%(ProjectsToBuild.Extension)' != '.sln' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouBinDir)nuget" restore "%(ProjectsToBuild.RootDir)%(Directory)packages.config" -Verbosity quiet -PackagesDirectory "$(NugetPackagesDir)."'/>

    <!--
	  The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(ProjectsToBuild.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
	  -->

    <!--<Message Importance="high" Text='%(MSBuildCmd) %(MSBuildOptions) "%(ProjectsToBuild.Identity)"' />-->
    <Exec Command='%(MSBuildCmd) %(MSBuildOptions) "%(ProjectsToBuild.Identity)"' />
    <CallTarget Targets="_DeleteLastBuildState" />
  </Target>

  <Target Name="_ImportProject">
    <Message Importance="high" Text='$(MSBuildCmd) $(MSBuildOptions) "/t:%(MSBuildTarget.Identity)" "%(ProjectsToBuild.Identity)"' />

  </Target>

  </Project>