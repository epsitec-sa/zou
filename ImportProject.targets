<!-- The ImportProject.targets can be used to build and import the output of one or many projects or solutions. -->
<Project TreatAsLocalProperty="Verbosity">

  <PropertyGroup>
    <ImportProjectTargetsImported>true</ImportProjectTargetsImported>
  </PropertyGroup>
  
  <Import Project="Sign.targets" Condition="'$(SignTargetsImported)' == ''" />

  <PropertyGroup>
    <Verbosity Condition="'$(Verbosity)' == ''">minimal</Verbosity>
    <Configuration>Debug</Configuration>
  </PropertyGroup>
  
  <!--
  Define imported projects default metadata
  Forward properties to nested commands
  -->
  <ItemDefinitionGroup>
    <ImportProject>
      <!--
      Defines which build application is used:
      - Full -> 'msbuild'
      - Core -> 'dotnet build'
      -->
      <RuntimeType      >$(MSBuildRuntimeType)</RuntimeType>

      <Verbosity        >$(Verbosity)</Verbosity>
      <MaxCpuCount      >$(MaxCpuCount)</MaxCpuCount>

      <!-- Layout -->
      <WorkDir          >$(WorkDir)</WorkDir>
      <AsmDir           >$(AsmDir)</AsmDir>
      <OutDir           >$(OutDir)</OutDir>
      <PublishDir       >$(PublishDir)</PublishDir>
      <PkgDir           >$(PkgDir)</PkgDir>
      <PkgBinDir        >$(PkgBinDir)</PkgBinDir>
      <RedistFolder     >$(RedistFolder)</RedistFolder>

      <Configuration    >$(Configuration)</Configuration>
      <Platform         >$(Platform)</Platform>
      <PlatformToolset  >$(PlatformToolset)</PlatformToolset>
      <RuntimeIdentifier>$(RuntimeIdentifier)</RuntimeIdentifier>

      <RedistDebug      >$(RedistDebug)</RedistDebug>
      <ZouDebug         >$(ZouDebug)</ZouDebug>
    </ImportProject>
  </ItemDefinitionGroup>

  <Target Name="ImportProjectInit">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectInit" />

    <ItemGroup>
      <ImportProject>
        <Platform    Condition="'%(ImportProject.Platform)' == '' And $([System.String]::new(%(ImportProject.RuntimeIdentifier)).EndsWith('x86'))">x86</Platform>
        <Platform    Condition="'%(ImportProject.Platform)' == '' And $([System.String]::new(%(ImportProject.RuntimeIdentifier)).EndsWith('x64'))">x64</Platform>
        <RuntimeType Condition="'%(ImportProject.Extension)' == '.vcxproj'">Full</RuntimeType>
      </ImportProject>
    </ItemGroup>
  </Target>

  <Target Name="ImportProjectCrossBuild" DependsOnTargets="ImportProjectInit">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectCrossBuild(CrossBuild=$(CrossBuild))" />

    <!-- ImportFile x RuntimeOs (defined in Boot.Runtime.props ) -->
    <MulJoin Input="@(ImportProject)" Items="@(RuntimeOs)" ItemName="RuntimeOs" >
      <Output TaskParameter="Output" ItemName="_ImportProject" />
    </MulJoin>

    <ItemGroup>
      <ImportProject Remove="@(ImportProject)" />
      <ImportProject Include="@(_ImportProject)" />
      <_ImportProject Remove="@(_ImportProject)" />
    </ItemGroup>

    <LogItems Condition="'$(ZouDebug)' == 'true'" Items="@(ImportProject)" Title="ImportProjectCrossBuild.ImportProject" />
    <Message  Condition="'$(ZouDebug)' == 'true'" Importance="high"  Text=" " />
  </Target>

  <!-- ================ MSBuildProject ================ -->

  <Target Name="CreateMSBuildProjects" DependsOnTargets="ImportProjectCrossBuild">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] CreateMSBuildProjects" />

    <!-- Preprocess build options and add a 'Properties' metadata -->
    <AddBuildOptions Projects="@(ImportProject)">
      <Output ItemName="MSBuildProject" TaskParameter="ProjectsOutput" />
    </AddBuildOptions>

    <ItemGroup>
      <MSBuildProject>
        <BundleRelativeSrcDir>$([MSBuild]::MakeRelative('$(BundleDir)', '%(RootDir)%(Directory)'))</BundleRelativeSrcDir>
        <BundleRelativeDstDir Condition="'%(MSBuildProject.PublishDir)' != ''">$([MSBuild]::MakeRelative('$(BundleDir)', '%(MSBuildProject.PublishDir)'))</BundleRelativeDstDir>
        <BundleRelativeDstDir Condition="'%(MSBuildProject.OutDir)'     != ''">$([MSBuild]::MakeRelative('$(BundleDir)', '%(MSBuildProject.OutDir)'))</BundleRelativeDstDir>
        <BundleRelativeDstDir Condition="'%(MSBuildProject.OutputPath)' != ''">$([MSBuild]::MakeRelative('$(BundleDir)', '%(MSBuildProject.OutputPath)'))</BundleRelativeDstDir>
      </MSBuildProject>
    </ItemGroup>

    <!--<LogItems Items="@(MSBuildProject)" Title="CreateMSBuildProjects.MSBuildProject" />
    <Message Importance="high" Text=" " />-->
  </Target>

  <Target Name="UpdateMSBuildProjects" DependsOnTargets="CreateMSBuildProjects">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] UpdateMSBuildProjects" />

    <ItemGroup>
      <MSBuildProject>
        <Command Condition="Exists('$(MSBuildToolsPath)\msbuild.exe')">"$(MSBuildToolsPath)\msbuild"</Command>
      </MSBuildProject>
      <MSBuildProject>
        <Command Condition="'%(RuntimeType)' == 'Full' And '%(MSBuildProject.Command)' == ''">msbuild</Command>
        <Command Condition="'%(RuntimeType)' != 'Full' Or !$([MSBuild]::IsOsPlatform(Windows))">dotnet build</Command>
        <!-- Do not reuse MSBuild nodes after a build -->
        <Options>-nologo -nr:false</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.MaxCpuCount)' == '0'">%(Options) -m</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.MaxCpuCount)' != '0' And '%(MSBuildProject.MaxCpuCount)' != ''">%(Options) -m:%(MSBuildProject.MaxCpuCount)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Verbosity)' != ''">%(Options) -v:%(MSBuildProject.Verbosity)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Targets)' != ''">%(Options) -t:%(MSBuildProject.Targets)</Options>
      </MSBuildProject>
      <MSBuildProject>
        <Options Condition="'%(MSBuildProject.Properties)' != ''">%(Options) %(MSBuildProject.PropertyOptions)</Options>
      </MSBuildProject>
    </ItemGroup>

    <!--<LogItems Items="@(MSBuildProject)" Title="UpdateMSBuildProjects.MSBuildProject" AllMetadata="true"/>
    <Message Importance="high" Text=" " />-->
  </Target>

  <!-- ================ ImportProjectClean ================ -->

  <!-- Target batching -->
  <Target Name="ImportProjectClean" Condition="@(ImportProject->Count()) > 0" DependsOnTargets="CreateMSBuildProjects" Returns="%(MSBuildProject.Identity)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectClean.Begin(MSBuildRuntimeType=$(MSBuildRuntimeType), TargetFrameworks=$(TargetFrameworks))" />
    
    <Message Condition="'%(RuntimeIdentifier)' == '' And '$(Platform)' == ''" Importance="high" Text="$(L2m)[$(Configuration)|custom] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(RuntimeIdentifier)' == '' And '$(Platform)' != ''" Importance="high" Text="$(L2m)[$(Configuration)|$(Platform)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(RuntimeIdentifier)' != ''"                         Importance="high" Text="$(L2m)[$(Configuration)|%(RuntimeIdentifier)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />

    <Delete Files="obj\project.assets.json" />
    
    <MSBuild Projects="%(MSBuildProject.Identity)" Targets="Clean" Properties="%(Properties)" ContinueOnError="WarnAndContinue" BuildInParallel="true" />
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProjectClean.End" />
  </Target>
  
  <!-- ================ ImportProject ================ -->

  <Target Name="ImportProject" Condition="@(ImportProject->Count()) > 0" DependsOnTargets="UpdateMSBuildProjects" Returns="%(MSBuildProject.Identity)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] ImportProject" />

    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' == '' And '%(RuntimeIdentifier)' == '' And '$(Platform)' == ''" Importance="high" Text="$(L1b)[$(Configuration)|custom] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' != '' And '%(RuntimeIdentifier)' == '' And '$(Platform)' == ''" Importance="high" Text="$(L1b)[$(Configuration)|custom] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension) $(T3)-> %(MSBuildProject.BundleRelativeDstDir)%(RecursiveDir)%(RedistFolder)$(XC)" />
    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' == '' And '%(RuntimeIdentifier)' == '' And '$(Platform)' != ''" Importance="high" Text="$(L1b)[$(Configuration)|$(Platform)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' != '' And '%(RuntimeIdentifier)' == '' And '$(Platform)' != ''" Importance="high" Text="$(L1b)[$(Configuration)|$(Platform)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension) $(T3)-> %(MSBuildProject.BundleRelativeDstDir)%(RecursiveDir)%(RedistFolder)$(XC)" />
    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' == '' And '%(RuntimeIdentifier)' != ''"                         Importance="high" Text="$(L1b)[$(Configuration)|%(RuntimeIdentifier)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension)$(XC)" />
    <Message Condition="'%(MSBuildProject.BundleRelativeDstDir)' != '' And '%(RuntimeIdentifier)' != ''"                         Importance="high" Text="$(L1b)[$(Configuration)|%(RuntimeIdentifier)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)$(T2)%(FileName)%(Extension) $(T3)-> %(MSBuildProject.BundleRelativeDstDir)%(RecursiveDir)%(RedistFolder)$(XC)" />

    <!-- Restore nuget packages for solution... -->
    <Exec Condition="'%(MSBuildProject.Extension)' == '.sln'"
          Command='"$(ZouBinzOsDir)nuget" restore "%(MSBuildProject.Identity)"'/>
    
    <!-- ...or project with solution. -->
    <Exec Condition="'%(MSBuildProject.Extension)' != '.sln' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') And Exists('%(RootDir)%(Directory)packages.config')"
          Command='"$(ZouBinzOsDir)nuget" restore "%(MSBuildProject.RootDir)%(Directory)packages.config" -Verbosity quiet -PackagesDirectory "$(NugetPackagesDir)."'/>

    <!--
    The MSBuild task does not determine the build order but MSBuild.exe and Visual Studio do:
    https://maximelabelle.wordpress.com/2011/11/29/building-multiple-projects-in-order-with-msbuild/
    We cannot use the following MSBuild task:
        <MSBuild Projects="%(MSBuildProject.Identity)" Targets="Build" Properties="OutDir=%(OutDir);Configuration=%(Configuration);Platform=%(Platform) " />
    Instead with use the Exec task which starts the MSBuild process.
    -->

    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text='### [$(MSBuildProjectFile)] %(Command) %(Options) "%(MSBuildProject.Identity)"' />
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text=' ' />
    <Exec Command='%(Command) %(Options) "%(MSBuildProject.Identity)"' />
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />

    <Message Condition="'%(RuntimeIdentifier)' == '' And '$(Platform)' == ''" Importance="high" Text="$(L1e)[$(Configuration)|custom] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)%(FileName)%(Extension)$(NC)" />
    <Message Condition="'%(RuntimeIdentifier)' == '' And '$(Platform)' != ''" Importance="high" Text="$(L1e)[$(Configuration)|$(Platform)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)%(FileName)%(Extension)$(NC)" />
    <Message Condition="'%(RuntimeIdentifier)' != ''"                         Importance="high" Text="$(L1e)[$(Configuration)|%(RuntimeIdentifier)] $(T3)%(MSBuildProject.BundleRelativeSrcDir)%(RecursiveDir)%(FileName)%(Extension)$(NC)" />
  </Target>

  <Target Name="_ImportProject"      BeforeTargets="Build" DependsOnTargets="ImportProject" />
  <Target Name="_ImportProjectClean" AfterTargets="Clean"  DependsOnTargets="ImportProjectClean" />
</Project>
