<!-- 
Summary

Input:
  GoblinBundleDir <- bundle\zou.build.props

+ GoblinSourceDir

-->
<Project>

  <ItemGroup>
    <GoblinBuildInput Include="$(GoblinSourceDir)lib\**\*.js*" />
  </ItemGroup>

  <Target Name="GoblinEnsureBuilderRunning">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### GoblinEnsureBuilderRunning" />
    <PropertyGroup>
      <GoblinRunBuilderCommand>powershell -command "Start-Process -FilePath cmd -ArgumentList /C,cd,'$(GoblinBundleDir)','&amp;&amp;',npm,run,builder -Verb runas"</GoblinRunBuilderCommand>
    </PropertyGroup>
    <ItemGroup>
      <GoblinBuilderRunning Include="$(AppData)\Epsitec\builder\var\run\xcraftd.*" />
      <GoblinBuilderRunning>
        <Command>powershell -command "Get-Process -Id $([System.String]::new('%(Extension)').TrimStart('.')) -ErrorAction SilentlyContinue"</Command>
      </GoblinBuilderRunning>
    </ItemGroup>
    
    <!--<Message Importance="high" Text="GoblinBuilderRunning.Identity = %(GoblinBuilderRunning.Identity)" />
    <Message Importance="high" Text="GoblinBuilderRunning.Command  = %(GoblinBuilderRunning.Command)" />
    <Message Importance="high" Text="GoblinBuilderRunning.Count    = @(GoblinBuilderRunning->Count())" />
    <Message Importance="high" Text="GoblinRunBuilderCommand     = $(GoblinRunBuilderCommand)" />-->
    
    <Exec Condition="@(GoblinBuilderRunning->Count()) > 0"
          Command="%(GoblinBuilderRunning.Command)"
          IgnoreExitCode="true"
          StandardErrorImportance="low"
          StandardOutputImportance="low"
          ConsoleToMSBuild="true" >
      <Output TaskParameter="ExitCode" PropertyName="GoblinBuilderRunningExitCode" />
    </Exec>
    <!--<Message Importance="high" Text="GoblinBuilderRunningExitCode     = $(GoblinBuilderRunningExitCode)" />-->
    <!--<Message Condition="'$(GoblinBuilderRunningExitCode)' != '0'" Importance="high" Text="Starting goblin builder with administrator privileges..." />-->
    <Exec    Condition="'$(GoblinBuilderRunningExitCode)' != '0'" Command="$(GoblinRunBuilderCommand)" WorkingDirectory="$(GoblinBundleDir)" />
  </Target>

  <Target Name="GoblinBuildRelease" Condition="'$(Configuration)' == 'Release'" BeforeTargets="Build" Inputs="@(GoblinBuildInput)" Outputs="$(GoblinTargetPath)">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### GoblinBuildRelease" />
    <!--<Message Importance="high" Text="GoblinTargetPath = $(GoblinTargetPath)" />-->
    <!--<Message Importance="high" Text="@GoblinBuildInput = %(GoblinBuildInput.Identity)" />-->

    <Message Importance="high" Text='$(L1b)[$(Configuration)|$(Platform)] $(XC)zog electronify.build $(T1)$(GoblinBuildId)$(XC) "$(GoblinIntDir)." $(Platform)' />
    <CallTarget Targets="GoblinEnsureBuilderRunning" />
    <Exec Command='zog electronify.build $(GoblinBuildId) "$(GoblinIntDir)." $(Platform)' WorkingDirectory="$(GoblinBundleDir)" EnvironmentVariables="GOBLINS_APP=builder" />
  </Target>

  <Target Name="GoblinInitPostBuildCopy">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### GoblinInitPostBuildCopy(OutDir=$(OutDir), RedistFolder=$(RedistFolder))" />

    <PropertyGroup>
      <_GoblinCopyTargetDir>$(OutDir)$(RedistFolder)\</_GoblinCopyTargetDir>
    </PropertyGroup>
    <ItemGroup>
      <_GoblinCopySourceFile Include="$(GoblinOutDir)**\*" />
      <_GoblinCopyTargetFile Include="@(_GoblinCopySourceFile->'$(_GoblinCopyTargetDir)%(RecursiveDir)%(FileName)%(Extension)')" />
    </ItemGroup>

    <!--<Message Importance="high" Text="@_GoblinCopySourceFile = %(_GoblinCopySourceFile.Identity)" />-->
    <!--<Message Importance="high" Text="@_GoblinCopyTargetFile = %(_GoblinCopyTargetFile.Identity)" />-->
  </Target>

  <Target Name="GoblinPostBuildCopy"
          AfterTargets="Build"
          DependsOnTargets="GoblinInitPostBuildCopy"
          Inputs="@(_GoblinCopySourceFile)"
          Outputs="@(_GoblinCopyTargetFile)">

    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### GoblinPostBuildCopy(OutDir=$(OutDir), RedistFolder=$(RedistFolder))" />

    <Copy SourceFiles="@(_GoblinCopySourceFile)" DestinationFiles="@(_GoblinCopyTargetFile)" />

    <ItemGroup>
      <_GoblinCopySourceFile Remove="@(_GoblinCopySourceFile)" />
      <_GoblinCopyTargetFile Remove="@(_GoblinCopyTargetFile)" />
    </ItemGroup>
  </Target>

  <Target Name="GoblinClean" AfterTargets="Clean" DependsOnTargets="GoblinInitPostBuildCopy">
    <!--<Message Importance="high" Text="### GoblinClean(OutDir=$(OutDir), RedistFolder=$(RedistFolder))" />
    <Message Importance="high" Text="_GoblinCopyTargetDir   = $(_GoblinCopyTargetDir)" />
    <Message Importance="high" Text="@_GoblinCopySourceFile = %(_GoblinCopySourceFile.Identity)" />
    <Message Importance="high" Text="@_GoblinCopyTargetFile = %(_GoblinCopyTargetFile.Identity)" />-->
    <!--<Delete Files="@(_GoblinCopySourceFile)" />-->
    <Delete Files="@(_GoblinCopyTargetFile)" />
    <!--<RemoveDir Directories="$(GoblinIntDir)" ContinueOnError="true" />-->
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

</Project>
