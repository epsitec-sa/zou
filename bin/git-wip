#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]        && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_PROD ]]          && . zoul-git-prod
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]  && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

wip_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    --vnext)        vnext=true;;
    start|enter)    wipCommand=$1; wip_parse_wip $2 && shift;;
    exit|finish)    wipCommand=$1;;
    --)             shift; break;;
    -*) io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)  io_error "invalid argument ${VC}$1${Red}, use ${VC}--${Red} to specify modules paths\n"; io_help $0; return 1;;
  esac; shift; done

  local path
  for path; do
    wipModulePaths+=( "$(realpath "$path")" )
  done
  if [[ -z $wipCommand ]]; then
    io_error "missing subcommand: use one of ${VC}(start|enter|exit|finish)${Red}\n"
    io_help $0
    exit 1
  fi
  wipPrefix=${wipPrefix:-wip}
  wipSuffix=${wipSuffix:-work}
  # io_trace "wip_parse -- $(print_vars recursive wipPrefix wipSuffix wipCommand wipModulePaths[@])"
}
wip_parse_wip()
{
  # skip options
  [[ ${1:0:1} != '-' && $1 =~ ^([^:]+:)?([^-]*) ]] || return 1
  wipPrefix=${BASH_REMATCH[1]%:}
  wipSuffix=${BASH_REMATCH[2]}
}
wip_run()
{
  # parse command line
  local jobsCount recursive vnext wipCommand wipPrefix wipSuffix wipModulePaths=()
  wip_parse "$@" || return $?

  local wipScopes=( prod_scope config_scope cosm_scope )
  
  case $wipCommand in
    start)  startupMessage="Starting ${Brown}$wipPrefix:$wipSuffix${White}, please wait...";;
    enter)  startupMessage="Entering ${Brown}$wipPrefix:$wipSuffix${White}, please wait...";;
    exit)   startupMessage="Exiting WIP mode, please wait...";;
    finish) startupMessage="Finishing WIP, please wait...";;
  esac

  module_run "${wipScopes[@]}" wip_command
}

wip_start()
{
  local devBranch=$(wip_to_ref "$moduleDevBranch")
  local wipBranch=$(ref_to_wip "$devBranch" "$wipSuffix" "$wipPrefix")
  if [[ $moduleHead != $wipBranch ]]; then
    # create wip branch on dev branch
    [[ $moduleHead != $devBranch ]] && branch_checkout "$devBranch"
    git branch "$wipBranch" &>/dev/null
  fi
  branch_checkout "$wipBranch" true
}
wip_enter()
{
  local devBranch=$(wip_to_ref "$moduleDevBranch")
  local wipBranch=$(ref_to_wip "$devBranch" "$wipSuffix" "$wipPrefix")
  # checkout wip branch if it exists
  if [[ $moduleHead != $wipBranch ]] && branch_exists "$wipBranch"; then
    branch_checkout "$wipBranch" true
  fi
}
wip_exit()
{
  ! module_in_wip_mode && return 0

  prod_checkout "$vnext" true
}
wip_finish()
{
  ! module_in_wip_mode && return 0

  local devBranch=$(wip_to_ref $moduleDevBranch)
  local wipBranch=$moduleHead
  # io_trace "wip_finish 1 -- $(print_vars moduleHead devBranch)"
  if [[ $wipBranch != $devBranch ]]; then
    # io_trace "wip_finish 2 -- $(print_vars moduleHead devBranch)"
    # merge, checkout prod || vtag || dev and del wip
    branch_merge "$wipBranch" "$devBranch" \
    && prod_checkout "$vnext" true "$devBranch" \
    && branch_delete "$wipBranch"
  fi
}

####################
# COMMAND MANAGEMENT
####################

wip_command()
{
  # io_trace "wip_command -- $(print_vars wipCommand wipPrefix wipSuffix wipModulePaths[@])"
  if [[ $wipCommand =~ (exit|finish) ]] && wip_bundle_visited; then
    recursive=true
  fi

  if [ ${#wipModulePaths[@]} -gt 0 ]; then
    wip_visit_modules wip_tree || return $?
  else
    wip_tree || return $?
  fi

  if [[ $wipCommand =~ (start|enter) ]] && ! wip_bundle_visited; then
    wip_visit_bundle wip_node
  fi
}
wip_tree()
{
  # io_trace "wip_tree -- $(print_vars wipCommand wipPrefix wipSuffix wipModulePaths[@])"
  wip_visit_tree || return $?
  wip_node
}
wip_node()
{
  # io_trace "wip_node -- $(print_vars wipCommand wipPrefix wipSuffix wipModulePaths[@])"
  wip_${wipCommand}
}
wip_visit_tree()
{
  [[ $recursive == true ]] || return 0
  module_visit_submodules_async 'configSelectInclude[@]' "${wipScopes[@]}" wip_tree
}
wip_visit_modules()
{
  # io_trace "wip_visit_modules -- ${*@Q} -- $(print_vars wipModulePaths[@])"
  module_visit_submodules_async 'wipModulePaths[@]' "${wipScopes[@]}" "$@"
}
wip_visit_bundle()
{
  # io_trace "wip_visit_bundle -- ${*@Q}"
  module_visit "$bundleRoot" "${wipScopes[@]}" "$@"
}
wip_bundle_visited()
{
  module_is_bundle || array_contains_element "$bundleRoot" "${wipModulePaths[@]}"
}

wip_run  "$@"
