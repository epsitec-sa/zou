#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]        && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

wip_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; args+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -j*)                jobsCount=${1#-j};;
    -*) io_error "unknown option '$1'"; return 1;;
    *) wipSuffix=$1;;
  esac; shift; done
}
wip_run()
{
  # parse command line
  local jobsCount noSkuFilter selectDev commitSubmodules wipSuffix
  wip_parse "$@" || return $?

  startupMessage="Creating wip branch '$wipSuffix', please wait..."

  module_run wip_main
}
wip_main()
{
  wip_create
  if [[ "$moduleRoot" != "$bundleRoot" ]]; then
    module_visit "$bundleRoot" wip_create
  fi
}
wip_create()
{
  local skuBranch=$(ref_wip_to_sku $moduleBranch)
  local wipBranch=$(ref_sku_to_wip $skuBranch $wipSuffix)
  if [[ $moduleBranch != $wipBranch ]]; then
    git branch "$wipBranch"
    # io_trace "wip_create $(print_vars wipSuffix moduleBranch skuBranch wipBranch)"
    if [[ "$moduleRoot" == "$bundleRoot" ]]; then
      git-select "$wipBranch"
    fi
  fi
}

wip_run  "$@"
