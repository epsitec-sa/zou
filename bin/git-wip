#!/bin/bash

[[ -z $ZOUL_GIT_CMD ]]           && . zoul-git-cmd
[[ -z $ZOUL_GIT_PROD ]]          && . zoul-git-prod
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]  && . zoul-git-branch-merge

wip_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    start|enter)    subcommand=$1;;
    release|update) subcommand=$1;;
    exit|finish)    subcommand=$1;;
    share)          subcommand=$1;;
    --merge)        mergeIntoDev=true;;
    --hotfix)       wipHotfix=true;;
    --)             shift; break;;
    -*) io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_subcommand 'start' 'enter' 'exit' 'share' 'release' 'update' 'finish'

  wipModulePaths=( "$@" )
  wip_parse_wip "${args[@]}"
  cmd_check_args "${args[@]:1}"

  # io_trace "wip_parse -- $(print_vars recursive wipPrefix wipSuffix subcommand wipModulePaths[@] args[@])"
}
wip_parse_wip()
{
  # skip options
  [[ ${1:0:1} != '-' && $1 =~ ^([^:]+:)?([^[:blank:]]*) ]] || return 1
  wipPrefix=${BASH_REMATCH[1]%:}
  wipSuffix=${BASH_REMATCH[2]}
  if [[ $wipHotfix == true ]]; then
    wipPrefix=${wipPrefix:-hotfix}
    if [[ $wipPrefix != 'hotfix' ]]; then
      io_error "option ${VC}--hotfix${Red} implies ${VC}$wipPrefix:$wipSuffix${Red}"
      return 1
    fi
  elif [[ $wipPrefix == 'hotfix' ]]; then
    wipHotfix=true
  fi
}
wip_init_wip()
{
  wipPrefix=$1
  wipSuffix=$2
  [[ $wipPrefix == 'hotfix' ]] && wipHotfix=true || true
}
wip_is_specified() { [[ -n $wipSuffix || -n $wipPrefix ]]; }
wip_set_default()  { wipPrefix=${wipPrefix:-wip}; wipSuffix=${wipSuffix:-work}; }

wip_run()
{
  # parse command line
  local jobsCount recursive command='wip' subcommand \
        cmdScopes=( prod_scope config_scope cosm_scope ) \
        wipHotfix mergeIntoDev wipPrefix wipSuffix wipModulePaths=()
        
  wip_parse "$@" || return $?

  local wipLabel
  if wip_is_specified; then
    case $subcommand in
      update|exit) io_error "too many arguments (${VC}$wipPrefix:$wipSuffix${Red})"
    esac
    wip_set_default
    wipLabel="$wipPrefix:$wipSuffix"
  else
    wipLabel='WIP'
  fi

  case $subcommand in
    start)   startupMessage="Starting ${Brown}$wipLabel${White}, please wait...";;
    enter)   startupMessage="Entering ${Brown}$wipLabel${White}, please wait...";;
    exit)    startupMessage="Exiting ${Brown}$wipLabel${White}, please wait...";;
    share)   startupMessage="Sharing ${Brown}$wipLabel${White}, please wait...";;
    release) startupMessage="Releasing WIP, please wait...";;
    update)  startupMessage="Updating WIP, please wait...";;
    finish)  startupMessage="Finishing WIP, please wait...";;
  esac

  bundle_scope wip_command
}
wip_command()
{
  # io_trace "wip_command -- $(print_vars subcommand wipHotfix wipPrefix wipSuffix wipModulePaths[@])"
  [ ${#wipModulePaths[@]} -eq 0 ] && wipModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${wipModulePaths[@]}"

  case $subcommand in
    start|update) cmd_register_module_paths false "$bundleRoot";;
    share)        cmd_register_module_paths true  "$bundleRoot";;
    enter)        cmd_set_recursive_if_registered "$bundleRoot" || cmd_register_module_paths false "$bundleRoot";;
    exit|finish)  cmd_set_recursive_if_registered "$bundleRoot";;
  esac

  cmd_visit_modules
}

#######
# START
#######

wip_start_prolog()
{
  if ! wip_is_specified; then
    wip_set_wip "$bundleHead" || wip_set_default
  fi

  local devBranch=$(wip_to_ref "$moduleDevBranch")
  local wipBranch=$(ref_to_wip "$devBranch" "$wipSuffix" "$wipPrefix")
  # io_trace "wip_start -- $(print_vars wipHotfix wipBranch devBranch moduleHead moduleDevBranch prodBranchPath)"
  if [[ $moduleHead != $wipBranch ]]; then
    if [[ $wipHotfix == true && -n $prodBranchPath ]]; then
      git branch "$wipBranch" "$prodBranchPath" &>/dev/null
    elif module_in_dev_mode; then
      git branch "$wipBranch" "$moduleHead" &>/dev/null
      # git branch "$wipBranch" "$moduleDevBranchPath" &>/dev/null
    else
      mio_warning "Use ${VC}git dev enter${Brown} to switch to development"
      return 1
    fi
  fi
  branch_checkout "$wipBranch" true
}
wip_start_epilog() { branch_show_status; }

#######
# ENTER
#######

wip_enter_prolog()
{
  if ! wip_is_specified; then
    wip_set_wip "$bundleHead" || wip_set_default
  fi

  local devBranch=$(wip_to_ref "$moduleDevBranch")
  local wipBranch=$(ref_to_wip "$devBranch" "$wipSuffix" "$wipPrefix")
  # checkout wip branch if it exists
  if [[ $moduleHead == $wipBranch ]]; then
    branch_checkout "$wipBranch" true
  elif branch_exists "$wipBranch"; then
    branch_checkout "$wipBranch" true
  elif module_is_bundle; then
    mio_error "SKU ${VC}$wipPrefix:$wipSuffix${Red} not found"
  fi
}
wip_enter_epilog() { branch_show_status; }

######
# EXIT
######

wip_exit_prolog()
{
  module_in_wip_mode || return 0

  local targetBranch
  [[ $wipHotfix == true ]] && targetBranch=$prodBranch || targetBranch=$(wip_to_ref "$moduleDevBranch")
  branch_checkout "$targetBranch" true
}
wip_exit_epilog() { branch_show_status; }

#######
# SHARE
#######

wip_share_epilog()
{
  _wip_enter_wip_mode || return 0

  branch_ensure_remote "$moduleDevBranch"
  branch_show_status
}

#########
# RELEASE
#########

wip_release_epilog()
{
  if wip_is_specified; then
    local targetWipPrefix=$wipPrefix targetWipSuffix=$wipSuffix
  fi
  _wip_enter_wip_mode || return 0
  # io_trace "wip_release_epilog 1 -- $(print_vars moduleHead wipPrefix wipSuffix targetWipPrefix targetWipSuffix)"
  _wip_merge $moduleHead _wip_release_merge_dev _wip_release_merge_prod true || return $?
  branch_show_status
}
_wip_release_merge_dev()
{
  local wipBranch=$1 mergeTarget=$2 devBranchPath=$3 devBranch=$4
  # io_trace "_wip_release_merge_dev -- $(print_vars wipBranch mergeTarget devBranchPath devBranch)"
  branch_merge_sync "$wipBranch" "$mergeTarget"
}
_wip_release_merge_prod()
{
  local wipBranch=$1 mergeTarget=$2 devBranchPath=$3 devBranch=$4
  # io_trace "_wip_release_merge_prod -- $(print_vars wipBranch mergeTarget devBranchPath devBranch)"
  branch_merge "$wipBranch" "$mergeTarget" \
  && _wip_merge_into_dev "$wipBranch" "$devBranchPath"
}

########
# UPDATE
########

wip_update_epilog()
{
  _wip_enter_wip_mode || return 0
  # io_trace "wip_update_epilog 1 -- $(print_vars moduleHead wipPrefix wipSuffix targetWipPrefix targetWipSuffix)"
  _wip_merge $moduleHead _wip_update_merge _wip_update_merge true || return $?
  branch_show_status
}
_wip_update_merge()
{
  local wipBranch=$1 mergeTarget=$2 devBranchPath=$3 devBranch=$4
  # io_trace "_wip_update_merge_dev -- $(print_vars wipBranch mergeTarget devBranchPath devBranch)"
  branch_merge "$mergeTarget" "$wipBranch"
}

########
# FINISH
########

wip_finish_epilog()
{
  if wip_is_specified; then
    local targetWipPrefix=$wipPrefix targetWipSuffix=$wipSuffix
  fi
  _wip_enter_wip_mode || return 0
  # io_trace "wip_finish 1 -- $(print_vars moduleHead)"
  _wip_merge $moduleHead _wip_finish_merge_dev _wip_finish_merge_prod || return $?
  branch_show_status
}
# scope: devBranch
_wip_finish_merge_dev()
{ 
  local wipBranch=$1 mergeTarget=$2 devBranchPath=$3 devBranch=$4
  # io_trace "_wip_finish_merge_dev -- $(print_vars wipBranch mergeTarget devBranchPath devBranch)"
  branch_merge "$wipBranch" "$mergeTarget" \
  && dev_checkout true "$devBranch" false \
  && branch_delete "$wipBranch"
}
# scope: devBranch
_wip_finish_merge_prod()
{
  local wipBranch=$1 mergeTarget=$2 devBranchPath=$3 devBranch=$4
  # io_trace "_wip_finish_merge_prod -- $(print_vars wipBranch mergeTarget devBranchPath devBranch)"
  branch_merge "$wipBranch" "$mergeTarget" \
  && _wip_merge_into_dev "$wipBranch" "$devBranchPath" \
  && branch_checkout "$prodBranch" true \
  && branch_delete "$wipBranch"
}

#########
# HELPERS
#########

# usage:
#   _wip_merge TO_MERGE DEV_ACTION PROD_ACTION
# in:
#   $1:devAction  wipBranch mergeTarget devBranchPath devBranch
#   $2:prodAction wipBranch mergeTarget devBranchPath devBranch
_wip_merge()
{
  local wipBranch=$1 devAction=$2 prodAction=$3 showStatusMessage=$4 mergeTarget action \
        devBranch branch lbranch bref

  devBranch=$(wip_to_ref "$wipBranch")
  if [[ -n $targetWipSuffix ]]; then
    devBranch=$(ref_to_wip "$devBranch" "$targetWipSuffix" "$targetWipPrefix")
  fi

  branch_set_realize "$devBranch" # -> branch, lbranch, bref
  if [ $? -eq 2 ]; then
    # branch does not exists
    branch_set_best_match_dev "$bundleDevBranch"  # -> branch, lbranch
  fi

  # a submodule can create a vbranch in the bundle without refreshing the prod scope (run in a subshell)
  module_is_bundle && _cmd_is_recursive && prod_reset_scope

  # try to determine merge target automatically - can be dev or prod
  # io_trace "_wip_merge -- $(print_vars wipBranch devBranch prodBranch)"
  if [[ $wipHotfix == true ]]; then
    if [[ -z $prodBranch ]]; then
      mio_error "No production branch found"
      return 1
    else
      action=$prodAction
      mergeTarget=$prodBranchPath
      cosm_commit_unstaged_clean_submodules
      # io_trace "_wip_merge PROD -- $(print_vars action wipBranch mergeTarget branch lbranch)"
    fi
  else
    action=$devAction
    mergeTarget=$branch
    # io_trace "_wip_merge DEV -- $(print_vars action wipBranch mergeTarget branch lbranch)"
  fi

  if [[ $showStatusMessage == true ]]; then
    local sha=$(git rev-parse "$mergeTarget")
    $action "$wipBranch" "$mergeTarget" "$branch" "$lbranch"
    if [[ $sha == $(git rev-parse "$mergeTarget") ]]; then
      if [[ $subcommand == update ]]; then
        mio_message "Already updated" ${LightBlue}
      else
        mio_message "Already released" ${LightBlue}
      fi
    fi
  else
    $action "$wipBranch" "$mergeTarget" "$branch" "$lbranch"
  fi
}
# out: wipPrefix, wipSuffix
_wip_enter_wip_mode()
{
  if module_in_wip_mode; then
    wip_init_wip "${bundleHead%%/*}" "${bundleHead##*/}"
  elif module_is_bundle; then
    mio_warning "Use ${VC}git wip enter${Brown} to switch to WIP mode"
    return 1
  else
    # infer module wip branch from bundle
    local wipBranch
    wipBranch=$(wip_to_wip $bundleHead)
    if [ $? -eq 0 ]; then
      wip_init_wip "${wipBranch%%/*}" "${wipBranch##*/}"
    else
      # bundle not in wip mode
      mio_warning "Use ${VC}git wip enter${Brown} to switch to WIP mode"
      return 1
    fi
    # io_trace "_wip_enter_wip_mode -- $(print_vars wipBranch wipPrefix wipSuffix)"
    local branch lbranch bref
    branch_set_realize "$wipBranch" && branch_checkout "$lbranch"
  fi
}
_wip_merge_into_dev()
{
  local wipBranch=$1 devBranchPath=$2
  [[ $mergeIntoDev == true ]] \
  && branch_merge    "$wipBranch" "$devBranchPath" \
  || branch_merge_ff "$wipBranch" "$devBranchPath" || true
}

wip_run  "$@"
