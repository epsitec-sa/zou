#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VTABLE ]] && . zoul-git-vtable
ZOUL_GIT_VTABLE=true

[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo

pad() { eval "printf '%.s-' {1..$1}"; }

print_row()
{
  # TODO: improve by computing the best width according to the longest string.
  # It needs to have two passes; the first one for computing, and the second
  # one for printing.
  printf "_ %-40s _ %-20s _ %-20s _ %-20s _ %-20s _ %-20s _ %-20s _ %-20s _\n" "$@"
}
print_head()
{
  print_row Module Head Hash Delta Version vminor vmajor vnext
  print_row :$(pad 39) :$(pad 19) :$(pad 19) :$(pad 19) :$(pad 19) :$(pad 19) :$(pad 19) :$(pad 19)
}
vtable_row()
{
  local moduleId=$1 setHash=${2:-true} \
        vminor vmajor hash \
        vtag delta alias head \
        branch lbranch bref

  branch_set_realize ${moduleHead:-$(branch_current)}
  head=${moduleHead:-$(ref_symbol HEAD)}

  [[ $setHash == true ]] && hash=$(git rev-parse --short HEAD 2>/dev/null)
  # io_trace "vtable_row 1 -- $(print_vars branch lbranch)"
  vtag_set_describe "$branch"
  # io_trace "vtable_row 2 -- $(print_vars branch lbranch vtag delta alias)"
  [ $delta -eq 0 ] && delta=''

  local IFS=' '
  local tags=$(git tag -l --sort=-v:refname)
  local folder major minor refolder
  if [[ $vtag =~ ^(.*/)?v([0-9]+)\.([0-9]+) ]]; then
    folder=${BASH_REMATCH[1]}
    major=${BASH_REMATCH[2]}
    minor=${BASH_REMATCH[3]}
    refolder=$(wildcard_to_regex $folder)
    vminor=$(echo $tags | grep -m1 "^${refolder}v$major\.$minor")
    vmajor=$(echo $tags | grep -m1 "^${refolder}v$major\.")
  fi
  local vnext=$(echo $tags | grep -m1 "^${refolder}v[0-9]")
  local md_moduleId=$moduleId
  local md_vtag=$vtag
  [[ $vtag =~ ^.*-@$ || -z $vtag || (( delta > 0 )) ]] && md_moduleId="##$moduleId##"
  [[ $vtag =~ ^.*-@$ ]] && md_vtag="##$vtag##"
  [[ $vtag == $vminor ]] && vminor='' || vminor="#$vminor#"
  [[ $vtag == $vmajor ]] && vmajor='' || vmajor="#$vmajor#"
  [[ $vtag == $vnext ]] && vnext='' || vnext="#$vnext#"
  # io_trace "vtable_row -- $(print_vars moduleId head hash vtag delta folder major minor vmajor vminor vnext)"
  local module_content=$(print_row "$md_moduleId" "$head" "$hash" "$delta" "$md_vtag" "$vminor" "$vmajor" "$vnext")
  echo "$module_content"
}
vtable_init()
{
  local root=$1 lookupPath=$2

  # create lookup
  if [[ "$PWD" == "$root" ]]; then
    declare -A lookup
    declare -p lookup >"$lookupPath"
  fi
}
vtable_update()
{
  local root=$1 moduleId=$2 lookupPath=$3 lookupGate=$4 commitVTable=$5
  # io_trace "vtable_update -- $(print_vars root moduleId lookupPath lookupGate commitVTable)"

  if [[ "$PWD" == "$root" ]]; then
    local IFS=$'\n'
    # deserialize lookup
    . "$lookupPath"

    # serialize header and root
    local file="$root/versions.md"
    print_head >"$file"
    vtable_row $moduleId false >>"$file"
    
    # serialize lookup values
    for moduleId in $(string_sort ${!lookup[@]}); do
      echo ${lookup[$moduleId]} >>"$file"
    done
    
    # replace '_' and '#' to '|' and '*'
    sed -i -E 's,_,|,g; s,#,\*,g' "$file"
    rm "$lookupPath"

    if [[ $commitVTable == true ]]; then
      git update-index --add -- "$file" &>/dev/null \
      && git commit -m "zou-flow: update version table" -- "$file" &>/dev/null
    fi
  else
    # create vtable row
    local value=$(vtable_row "$moduleId" true)

    lock_enter "$lookupGate"
    . "$lookupPath"                   # deserialize
    lookup[$moduleId]="$value"        # modify
    declare -p lookup >"$lookupPath"  # serialize
    lock_exit "$lookupGate"
  fi
}
