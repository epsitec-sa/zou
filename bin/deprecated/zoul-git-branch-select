#!/usr/bin/env bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select
ZOUL_GIT_BRANCH_SELECT=true

[[ -z $ZOUL_GIT_REF ]]         && . zoul-git-ref
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core


branch_ensure_attached()
{
  local sku=$1 lbranch vbranch vtag htag releaseStatus
  ! branch_is_attached && branch_set_select_auto "$sku" false false
}

# Select branch or vtag and return publish status
# - if checkout fails, display repo status
# - if checkout succeeds, push branch
#
# usage:
#  local branch lbranch vbranch vtag htag releaseStatus
#  branch_set_select_auto $sku $forceDev $forceCheckout $allowDuplicateTags
#
# in:
#   $1:sku=bundleDevBranch
#   $2:forceDev=false     -- force checkout of dev branch
#   $3:forceCheckout=true -- checkout even if already checked out (display already checked out message)
#   $4:allowDuplicateTags -- influence highest tag computation (false in submodule, true in bundle)
# out:
#   lbranch       -- best match branch (local name)
#   vbranch       -- associated version branch
#   vtag          -- nearest vtag (depends on skipVNodes value)
#   htag          -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   releaseStatus -- publish status
#                    error
#                    unreleasable
#                    released
#                    unreleased
#                    ffRelease
branch_set_select_auto()
{
  local sku=$1 forceDev=$2 forceCheckout=$3 allowDuplicateTags=$4 \
        delta alias status nextHead ec=0

  # io_trace "branch_set_select_auto 1 -- $(print_vars sku forceDev forceCheckout allowDuplicateTags)"
  if branch_set_sku_info "$sku" "$forceDev" "$allowDuplicateTags"; then # -> lbranch vbranch vtag htag delta alias status nextHead releaseStatus
    # io_trace "branch_set_select_auto 2 -- $(print_vars branch lbranch vbranch vtag htag nextHead alias status releaseStatus ec)"
    branch_checkout "$nextHead" "$forceCheckout" || ec=$?
  fi

  if [ $ec -ne 0 ]; then
    repo_require_clean_work_tree "Cannot switch to '$lbranch'"
  else
    branch_ensure_remote "$lbranch"
  fi

  return $ec
}
# Create SKU information
#
# usage:
#   local sku forceDev allowDuplicateTags
#   ...
#   local lbranch vbranch vtag htag delta alias status nextHead releaseStatus
#   branch_set_sku_info $sku $forceDev $allowDuplicateTags
# in:
#   $1:sku=bundleDevBranch
#   $2:forceDev=false     -- favour dev branch instead of vtag
#   $4:allowDuplicateTags -- influence htag computation (false in submodule, true in bundle)
# out:
#   lbranch       -- best match branch (local name)
#   vbranch       -- associated version branch
#   vtag          -- nearest vtag (depends on forceDev value)
#   htag          -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   delta         -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   alias         -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
#   status        -- vnode       -- nearest vtag is a vnode (branch was never released on this vbranch)
#                    vtag        -- nearest vtag is a vtag
#                    vtagMissing -- no vtag found (branch was never released)
#   nextHead      -- next ref to checkout (branch or tag if status == vtag && delta != 0)
#   releaseStatus -- error
#                    unreleasable
#                    released
#                    unreleased
#                    ffRelease
branch_set_sku_info()
{
  local sku=${1:-$bundleDevBranch} forceDev=${2:-false} allowDuplicateTags=$3 \
        skipVNodes branch

  [[ -z $sku ]] && sku=$(branch_current_root_branch)
  [[ $forceDev == true ]] && skipVNodes=false || skipVNodes=auto

  # io_trace "branch_set_sku_info 1 -- $(print_vars sku forceDev skipVNodes allowDuplicateTags)"
  if branch_set_select_info "$sku" "$skipVNodes" "$allowDuplicateTags"; then  # -> branch lbranch vbranch vtag htag delta alias status
    branch_set_publish_info "$lbranch" "$vtag" "$delta" "$status" "$forceDev" # -> nextHead releaseStatus
  fi
  [[ $lbranch =~ ^(sku/|master) ]] || nextHead=$lbranch
  # io_trace "branch_set_sku_info 2 -- $(print_vars forceDev branch lbranch vbranch vtag htag delta alias status nextHead releaseStatus)"
}
# Create selection information
#
# usage:
#   local branch lbranch vbranch vtag htag delta alias status
#   branch_set_select_info $sku $skipVNodes $allowDuplicateTags
#
# in:
#   $1:sku=bundleDevBranch
#   $2:skipVNodes=auto    -- (auto | true | *)
#                         -- auto - match vtag  then match vnode then fallback
#                         -- true - match vtag  then fallback
#                         -- *    - match vnode then fallback
#   $3:allowDuplicateTags -- false in submodule, true in bundle
# out:
#   branch    -- best match branch (local or remote)
#   lbranch   -- local branch name
#   vbranch   -- associated version branch
#   vtag      -- nearest vtag (depends on skipVNodes value)
#   htag      -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   delta     -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   alias     -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
#   status    -- vnode       -- nearest vtag is a vnode (branch was never released on this vbranch)
#                vtag        -- nearest vtag is a vtag
#                vtagMissing -- no vtag found (branch was never released)
branch_set_select_info()
{
  # io_trace "branch_set_select_info -- ${*@Q}"
  local sku=${1:-$bundleDevBranch}; shift
  branch_set_best_match_dev "$sku"               # -> branch lbranch
  branch_set_vtag_info "$branch" "$lbranch" "$@" # -> vbranch vtag htag delta alias status
  # io_trace "branch_set_select_info -- $(print_vars branch lbranch vbranch vtag htag delta status alias)"
}
# Create vtag information
#
# usage:
#   local vbranch vtag htag delta alias status
#   branch_set_vtag_info $branch $lbranch $skipVNodes $allowDuplicateTags
#
# in:
#   $1:branch             -- local or remote branch name
#   $2:lbranch            -- local branch name
#   $3:skipVNodes         -- (auto | true | *)
#                         -- auto - match vtag  then match vnode then fallback
#                         -- true - match vtag  then fallback
#                         -- *    - match vnode then fallback
#   $3:allowDuplicateTags -- false in submodule, true in bundle
# out:
#   vbranch   -- associated version branch
#   vtag      -- nearest vtag (depends on skipVNodes value)
#   htag      -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   delta     -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   alias     -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
#   status    -- vnode       -- nearest vtag is a vnode (branch was never released on this vbranch)
#                vtag        -- nearest vtag is a vtag
#                vtagMissing -- no vtag found (branch was never released)
branch_set_vtag_info()
{
  local branch=$1 lbranch=${2:-$1} skipVNodes=${3:-auto} allowDuplicateTags=$4
  [[ -z $allowDuplicateTags && -n $moduleRoot && $moduleRoot == $bundleRoot ]] && allowDuplicateTags=true
  # io_trace "branch_set_vtag_info -- ${*@Q}"
  vtag_set_describe "$branch" "$lbranch" "$skipVNodes" # -> vbranch vtag delta alias
  # io_trace "branch_set_vtag_info 1 -- $(print_vars branch lbranch vbranch skipVNodes allowDuplicateTags vtag delta alias)"
  if [[ -n $vtag ]]; then
    htag=$(vtag_highest $vbranch true)
    # io_trace "branch_set_vtag_info 2.1 -- $(print_vars branch vbranch vtag htag delta alias)"
    if [[ $htag != $vtag ]]; then
      # if ! git merge-base --is-ancestor "$branch" "$htag" >&2; then
      #   mio_message "Branch ${VC}$lbranch${Magenta} was never released as ${VC}$htag${Magenta}" ${Magenta}
      # fi
      vtag=$htag
      delta=$(( $(git rev-list --count $vtag..$branch) ))
      if [ $delta -eq 0 ]; then
        alias="$vtag" # (v2.0.0)
      elif [ $delta -gt 0 ]; then
        alias="> $vtag ($delta)" # (> v2.0.0 (8))
      else
        alias="< $vtag ($delta)" # (< v2.0.0 (8))
      fi
      # io_trace "branch_set_vtag_info 2.2 -- $(print_vars branch vbranch vtag htag delta alias)"
    fi
    [ $delta -ne 0 ] && alias="$lbranch $alias" # (master > v2.0.0 (8))

    if [[ $allowDuplicateTags != true ]]; then
      htag=$(vtag_highest $vbranch false)
    fi
    # vnode or vtag
    vtag_is_vnode $vtag && status='vnode' || status='vtag'
    # io_trace "branch_set_vtag_info 3 -- $(print_vars htag status alias)"
  else
    htag=''; status='vtagMissing'
    # compute alias without skipping vnodes
    if [[ $skipVNodes == true ]] && vtag_set_describe "$branch" "$lbranch" false; then
      [ $delta -ne 0 ] && alias="$branch $alias" # (master > v2.0.0 (8))
    else
      alias='<>'
    fi
    # io_trace "branch_set_vtag_info 4 -- $(print_vars status alias)"
  fi
}
# Create SKU info to merge dev into prod branch
#
# usage:
#   local branch lbranch vbranch vtag delta alias
#   branch_set_prod_info $sku
#
# in:
#   $1:sku=bundleDevBranch
# out:
#   branch    -- best match branch (local or remote)
#   lbranch   -- local branch name
#   vbranch   -- associated version branch
#   vtag      -- nearest vtag (depends on skipVNodes value)
#   delta     -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   alias     -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
branch_set_prod_info()
{
  # io_trace "dev_set_vbranch ${*@Q}"
  branch_set_best_match_dev "${1:-$bundleDevBranch}" # -> branch lbranch
  vtag_set_describe "$branch" "$lbranch" false # -> vbranch vtag delta alias
}

# Create SKU publish information
#
# usage:
#   local sku forceDev skipVNodes allowDuplicateTags
#   ...
#   local branch lbranch vbranch vtag htag delta alias status
#   branch_set_select_info $sku $skipVNodes $allowDuplicateTags
#
#   local nextHead releaseStatus
#   branch_set_publish_info $lbranch $vtag $delta $status $forceDev
# in:
#   $1:lbranch   -- local branch name
#   $2:vtag      -- nearest vtag
#   $3:delta     -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   $4:status    -- vnode       -- nearest vtag is a vnode (branch was never released on this vbranch)
#                   vtag        -- nearest vtag is a vtag
#                   vtagMissing -- no vtag found (branch was never released)
#   $5:forceDev -- force checkout of dev branch
# out:
#   nextHead      -- next head to checkout (branch or tag)
#   releaseStatus -- error
#                    unreleasable
#                    released
#                    unreleased
#                    ffRelease
branch_set_publish_info()
{
  local lbranch=$1 vtag=$2 delta=$3 status=$4 forceDev=$5
  # io_trace "branch_set_publish_info -- $(print_vars lbranch vtag status)"
  nextHead=$lbranch   # default branch to checkout
  releaseStatus='error'
  if [[ $status == 'vtagMissing' ]]; then
    # no vtag, stay in dev mode
    releaseStatus='unreleasable'
  elif [[ $status == 'vtag' ]]; then
    # released at least once on this vbrnach
    if [ $delta -eq 0 ]; then
      # head has not been moved since last publish, stay in dev mode
      releaseStatus='released'
    else
      # head has been moved since last publish
      # move to last vtag unless dev mode is forced
      if [[ $forceDev == true ]]; then
        [ $delta -gt 0 ] && releaseStatus='unreleased' || releaseStatus='ffRelease'
      else
        [ $delta -gt 0 ] && releaseStatus='released' || releaseStatus='ffRelease'
        nextHead=$vtag
      fi
    fi
  elif [[ $status == 'vnode' ]]; then
    # never released on this vbranch, stay in dev mode
    releaseStatus='unreleased'
  else
    mio_error "_branch_set_select_auto_core: status '$status' not implemented"
    return 1
  fi
  # io_trace "branch_set_publish_info -> $(print_vars nextHead releaseStatus)"
}
