#!/usr/bin/env bash

# SKU management
#
# root  -- startup module
# sm    -- descendant sub-modules
# >     -- branch pointer (dynamic)
# =     -- fixed commit (static)
#
# sku-mode  |   dev    |   prod   |   vdev   |   vprod   |
# ----------|----------|----------|----------|-----------|
# root      | > dev    | > prod   | >  dev   | >  prod   |
# - sm      | > dev    | > prod   | = vdev   | = vprod   |
# ----------|----------|----------|----------|-----------|
# work-mode | all-dev  | all-prod | one-dev  | one-prod  |
# ----------|----------|----------|----------|-----------|


# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_SKU ]] && . zoul-git-sku
ZOUL_GIT_SKU=true

[[ -z $ZOUL_CORE ]]       && . zoul-core
[[ -z $ZOUL_GIT_REF ]]    && . zoul-git-ref
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

branchChangedEvent+=( _sku_reset_scope )

# define SKU scope context
# usage: module_run sku_scope ...
sku_scope()
{
  local skuMode \
        dev_branch prod_branch \
        dev_vtag dev_delta \
        prod_vtag prod_delta \
        lastVersion

  _sku_init_scope

  # execute next russian doll
  $1 "${@:2}"
}
_sku_reset_scope()
{
  unset skuMode dev_branch prod_branch dev_vtag dev_delta prod_vtag prod_delta lastVersion
  _sku_init_scope
}
_sku_init_scope()
{
  _sku_set_sku_mode "$moduleBranch"

  case $skuMode in
    dev)  dev_branch=$moduleBranch;  _sku_set_dev_scope;  _sku_set_prod_scope;;
    prod) prod_branch=$moduleBranch; _sku_set_prod_scope; _sku_set_dev_scope;;
  esac
  
  if [[ $dev_vtag != $prod_vtag ]]; then
    io_warning "Last development vtag '$dev_vtag' is different from last production vtag '$prod_vtag'" "$moduleTracePrefix"
  fi
  lastVersion=$(vtag_highest $prod_branch)  # exclude vnode

  io_trace "_sku_init_scope ${*@Q} -> $(print_vars skuMode dev_branch prod_branch lastVersion dev_vtag prod_vtag dev_delta prod_delta)"
}
# out:
#   skuMode -- (dev|prod)
_sku_set_sku_mode()
{
  [[ $1 =~ ^(.*/)?[0-9]+\.[0-9]+$ ]] && skuMode='prod' || skuMode='dev'
}
_sku_set_dev_scope()
{
  io_trace "_sku_set_dev_scope ${*@Q}" Purple
  # set vtag context
  local ltag stag lsuf delta
  _sku_describe_vtag_fallback $dev_branch
  [ $? -ne 0 ] && return 1 # no vtag
  dev_vtag=$stag
  dev_delta=$delta

  [[ -z $prod_branch ]] && {
    local vbranch
    _sku_set_vbranch_name "$stag"
    local lbranch rbranch
    _sku_realize_branch "$vbranch"
    [ $? -ne 0 ] && return 2 # no vbranch
    prod_branch=$lbranch
  }
  io_trace "_sku_set_dev_scope ${*@Q}" Green
}
_sku_set_prod_scope()
{
  io_trace "_sku_set_prod_scope ${*@Q}" Purple
  # set vtag context
  local ltag stag lsuf delta
  _sku_describe_vtag_fallback $prod_branch
  [ $? -ne 0 ] && return 1 # no vtag
  prod_vtag=$stag
  prod_delta=$delta

  [[ -z $dev_branch ]] && {
    local branch
    _sku_set_best_match_dev_branch $bundleBranch $prod_vtag
    [ $? -ne 0 ] && return 1 # no dev branch
    io_trace "_sku_set_prod_scope ${*@Q} -> $(print_vars branch)"
    local lbranch rbranch
    _sku_realize_branch "$branch"
    io_trace "_sku_set_prod_scope ${*@Q} -> $(print_vars lbranch rbranch)"
    [ $? -ne 0 ] && return 2 # no dev branch
    dev_branch=$lbranch
  }
  io_trace "_sku_set_prod_scope ${*@Q}" Green
}
# in:
#   $1 (branch) -- module branch (dev|prod)
#   $2 (fhint)  -- fallback hint branch (bundleBranch | moduleBranch)
# out:
#   ltag -- long  tag
#   stag -- short tag
#   lsuf -- tag suffix
#   delta -- commits between branch and tag
_sku_describe_vtag()
{
  io_trace "_sku_describe_vtag ${*@Q}" Purple
  local branch=$1 fhint=$2 ftag
  delta=0
  for ftag in $(ref_tag_fallback $fhint 'v[0-9]*'); do
    ltag=$(git describe --tags --match "$ftag" --exclude 'other/*' "$branch" 2>"$stderrRedir")
    if [[ -n $ltag ]]; then
      stag=${ltag%-*-g*}
      lsuf=${ltag#$stag}
      [[ -n $lsuf && $lsuf =~ ^-([0-9]+)-g.*$ ]] && delta=${BASH_REMATCH[1]}
      io_trace "_sku_describe_vtag ${*@Q} -> $(print_vars ltag stag lsuf delta)"
      return 0
    fi
  done
  unset ltag stag lsuf
  return 1
}
_sku_describe_vtag_fallback()
{
  io_trace "_sku_describe_vtag_fallback ${*@Q}" Gray
  _sku_describe_vtag $1 $bundleBranch || _sku_describe_vtag $1 $1
}
# in:
#   vtag
# out:
#   vbranch
_sku_set_vbranch_name()
{
  if [[ $1 =~ ^(.*/)?v([0-9]+)\.([0-9]+)(\.|-) ]]; then
    local prefix=${BASH_REMATCH[1]}
    local major=${BASH_REMATCH[2]}
    local minor=${BASH_REMATCH[3]}
    vbranch=${prefix}$major.$minor;
  fi
}
# Check if a given branch name exists and convert it to its remote counterpart if it does not exist
# Display error and return empty if branch is unknown
# in:
#   branch
# out:
#   lbranch -- local branch
#   vbranch -- remote branch
_sku_realize_branch()
{
  io_trace "_sku_realize_branch ${*@Q}" Purple
  if git show-ref -s --verify "refs/heads/$1" &>"$stdallRedir"; then
    # local branch
    lbranch=$1
    rbranch=$(git rev-parse --abbrev-ref --symbolic-full-name $1@{u} 2>"$stderrRedir")
  elif git show-ref -s --verify "refs/remotes/$1" &>"$stdallRedir"; then
    # remote branch
    rbranch=$1
    lbranch=${rbranch#*/}
  else
    # assume its a deleted local branch with an existing remote branch
    rbranch=$(git for-each-ref --format='%(refname:short)' refs/remotes 2>"$stderrRedir" | grep -E "^[^/]+/$1$")
    if [[ $? -eq 0 ]]; then
      lbranch=${rbranch#*/}
    else
      return 1
    fi
  fi
  io_trace "_sku_realize_branch ${*@Q}" Green
}
# in:
#   $1 (fhint) -- fallback hint
#   $2 (vtag)  -- vtag to match
# out:
#   branch
_sku_set_best_match_dev_branch()
{
  local patterns=$(ref_dev_fallback $1) vtag=$2 \
        branches=( $(branch_list_local | grep -Ev '^(other/.*|(.*/)?[0-9]+\.[0-9]+)$') ) \
        remoteIndex=${#branches[@]}
        
  branches+=( $(branch_list_remote_untracked | grep -Ev '^([^/]+/other/.*|(.*/)?[0-9]+\.[0-9]+)$') )
  local pattern i lbranch ltag stag lsuf delta
  # try to find a branch matching bundle branch name
  for pattern in $patterns; do
    for i in ${!branches[@]}; do
      branch=${branches[i]}
      if (( $i < $remoteIndex )); then
        lbranch=$branch
      else
        lbranch=${branch#*/}
      fi
      io_trace "_sku_set_best_match_dev_branch ${*@Q} -> $(print_vars pattern i branch lbranch)"
      if [[ $lbranch == $pattern ]]; then
        _sku_describe_vtag_fallback $branch
        if [ $? -eq 0 ] && [[ $stag == $vtag ]]; then
          io_trace "_sku_set_best_match_dev_branch ${*@Q} -> $(print_vars stag vtag)"
          return 0
        fi
      fi
    done
  done
  unset branch
  return 1
}


