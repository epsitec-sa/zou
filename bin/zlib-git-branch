#! /bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

. zlib-git-repo

branch_current()     { git rev-parse --abbrev-ref HEAD; }
branch_list_local()  { git for-each-ref --format='%(refname:short)' refs/heads/*; }
branch_list_remote() { git for-each-ref --format='%(refname:short)' refs/remotes/origin/*; }
branch_list_all()    { branch_list_local; branch_list_remote; }
branch_list_all_at() { git show-ref | grep $(git rev-parse ${1:-HEAD}) | cut -d ' ' -f2 | grep -v '^refs/tags/' | sed 's,^refs/[^/]*/,,'; }
branch_upstream()    { git rev-parse --abbrev-ref $1@{upstream} 2>/dev/null; }
branch_sync_info()   { git for-each-ref --format="%(refname:short) %(upstream:short) %(upstream:trackshort)" refs/heads "$@"; }

branch_merge_in_memory()
{
  local r=$1 l=$2 mbase=$(git merge-base $r $l)
  git merge-tree $mbase $l $r
}
branch_check_merge_conflicts()
{
  local conflicts=$(branch_merge_in_memory "$@")
  echo "$conflicts" | grep -q -E '^[+-\ ]>{7}' && {
    io_error "while auto-merging $r into $l."
    io_message >&2 "$(echo "$conflicts" | sed 's/^/  /')" '' Red
    io_message >&2 "  merge manually, resolve conflicts and run 'git commit'." '' Yellow
    return 1
  }
}

branch_push()
{
  local r=$1 l=$2
  git push ${r%%/*} $l &>/dev/null
}
branch_pull()
{
  local r=$1 l=$2 ec=0
  # try fast-forward merge
  git fetch ${r%%/*} $l:$l &>/dev/null || {
    # check if there is merge conflicts
    branch_check_merge_conflicts $r $l && {
      # no conflict detected; do real merge
      git checkout $l &>/dev/null || ec=$?
      git pull ${r%%/*} $l &>/dev/null || ec=$?
      git checkout - &>/dev/null || ec=$?
    }
  }
  (( $ec == 0 )) || io_error "while pulling $r branch"
  return $ec
}
branch_sync()
{
  local r=$1 l=$2
  branch_pull $r $l && branch_push $r $l
}

branch_sync_all()
{
#   io_info branch_sync_all
  local moduleId=$(repo_module_id)
  repo_require_clean_work_tree "synchronize [$moduleId]" || return 1
  git fetch --prune --all &>/dev/null
  while read l r i; do
    case $i in
      '>')  color=Brown;;  # ahead
      '<')  color=Yellow;; # behind
      '<>') color=Yellow;; # ahead and behind
      '=')  color=Green;;
    esac
    io_message "$l $i $r" "[$moduleId] synchronizing" $color
    case $i in
      '>')  branch_push $r $l || return 1;; # ahead
      '<')  branch_pull $r $l || return 1;; # behind
      '<>') branch_sync $r $l || return 1;; # ahead and behind
    esac
  done < <(branch_sync_info)
}

# https://stackoverflow.com/questions/3216360/merge-update-and-pull-git-branches-without-using-checkouts
branch_merge_ff() {
    local branch=$1
    local commit=$2

    local branch_orig_hash=$(git show-ref -s --verify refs/heads/$branch 2>/dev/null)
    if [ $? -ne 0 ]; then
        io_error "unknown branch $branch"
        return 1
    fi

    local commit_orig_hash="$(git rev-parse --verify $commit 2> /dev/null)"
    if [ $? -ne 0 ]; then
        io_error "unknown revision $commit"
        return 1
    fi

    if [ "$(git symbolic-ref HEAD)" = "refs/heads/$branch" ]; then
        git merge --ff-only "$commit"
    else
        if [ "$(git merge-base $branch_orig_hash $commit_orig_hash)" != "$branch_orig_hash" ]; then
            io_error "merging $commit into $branch would not be a fast-forward"
            exit 1
        fi
        io_info "Updating ${branch_orig_hash:0:7}..${commit_orig_hash:0:7}"
        if git update-ref -m "merge $commit: Fast forward" "refs/heads/$branch" "$commit_orig_hash" "$branch_orig_hash"; then
            if [ -z $quiet ]; then
                echo "Fast forward"
                git diff --stat "$branch@{1}" "$branch"
            fi
        else
            io_error "fast forward using update-ref failed"
        fi
    fi
}