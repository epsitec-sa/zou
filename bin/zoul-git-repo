#!/bin/bash
# http://schacon.github.io/git/git.html
# https://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git/2658301

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_REPO ]] && . zoul-git-repo
ZOUL_GIT_REPO=true

[[ -z $ZOUL_CORE ]] && . zoul-core

repo_list_submodules() { git config --file .gitmodules --get-regexp path | cut -d' ' -f2; }
repo_list_deleted()    { git ls-files --deleted; }
repo_list_unstaged()   { git diff-files --name-only -r --ignore-submodules --; }
repo_list_uncommited() { git diff-index --cached --name-only -r --ignore-submodules HEAD --; }
repo_list_unmerged()   { git diff --name-only --diff-filter=U --ignore-submodules | cut -f1; }
repo_is_merging()      { git merge HEAD &>/dev/null && return 1 || return 0; }

repo_is_root()             { [[ -d "${1:-.}/.git" ]]; }
repo_is_submodule()        { [[ -f "${1:-.}/.git" ]]; }
repo_is_submodule_level1() { repo_is_submodule "$1" && repo_is_root "${1:-.}/.." ]]; }

repo_list_unstaged_submodules()
{
  local x
  OIFS=$IFS; IFS=$'\n'
  for x in $(git diff-files --name-only -r); do
    repo_is_submodule "$x" && echo $x
  done
  IFS=$OIFS
}
repo_commit_submodules()
{
  local unstaged=( $(repo_list_unstaged_submodules) )
  [ ${#unstaged[@]} -eq 0 ] && return 1
  local cslist=$(string_join ', ' "${unstaged[@]}")
  local message="USMR: $cslist"
  git commit -m "$message" -- "${unstaged[@]}" >/dev/null
  io_warning "$cslist" "[$(repo_module_id)] commited"
}
repo_list_untracked()
{
  local x
  OIFS=$IFS; IFS=$'\n'
  for x in $(git ls-files --exclude-standard --others); do
    repo_is_submodule "$x" || echo $x
  done
  IFS=$OIFS
}
repo_list_dangling_submodules()
{
  local x
  OIFS=$IFS; IFS=$'\n'
  for x in $(git ls-files --exclude-standard --others); do
    repo_is_submodule "$x" && echo $x
  done
  IFS=$OIFS
}
repo_remove_dangling_submodules() { repo_list_dangling_submodules | xargs -I{} rm -rf "{}"; }

repo_bundle_dir()
{
  local dir=$(realpath ${1:-.})
  while [[ -n "$dir" && ! -d "$dir/.git" ]]; do
    dir=${dir%/*}
  done
  [[ -z $dir ]] && return 1
  echo $dir
}
repo_module_dir()
{
  local dir=$(realpath ${1:-.})
  while [[ -n "$dir" ]]; do
    if [[ -f "$dir/.git" || -d "$dir/.git" ]]; then
      echo $dir
      return 0
    fi
    dir=${dir%/*}
  done
  return 1
}
repo_module_and_bundle_dirs()
{
  local dir=$(realpath ${1:-.}) mdir bdir
  while [[ -n "$dir" ]]; do
    if [[ -z "$mdir" && -f "$dir/.git" ]]; then
      mdir=$dir
      echo "$mdir"
    fi
    if [[ -d "$dir/.git" ]]; then
      if [[ -z "$mdir" ]]; then
        mdir=$dir
        echo "$mdir"
      fi
      bdir=$dir
      echo "$bdir"
      return 0
    fi
    dir=${dir%/*}
  done
  return 1
}
repo_bundle_relative_to_path()
{
  local path=${1:-.} bdir
  bdir=$(repo_bundle_dir "$@")
  [ $? -ne 0 ] && return 1
  echo $(realpath --relative-to="$path" "$bdir")
}
repo_module_relative_to_path()
{
  local path=${1:-.} mdir
  mdir=$(repo_module_dir "$@")
  [ $? -ne 0 ] && return 1
  echo $(realpath --relative-to="$path" "$mdir")
}
repo_url_from_dir()
{
  cd "${1:-.}"
  local url=$(git config remote.origin.url)
  cd - >/dev/null
  echo $url
}
repo_module_id()
{
  local dirs
  dirs=( $(repo_module_and_bundle_dirs "$@") )
  [ $? -ne 0 ] && return 1
  local mdir=${dirs[0]} bdir=${dirs[1]}
  if [[ $mdir == $bdir ]]; then
    echo ${bdir##*/}
  else
    echo ${mdir#$bdir/}
  fi
}
repo_bundle_id()
{
  local dir
  dir=$(repo_bundle_dir)
  [ $? -ne 0 ] && return 1
  echo ${dir##*/}
}

repo_update_submodules()
{
  local moduleId recursive
  while [[ "$#" > 0 ]]; do case "$1" in
    --recursive) recursive=$1;;
    *) moduleId=$1;;
  esac; shift; done
  local submodules=( $(repo_list_submodules) )
  if [ ${#submodules[@]} -ne 0 ]; then
    [[ -z $moduleId ]] && moduleId=$(repo_module_id)
    io_info 'updating submodules...' "[$moduleId]"
    git submodule update --init $recursive
  fi
}
repo_require_clean_work_tree () {
    # io_info >&2 "repo_require_clean_work_tree"
    local prefix="$*"
    [[ $prefix =~ ^\[ ]] || prefix="[$(repo_module_id)] $prefix"
    local err=0

    # Update the index
    if ! git update-index -q --ignore-submodules --refresh &>/dev/null; then
        io_error 'your have unmerged paths.' "$prefix"
        io_error "$(repo_list_unmerged)" '%2s'
        io_info  "resolve conflicts and run 'git commit'." '%2s'
        return 1
    fi

    # Disallow untracked changes in the working tree
    if ! test -z "$(repo_list_untracked)"; then
        io_error 'your work tree contains untracked changes.' "$prefix"
        io_error "$(repo_list_untracked)" '%2s'
        io_info  "run 'git add'" '%2s'
        err=1
    fi

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --; then
        io_error 'you have unstaged changes.' "$prefix"
        io_error "$(repo_list_unstaged)" '%2s'
        io_info  "run 'git stash' or 'git add' and 'git commit'." '%2s'
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --; then
        io_error 'your index contains uncommitted changes.' "$prefix"
        io_error "$(repo_list_uncommited)" '%2s'
        io_info  "run 'git commit'." '%2s'
        err=1
    fi

    return $err
}