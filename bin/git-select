#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]        && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

select_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; args+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -j*)                jobsCount=${1#-j};;
    .)                  unset recursive;;
    -a|--all)           noSkuFilter=true;;
    --dev)              selectDev=true;;
    --cosm)             commitSubmodules=true;;
    -*) io_error "unknown option '$1'"; return 1;;
    *) sku=$1;;
  esac; shift; done
}
select_run()
{
  # parse command line
  local jobsCount stopOnError noSkuFilter selectDev commitSubmodules sku recursive=true
  select_parse "$@" || return $?

  local selectScopes=( config_scope cosm_scope )
  
  startupMessage="Selecting, please wait..."

  module_run "${selectScopes[@]}" select_main
}
select_main()
{
  local ec=0
  select_set_sku
  if [[ "$moduleRoot" == "$bundleRoot" || $sku == $bundleBranch ]]; then
    select_tree
  else
    module_visit "$bundleRoot" "${selectScopes[@]}" select_tree
  fi
}
select_set_sku()
{
  if [[ -z $sku ]]; then
    sku=$bundleBranch
  elif [[ "$moduleRoot" == "$bundleRoot" ]]; then
    select_set_sku_core
  else
    cd "$bundleRoot"
    select_set_sku_core
    cd "$moduleRoot"
  fi
}
select_set_sku_core()
{
  branch_exists "$sku" && return 0
  local candidates=() resku="^(.*/)?$(wildcard_to_regex "$sku")(/.*)?$"
  for branch in $(branch_list_all_flatten); do
    [[ $branch =~ /[0-9]+\.[0-9]+.*$ ]] && continue   # skip prod branches
    [[ $branch =~ $resku ]] && candidates+=( "$branch" )
  done
  case ${#candidates[@]} in
    0) io_error "SKU ${Brown}$sku${Red} does not exist." "fatal"; exit 1;;
    1) sku=${candidates[0]};;
    *) io_error "SKU ${Brown}$sku${Red} is ambiguous, use one of (${Brown}$(string_join ', ' "${candidates[@]}")${Red})"; exit 1;;
  esac
}
select_tree()
{
  # io_trace "select_tree $(print_vars sku selectDev)"
  repo_discard_internal_ignore_list

  select_prolog || return $?
  [[ $recursive == true ]] && select_submodules || return $?
  cosm_process_unstaged_submodules
}
select_prolog()
{
  local forceDev=${selectDev:-false} allowDuplicateTags=false
  if [[ $moduleRoot == $bundleRoot ]]; then
    forceDev=true
    allowDuplicateTags=true
  fi

  # io_trace "select_prolog -- $(print_vars recursive noSkuFilter commitSubmodules sku hint forceCheckout skipVNodes allowDuplicateTags)"
  local lbranch vbranch vtag htag publishStatus
  branch_set_select_auto "$sku" "$forceDev" true "$allowDuplicateTags"
}
select_submodules()
{
  module_visit_submodules_async 'configSelectInclude[@]' "${selectScopes[@]}" 'select_tree'
}

select_run  "$@"
