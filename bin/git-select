#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_PROCESS ]]           && . zoul-process
[[ -z $ZOUL_GIT_CONFIG_SKU ]]    && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]] && . zoul-git-config-select
[[ -z $ZOUL_GIT_BRANCH_CORE ]]   && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

select_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; args+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -q|--quiet)         quiet=true;;
    -e|--stop-on-error) stopOnError=true;;
    -a|--all)           noSkuFilter=true;;
    --dev)              hint='dev';;
    --prod)             hint='prod';;
    -j*)                jobsCount=${1#-j};;
    -*) io_error "unknown option '$1'"; return 1;;
    *) sku=$1;;
  esac; shift; done
}
select_run()
{
  # parse command line
  local jobsCount quiet stopOnError noSkuFilter hint sku
  select_parse "$@" || return $?

  local useLongModuleTracePrefix=true
  
  module_run select_main
}
select_main()
{
  local ec=0
  [[ -z $sku ]] && sku=$bundleBranch
  select_tree
}
select_tree()
{
  repo_require_clean_work_tree 'cannot select' || return 1

  # trace_method 'select_tree' "$global_variable_names"
  local ec=0 branch
  branch=$(branch_select "$sku" "$hint") || ec=$?
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  select_submodules "$branch" || ec=$?
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  return $ec
}
select_submodules_enumerator()
{
  local include=( $(config_select_list_included "$moduleBranch" "$configFile") )
  array_remove_array 'include[@]' 'exclude[@]'
}
select_need_update_enumerator()
{
  local include=( $(config_select_list_excluded "$branch" "$configFile") )
  array_remove_array 'include[@]' 'exclude[@]'
}
select_discard_enumerator()
{
  local include=( $(repo_list_unstaged_clean_submodules) )
  array_intersect_array 'include[@]' 'exclude[@]'
}
select_discard_submodule()
{
  local path=$1
  git submodule update --recursive "$path" &>/dev/null
  io_info "Discarded submodule '$path'" "[$moduleId]"
}
select_submodules()
{
  local configFile exclude=()
  configFile=$(repo_zouflow_path "$moduleRoot") || return $?
  if [[ $noSkuFilter != true ]]; then
    exclude=( $(config_sku_list_excluded "$moduleBranch" "$configFile") )
  fi

  local ec=0
  module_visit_submodules_async select_submodules_enumerator select_tree || ec=$?
  
  # update active submodules which are excluded from select
  visit_async select_need_update_enumerator repo_update_submodule || ec=$?

  # discard inactive submodules
  visit_async select_discard_enumerator select_discard_submodule || ec=$?

  repo_commit_clean_submodules || true
}

select_run  "$@"
