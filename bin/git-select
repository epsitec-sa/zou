#!/bin/bash

[[ -z $ZOUL_GIT_CONFIG_SKU ]]    && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]] && . zoul-git-config-select
[[ -z $ZOUL_GIT_BRANCH_CORE ]]   && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

# cd '/mnt/c/devel/cresus-tmp'

jobsCount=16
while [[ "$#" > 0 ]]; do case "$1" in
  --) shift; args+=("$@"); break;;
  -h|--help) zou-help $0; exit 0;;
  -q|--quiet)         quiet=true;;
  -e|--stop-on-error) stopOnError=true;;
  -a|--all)           all=true;;
  -j*)                jobsCount=${1#-j};;
  -*) echo "unknown option: $1" >&2; exit 1;;
  *) sku=$1;;
esac; shift; done

trap "kill 0" SIGINT

global_variable_names='sku quiet stopOnError all startupDir'

process_error()
{
  local ec=$1
  [[ $ec -ne 0 && $stopOnError == true ]] && exit $ec || return 0
}
select_submodules()
{
  local branch=$1 configFile skuExclude include exclude path mroot=$PWD
  configFile=$(repo_zouflow_path "$mroot") || return $?
  [[ $all == true ]] && skuExclude=() || skuExclude=( $(config_sku_list_excluded "$branch" "$configFile") )
  # select active submodules which are included in select
  include=( $(config_select_list_included "$branch" "$configFile") )
  include=$(array_remove_array 'include[@]' 'skuExclude[@]')
  [[ -z $include ]] && return 0
  for path in $(string_sort $include); do
    (
      cd "$mroot/$path" &>/dev/null || {
        io_error "cd $mroot+$path" "[$moduleId]"
        return 1
      }
      select_tree "$sku" || return $?
    ) &
    if (( $(wc -w <<<$(jobs -p)) % $jobsCount == 0 )); then wait; fi
  done
  wait
  
  cd "$mroot"
  
  # update active submodules which are excluded from select
  exclude=( $(config_select_list_excluded "$branch" "$configFile") )
  exclude=$(array_remove_array 'exclude[@]' 'skuExclude[@]')
  if [[ -n $exclude ]]; then
    for path in $(string_sort $exclude); do
      ( repo_update_submodule "$path" ) &
      if (( $(wc -w <<<$(jobs -p)) % $jobsCount == 0 )); then wait; fi
    done
    wait
  fi

  # discard inactive submodules
  local unstaged=( $(repo_list_unstaged_clean_submodules) )
  unstaged=$(array_intersect_array 'unstaged[@]' 'skuExclude[@]')
  if [[ -n $unstaged ]]; then
    for path in $(string_sort $unstaged); do
      (
        git submodule update --recursive "$path" &>/dev/null
        io_info "Discarded submodule '$path'" "[$moduleId]"
      ) &
      if (( $(wc -w <<<$(jobs -p)) % $jobsCount == 0 )); then wait; fi
    done
    wait
  fi

  repo_commit_submodules || true
}
select_tree()
{
  # trace_method 'select_tree' "$global_variable_names"
  [[ $quiet == true ]] || echo Entering "'$(path_make_relative '.' "$startupDir")'"
  local branch moduleId=$(repo_module_id)
  branch=$(branch_select "$sku") || return $?
  select_submodules "$branch" || return $?
}

startupDir=$PWD
[[ -z $sku ]] && sku=$(branch_current_root_branch)
cd "$(repo_module_root)"

select_tree || process_error $?
