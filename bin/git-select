#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]        && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

select_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; args+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -e|--stop-on-error) stopOnError=true;;
    -j*)                jobsCount=${1#-j};;
    .)                  unset recursive;;
    -a|--all)           noSkuFilter=true;;
    --dev)              selectHint='dev';;
    --cosm)             commitSubmodules=true;;
    -*) io_error "unknown option '$1'"; return 1;;
    *) sku=$1;;
  esac; shift; done
}
select_run()
{
  # parse command line
  local jobsCount stopOnError noSkuFilter selectHint='pub' commitSubmodules sku recursive=true
  select_parse "$@" || return $?

  local useLongModuleTracePrefix=true \
        showSwitchingMessage=true \
        selectScopes=( config_scope )
  
  [[ $commitSubmodules == true ]] && selectScopes+=( cosm_scope )
  
  module_run "${selectScopes[@]}" select_main
}
select_main()
{
  local ec=0
  [[ -z $sku ]] && sku=$bundleBranch
  select_tree
}
select_tree()
{
  repo_require_clean_work_tree 'Cannot select' || return 1

  # io_trace "select_tree $(print_vars recursive noSkuFilter selectHint commitSubmodules sku)"
  local ec=0
  if [[ "$PWD" == "$bundleRoot" || $selectHint == 'dev' ]]; then
    branch_select "$sku" "dev" true >/dev/null || ec=$?
  else
    branch_select_vtag $(branch_best_match "$sku") 'dev' true >/dev/null || ec=$?
  fi
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec

  # traverse submodules
  [[ $recursive == true ]] && {
    select_submodules || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  }
  
  [[ $commitSubmodules == true ]] && cosm_process_unstaged_submodules

  return $ec
}
select_submodules()
{
  module_visit_submodules_async 'configSelectInclude[@]' "${selectScopes[@]}" 'select_tree'
}

select_run  "$@"
