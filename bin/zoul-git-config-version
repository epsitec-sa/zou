#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version
ZOUL_GIT_CONFIG_VERSION=true

[[ -z $ZOUL_CORE ]]     && . zoul-core
[[ -z $ZOUL_GIT_CORE ]] && . zoul-git-core

version_parse()
{
  local version=$1 varray=()
  if [[ $version =~ ^(.*/)?v([0-9]+)\.([0-9]+)\.([0-9]+)(-[[:alnum:]]+)?(\+.+)?$ ]]; then
    echo ${BASH_REMATCH[0]} ${BASH_REMATCH[@]:2}  # skip prefix
  else
    io_error "'$1' - bad version format"
    return 1
  fi
}
version_technical()       { shift; echo "${1}.${2}.${3}.$(date +%y%V)${4}${5}"; }
version_technical_short() { shift; echo "${1}.${2}.${3}.$(date +%y%V)"; }
version_commit_files()
{
  local techver=$1; shift
  [ $# -ne 0 ] && {
    git_commit "update technical version to $techver" "$@" \
    && mio_success "Updated technical version to ${VC}$techver${NC}"
  }
}

# Update Version tags in *.csproj file
# Add yyww field, skip prerelease and meta
#
# Example:
#   version_update_csproj sku/sal/v1.2.3-rc1+meta
#
# *.csproj format:
# <ApplicationVersion>1.2.3.1926</ApplicationVersion>
version_update_csproj()
{
  local file=$1 stechver=$4 script="\
  0,/<ProductVersion>/{s,(<ProductVersion>).*(</ProductVersion>),\1$stechver\2,};\
  0,/<ApplicationVersion>/{s,(<ApplicationVersion>).*(</ApplicationVersion>),\1$stechver\2,}"

  # io_trace "version_update_csproj -- $(print_vars file stechver)"

  ised "$file" "$script"
}
# Update Version tag in AssemblyInfo.cs file
# Add yyww field, skip prerelease and meta
#
# Example:
#   version_update_assembly_info sku/sal/v1.2.3-rc1+meta
#
# AssemblyInfo.cs format:
# [assembly: AssemblyVersion ("1.2.3.1926")]
# [assembly: AssemblyFileVersion ("1.2.3.1926")]
version_update_assembly_info()
{
  local file=$1 stechver=$4 script="\
  s,^(\[assembly:[[:blank:]]*AssemblyVersion[[:blank:]]*\(\").*(\"\)\]),\1$stechver\2,;\
  s,^(\[assembly:[[:blank:]]*AssemblyFileVersion[[:blank:]]*\(\").*(\"\)\]),\1$stechver\2,"

  # io_trace "version_update_assembly_info -- $(print_vars file stechver)"

  ised "$file" "$script"
}
# Update Version tag in Version.props XML file
# Add yyww field
#
# Example:
#   version_update_version_props sku/sal/v1.2.3-rc1+meta
#
# Version.props format:
# ...
#       <Version>1.2.3.1926-rc1+meta</Version>
# ...
version_update_version_props()
{
  local file=$1 techver=$3 script="\
  s,(<Version>).*(</Version>),\1$techver\2,;\
  s,(<AssemblyVersion>).*(</AssemblyVersion>),\1$techver\2,"

  # io_trace "version_update_version_props -- $(print_vars file techver)"

  ised "$file" "$script"
}
# Update Version tag in package.json file
# Add yyww field, skip prerelease and meta
#
# Example:
#   version_update_package_json sku/sal/v1.2.3-rc1+meta
#
# package.json format:
# ...
#   "version": "1.2.3.1926",
# ...
version_update_package_json()
{
  local file=$1 varray=( ${!2} ) techver script
  techver=${varray[1]}.${varray[2]}.${varray[3]}${varray[4]}

  script="\
  0,/^[[:blank:]]*\"version\"/{s/(^[[:blank:]]*\"version\":[[:blank:]]*\").*(\",?)/\1$techver\2/}"

  # io_trace "version_update_package_json -- $(print_vars file varray[@] techver)"

  ised "$file" "$script"
}
# Update Version tag in C++ resource file
# Add yyww field, skip prerelease and meta
#
# Example:
#   version_update_rc sku/sal/v1.2.3-rc1+meta
#
# .rc format:
# ...
#  FILEVERSION 1,2,3,1926
#  PRODUCTVERSION 1,2,3,1926
# ...
#             VALUE "FileVersion", "1.2.3.1926"
#             VALUE "ProductVersion", "1.2.3.1926"
# ...
version_update_rc()
{
  local file=$1 varray=( ${!2} ) major minor patch yyww=$(date +%y%V)
  major=${varray[1]}
  minor=${varray[2]}
  patch=${varray[3]}

  local script="\
  s/([[:blank:]]+FILEVERSION[[:blank:]]+)[^a-zA-Z\"\\]+(.*)$/\1$major,$minor,$patch,$yyww\2/;\
  s/([[:blank:]]+PRODUCTVERSION[[:blank:]]+)[^a-zA-Z\"\\]+(.*)$/\1$major,$minor,$patch,$yyww\2/;\
  s/([[:blank:]]+VALUE \"FileVersion\",[[:blank:]]+\")[^a-zA-Z\"\\]+(.*)$/\1$major.$minor.$patch.$yyww\2/;\
  s/([[:blank:]]+VALUE \"ProductVersion\",[[:blank:]]+\")[^a-zA-Z\"\\]+(.*)$/\1$major.$minor.$patch.$yyww\2/"

  # io_trace "version_update_rc -- $(print_vars file varray[@] major minor patch yyww)"
  
  ised "$file" "$script"
}
# Update Version tag in C++ resource file
# Shift patch right, skip prerelease and meta
#
# Example:
#   version_update_rc sku/sal/v1.2.3-rc1+meta
#
# .rc format:
# ...
#  FILEVERSION 1,2,0,3
#  PRODUCTVERSION 1,2,0,3
# ...
#             VALUE "FileVersion", "1.2.0.3"
#             VALUE "ProductVersion", "1.2.0.3"
# ...
version_update_rc_mmop()
{
  # major.minor.0.patch
  local file=$1 varray=( ${!2} ) major minor patch
  major=${varray[1]}
  minor=${varray[2]}
  patch=${varray[3]}

  local script="\
  s/([[:blank:]]+FILEVERSION[[:blank:]]+)[^a-zA-Z\"\\]+(.*)$/\1$major,$minor,0,$patch\2/;\
  s/([[:blank:]]+PRODUCTVERSION[[:blank:]]+)[^a-zA-Z\"\\]+(.*)$/\1$major,$minor,0,$patch\2/;\
  s/([[:blank:]]+VALUE \"FileVersion\",[[:blank:]]+\")[^a-zA-Z\"\\]+(.*)$/\1$major.$minor.0,$patch\2/;\
  s/([[:blank:]]+VALUE \"ProductVersion\",[[:blank:]]+\")[^a-zA-Z\"\\]+(.*)$/\1$major.$minor.0,$patch\2/"

  # io_trace "version_update_rc_mmop -- $(print_vars file varray[@] major minor patch yyww)"

  ised "$file" "$script"
}
version_update_custom()
{
  local techver=$1 varray=( ${!2} ) updater="${3:-$PWD/update-version}"
  if [[ -f "$updater" ]]; then
    source "$updater" "${varray[@]}"
  fi
}
version_create_custom()
{
  local dir=${1:-.}
  local file="$dir/update-version"
  [ -f "$file" ] || {
    mkdir -p "$dir"
    cat >"$file" <<\EOF
#!/usr/bin/env bash

# Update technical version
# Triggered by git prod release

[[ -z $ZOUL_CORE ]] && . zoul-core

update_version()
{
  local version=$1 major=$2 minor=$3 patch=$4 prerelease=$5 meta=$6

  # modify and return version associated files

  # example 1 : compta
  #
  # local file='libcompta/version.h'
  # 
  # local script="\
  # s,(MAJREV_SHOW[[:blank:]]+)[0-9]+,\1$major,; \
  # s,(MINREV_SHOW[[:blank:]]+)[0-9]+,\1$minor,; \
  # s,(PROVREV_SHOW[[:blank:]]+)[0-9]+,\1$patch,"
  # 
  # ised "$file" "$script"

  # example 2 : salaires
  #
  # local yyww=$(date +%y%V)
  # local file='sal.version.ini'
  # 
  # local script="\
  #   s/(INTERNAL[[:blank:]]+)[0-9\.]+/\1$major.$minor.$patch.$yyww/; \
  #   s/(INTERNALRC[[:blank:]]+)[0-9\,]+/\1$major,$minor,$patch,$yyww/"
  # 
  # ised "$file" "$script"
}

update_version "$@"
EOF
    abspath $file
  }
}

version_list_all_files()
{
  gitx config --file "$moduleConfigFile" --get-regexp update-version 2>>"$stderrRedir" | grep -v 'freezed'
}
version_list_files_of_type()
{
  gitx config --file "$moduleConfigFile" --get-all update-version.$1 2>>"$stderrRedir"
}
version_add_file_spec()
{
  local type=$1 files=( $(version_list_files_of_type $1) ) spec file
  shift
  gitx config --file "$moduleConfigFile" update-version.freezed true &>>"$stdallRedir"
  for spec in "$@"; do
    for file in $(version_list_resources "$spec"); do
      if ! array_contains_element "$file" "${files[@]}"; then
        if ieval "grep -qE '${versionFilters[$type]}'" "$file"; then
          gitx config --file "$moduleConfigFile" --add update-version.$type "$file" &>>"$stdallRedir"
        fi
      fi
    done
  done
  gitx update-index --add -- "$moduleConfigFile" &>>"$stdallRedir" && \
  git_commit "register version resources" "$moduleConfigFile"
}
version_remove_file_spec()
{
  local type=$1 spec file
  shift
  for spec in "$@"; do
    for file in $(version_list_resources "$spec"); do
      gitx config --file "$moduleConfigFile" --unset update-version.$type $file
    done
  done
  git_commit "unregister version resources" "$moduleConfigFile"
}

version_verify_context()
{
  if [[ -z $moduleConfigFile ]]; then
    io_error "$1 should run in module scope context" 'fatal'
    exit 1
  fi
}
version_update()
{
  version_verify_context 'version_update'
  local version=$1 varray techver stechver kv kvs key value
  varray=( $(version_parse "$1") ) || return 1
  techver=$(version_technical "${varray[@]}")
  stechver=$(version_technical_short "${varray[@]}")
  IFS=$'\n' kvs=( $(version_list_all_files) ); IFS=$OIFS
  for kv in "${kvs[@]}"; do
    kv=${kv#update-version.}
    key=${kv%% *}; key=${key//-/_}
    value=${kv#* }
    # io_trace "version_update -- $(print_vars key value varray[@] techver stechver)"
    "version_update_$key" "$value" 'varray[@]' "$techver" "$stechver"
  done
  # execute custom updater (use git config-version --custom to create one)
  version_update_custom "$techver" 'varray[@]' './update-version'
}
version_list_resources()
{
  # skip directories beginning with a dot, modules and Mono folders
  gitx ls-files "$@" 2>>"$stderrRedir" | grep -vE -e '(^\.|/\.)[^/]+/' -e '^modules/' -e '^Mono/'
}
version_config_reset()
{
  version_verify_context 'version_config_reset'
  [ -f "$moduleConfigFile" ] && gitx config --file "$moduleConfigFile" --remove-section update-version &>>"$stdallRedir"
}
declare -A versionFilters=( \
  [version-props]='(<Version>|<AssemblyVersion>)' \
  [assembly-info]='\[assembly:[[:blank:]]*(AssemblyVersion|AssemblyFileVersion)' \
  [csproj]='(<ProductVersion>|<ApplicationVersion>)' \
  [package-json]='\"version\":[[:blank:]]*\"[0-9]' \
  [rc]='(FILEVERSION[[:blank:]]+[0-9]|\"FileVersion\",[[:blank:]]*\"[0-9])' \
  [rc-mmop]='(FILEVERSION[[:blank:]]+[0-9]|\"FileVersion\",[[:blank:]]*\"[0-9])' \
)
declare -A versionAutoSpecs=( \
  [version-props]='Version.props:*/Version.props' \
  [assembly-info]='*AssemblyInfo*.cs' \
  [csproj]='*.csproj' \
  [package-json]='package.json:*/package.json' \
  [rc]='*.rc' \
)
version_config_auto()
{
  version_verify_context 'version_config_auto'
  gitx config --file "$moduleConfigFile" update-version.freezed &>>"$stdallRedir" && return 0

  local type specs file files=() resources freezed
  for type in "${!versionAutoSpecs[@]}"; do
    IFS=':' specs=( ${versionAutoSpecs[$type]} ); IFS=$OIFS
    # io_trace "version_config_auto -- $(print_vars specs[@])"
    IFS=$'\n' resources=( $(version_list_resources "${specs[@]}") ); IFS=$OIFS
    for file in "${resources[@]}"; do
      # io_trace "version_config_auto -- $(print_vars file)"
      if ieval "grep -qE '${versionFilters[$type]}'" "$file"; then
        if [[ -z $freezed ]]; then
          freezed=true
          gitx config --file "$moduleConfigFile" update-version.freezed true &>>"$stdallRedir"
        fi
        gitx config --file "$moduleConfigFile" --add update-version.$type "$file" &>>"$stdallRedir"
        files+=( "$file" )
      fi
    done
  done
  if [ ${#files[@]} -gt 0 ]; then
    # io_trace "version_config_auto -- $(print_vars files[@])"
    gitx update-index --add -- "$moduleConfigFile" &>>"$stdallRedir" \
    && git_commit 'register version resources' "$moduleConfigFile"
  fi
}
