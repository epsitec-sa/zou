#!/usr/bin/env bash

[[ -z $ZOUL_GIT_SANDBOX ]] && . zoul-git-sandbox

sandbox_parse()
{
  # io_trace "sandbox_parse ${*@Q}"
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    --debug)   debug=true;;
    --reset)   sandboxReset=true;;  
    --clone)   sandboxClone=true;;
    --sm)      createSubmodules=true;;
    --skus)    createSubmodules=true; createSkus=true;;
    --work)    createWork=true;;
    --vr)      createVResources=true;;
    --)        shift; args+=("$@"); break;;
    -*)        io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)         args+=("$1");;
  esac; shift; done
}

sandbox_run()
{
  # io_trace "sandbox_run ${*@Q}"
  # io_trace "sandbox_run -- $(print_vars satHubDir)"
  # io_trace "sandbox_run -- $(print_vars sat1Dir)"
  # io_trace "sandbox_run -- $(print_vars sat2Dir)"
  
  # CREATE SANDBOX
  local debug sandboxReset sandboxClone createSubmodules createSkus createWork createVResources args=()

  sandbox_parse "$@" || return $?
  # io_trace "sandbox_run -- $(print_vars args[@])"

  [[ $sandboxReset == true ]] && sandbox_delete
  ( sandbox_create_bundle ) &
  [[ $createSubmodules == true ]] && sandbox_create_submodules
  wait
  
  [[ $createVResources == true ]] && sandbox_create_vresources
  [[ $createSkus == true ]] && sandbox_create_skus
  [[ $createWork == true ]] && sandbox_create_work "${args[@]}"
  [[ $sandboxClone == true ]] && sandbox_clone
}

sandbox_run "$@"
