#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_VTAG_GROUPING ]] && . zoul-git-vtag-grouping

vcheck_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    --debug)    debug=true;;
    -r|--recursive) recursive=true;;
    -*) forOpts+=($1);;
  esac; shift; done
}
vcheck_run()
{
  local recursive forOpts=()
  vcheck_parse "$@" || return $?
  
  if [[ $recursive = true ]]; then
    . git-for "${forOpts[@]}" -- 'vcheck_node'
  else
    module_run vcheck_node
  fi
}
vcheck_node()
{
  local ec=0 lookup vtag pvtag vbranch

  mio_info "Grouping vtags ordered by version..."
  lookup=$(vtag_group_by_version)
  declare -A byVersion="${lookup#*=}"
  
  local vbranches=( ${!byVersion[@]} )
  [ ${#vbranches[@]} -eq 0 ] && {
    mio_success "  There are no vtag in this repository"
    return 0
  }
  vbranches=$(array_sort vbranches[@])
  # io_trace "vcheck_node $(print_vars vbranches)"

  mio_info "Grouping vtags ordered by date..."
  lookup=$(vtag_group_by_date)
  declare -A byDate="${lookup#*=}"

  # check appartenance and ancestry order
  for vbranch in $vbranches; do
    ec=0
    local branch lbranch bref
    branch_set_realize $vbranch
    if [ $? -gt 1 ]; then
      branch_set_realize "other/archive/$vbranch"
    fi
    if [ $? -le 1 ]; then
      for vtag in ${byVersion[$vbranch]}; do
        if ! git merge-base --is-ancestor "$vtag" "$branch"; then
          mio_message "  vtag '$vtag' is not inside vbranch '$vbranch'" '' LightPurple
          (( ec = $ec + 1 ))
        fi
        if [[ -n $pvtag ]]; then
          if ! git merge-base --is-ancestor "$vtag" "$pvtag"; then
            mio_message "  vtag '$vtag' is not an ancestor of '$pvtag'" '' LightPurple
            (( ec = $ec + 1 ))
          fi
        fi
        pvtag=$vtag
      done
      unset pvtag
    else
      mio_message "  Branch not found '$vbranch' - vtags (${byVersion[$vbranch]}) are orphans" '' LightPurple
      (( ec += 1 ))
    fi
    if [ $ec -eq 0 ]; then
      mio_success "  Checked vtag appartenance and history on vbranch '$vbranch' - OK"
    else
      mio_warning "  Checked vtag appartenance and history on vbranch '$vbranch' - $ec warning[s]"
    fi
  done

  # check by date and by version coherence : order should match
  for vbranch in $vbranches; do
    if [[ ${byVersion[$vbranch]} == ${byDate[$vbranch]} ]]; then
      mio_success "  Checked vtag ordering on vbranch '$vbranch' - OK"
    else
      # check item by item
      local a1 a2 ai2 i1=0 i2=0 j2 e2 ec=0
      a1=( ${byVersion[$vbranch]} )
      a2=( ${byDate[$vbranch]} )
      for i2 in ${!a2[@]}; do
        e2=${a2[$i2]}
        local IFS='='
        ai2=( ${a2[$i2]} )
        IFS=' '
        if [ ${#ai2[@]} -eq 1 ]; then
          if [[ ${a1[$i1]} != ${a2[$i2]} ]]; then
            if [ $ec -eq 0 ]; then
              mio_message "  vtags order differ for vbranch '$vbranch'" '' LightPurple
              # mio_message "    ${byVersion[$vbranch]}" '' Gray
              # mio_message "    ${byDate[$vbranch]}" '' Gray
            fi
            mio_message "    ${a1[$i1]} <> ${a2[$i2]}" '' Gray
            (( ec = $ec + 1 ))
          fi
          (( i1 = $i1 + 1 ))
        else
          for j2 in ${!ai2[@]}; do
            if ! array_contains_element "${a1[$i1]}" "${ai2[@]}"; then
              if [ $ec -eq 0 ]; then
                mio_message "  vtags order differ for vbranch '$vbranch'" '' LightPurple
                # mio_message "  ${byVersion[$vbranch]}" '' Gray
                # mio_message "  ${byDate[$vbranch]}" '' Gray
              fi
              mio_message "    ${a1[$i1]} not in (${ai2[*]})" '' Gray
              (( ec = $ec + 1 ))
            fi
            (( i1 = $i1 + 1 ))
          done
        fi
      done
    fi
  done
}

vcheck_run "$@"
