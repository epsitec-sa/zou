#!/bin/bash

[[ -z $ZOUL_GIT_VTAG ]]   && . zoul-git-vtag
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

vcheck_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    --debug)    debug=true;;
    -q|--quiet) quiet=true;;
    -*) io_error "unknown option: $1"; return 1;;
  esac; shift; done
}
vcheck_run()
{
  local jobsCount quiet
  vcheck_parse "$@" || return $?
  
  module_run vcheck_main
}
vcheck_main()
{
  local ec=0 lookup vtag pvtag vbranch rvbranch remote=$(git remote)

  io_info "Grouping vtags ordered by version..." "$moduleTracePrefix"
  lookup=$(vtag_group_by_version)
  declare -A byVersion="${lookup#*=}"
  
  local vbranches=( ${!byVersion[@]} )
  vbranches=$(array_sort vbranches[@])
  for vbranch in $vbranches; do
    vtags=( ${byVersion[$vbranch]} )
    if [[ -z $(git show-ref refs/heads/$vbranch) ]]; then
      # local vbranch not found try remote vbranch
      rvbranch=$remote/$vbranch
      if [[ -z $(git show-ref refs/remotes/$rvbranch) ]]; then
        git branch $vbranch ${vtags[0]} &>/dev/null
        git push -u origin $vbranch &>/dev/null
        io_warning "Created branch '$vbranch'" "$moduleTracePrefix"
        continue
      fi
    fi
    io_success "Checked existence of vbranch '$vbranch' - OK" "$moduleTracePrefix"
  done

  io_info "Grouping vtags ordered by date..." "$moduleTracePrefix"
  lookup=$(vtag_group_by_date)
  declare -A byDate="${lookup#*=}"

  # check appartenance and ancestry order
  for vbranch in $vbranches; do
    ec=0
    rvbranch=$(branch_realize $vbranch)
    for vtag in ${byVersion[$vbranch]}; do
      if ! git merge-base --is-ancestor $vtag $rvbranch; then
        io_warning "vtag '$vtag' is not inside vbranch '$rvbranch'" "$moduleTracePrefix"
        (( ec = $ec + 1 ))
      fi
      if [[ -n $pvtag ]]; then
        if ! git merge-base --is-ancestor $vtag $pvtag; then
          io_warning "vtag '$vtag' is not an ancestor of '$pvtag'" "$moduleTracePrefix"
          (( ec = $ec + 1 ))
        fi
      fi
      pvtag=$vtag
    done
    unset pvtag
    if [ $ec -eq 0 ]; then
      io_success "Checked tag appartenance and history on vbranch '$vbranch' - OK" "$moduleTracePrefix"
    else
      io_warning "Checked tag appartenance and history on vbranch '$vbranch' - $ec warning[s]" "$moduleTracePrefix"
    fi
  done

  # check by date and by version coherence : order should match
  for vbranch in $vbranches; do
    if [[ ${byVersion[$vbranch]} == ${byDate[$vbranch]} ]]; then
      io_success "Checked tag ordering on vbranch '$vbranch' - OK" "$moduleTracePrefix"
    else
      # check item by item
      local a1 a2 ai2 i1=0 i2=0 j2 e2 ec=0
      a1=( ${byVersion[$vbranch]} )
      a2=( ${byDate[$vbranch]} )
      for i2 in ${!a2[@]}; do
        e2=${a2[$i2]}
        local IFS='='
        ai2=( ${a2[$i2]} )
        IFS=' '
        if [ ${#ai2[@]} -eq 1 ]; then
          if [[ ${a1[$i1]} != ${a2[$i2]} ]]; then
            if [ $ec -eq 0 ]; then
              io_error "vtag orders differ for vbranch '$vbranch'" "$moduleTracePrefix"
              io_message "  ${byVersion[$vbranch]}" "$moduleTracePrefix" Gray
              io_message "  ${byDate[$vbranch]}" "$moduleTracePrefix" Gray
            fi
            io_error "vtag '${a1[$i1]}' does not match ${a2[$i2]} on vbranch '$vbranch'" "$moduleTracePrefix"
            (( ec = $ec + 1 ))
          fi
          (( i1 = $i1 + 1 ))
        else
          for j2 in ${!ai2[@]}; do
            if ! array_contains_element "${a1[$i1]}" "${ai2[@]}"; then
              if [ $ec -eq 0 ]; then
                io_error "vtag orders differ for vbranch '$vbranch'" "$moduleTracePrefix"
                io_message "  ${byVersion[$vbranch]}" "$moduleTracePrefix" Gray
                io_message "  ${byDate[$vbranch]}" "$moduleTracePrefix" Gray
              fi
              io_error "vtag '${a1[$i1]}' not found in ${ai2[*]@Q} on vbranch '$vbranch'" "$moduleTracePrefix"
              (( ec = $ec + 1 ))
            fi
            (( i1 = $i1 + 1 ))
          done
        fi
      done
    fi
  done
}

vcheck_run "$@"
