#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option
# https://stackoverflow.com/questions/3216360/merge-update-and-pull-git-branches-without-using-checkouts

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch-merge
ZOUL_GIT_BRANCH_MERGE=true

[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

branch_merge_ff()
{
  local toMerge=$1 intoBranch=$2 toMergeAlias=${3:-$1} intoBranchName needCheckout
  _branch_merge_ff
}
branch_merge_sync()
{
  branch_merge "$@" && branch_merge_ff "$2" "$1"
}
branch_merge_abort()
{
  if repo_is_merging; then
    git merge --abort
    _branch_remove_temp_merge_files
  fi
}
branch_merge()
{
  branch_merge_abort

  local toMerge=$1 intoBranch=$2 toMergeAlias intoBranchName needCheckout mergeOpts=() ec=0; shift 2
  while [[ "$#" > 0 ]]; do case "$1" in
    -*) mergeOpts+=($1);;
    *)  toMergeAlias=$1;;
  esac; shift; done
  toMergeAlias=${toMergeAlias:-$toMerge}
  # io_trace "branch_merge -1- -- $(print_vars toMerge intoBranch toMergeAlias mergeOpts[@])"

  _branch_merge_ff || ec=$?
  case $ec in
    0|128) return $ec;;
    *) ec=0;;
  esac
  # io_trace "branch_merge -2- -- $(print_vars toMerge intoBranch toMergeAlias needCheckout mergeOpts[@])"

  local message="zou-flow: merge '$toMergeAlias' into '$intoBranch'"
  if [[ $needCheckout == true ]] && git checkout $intoBranchName &>/dev/null; then
    # io_trace "branch_merge -3- -- $(print_vars toMerge intoBranch toMergeAlias needCheckout mergeOpts[@])"
    _branch_merge "$message" "$toMerge" "${mergeOpts[@]}" || ec=$?
    if [ $ec -ne 0 ] && repo_is_merging; then

      mio_error "Merging ${VC}$toMergeAlias${Red} into ${VC}$intoBranch${Red} will cause merge conflicts."
      branch_show_status '  '
      io_lock_enter
      mio_message_unsafe "You have to merge these branches manually." ${Cyan}
      mio_message_unsafe "  Your merge tool is probably not configured." ${DarkGray}
      mio_message_unsafe "  See 'git mergetool --tool-help' or 'git help config' for more details." ${DarkGray}
      io_lock_exit
      branch_merge_abort
    fi
    git checkout - &>/dev/null
  else
    # io_trace "branch_merge -4- -- $(print_vars toMerge intoBranch toMergeAlias needCheckout mergeOpts[@] ec)"
    _branch_merge "$message" "$toMerge" "${mergeOpts[@]}" || ec=$?
  fi
  if [ $ec -eq 0 ]; then
    mio_success "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green}"
  else
    repo_require_clean_work_tree "Cannot merge '$toMergeAlias' into '$intoBranch'"
  fi
  return $ec
}
branch_is_merged()
{
  local toMerge=$1 mergeInto=$2 \
        hashToMerge hashMergeInto hashMergeBase

  # io_trace "_branch_merge_ff -- $(print_vars toMerge intoBranch intoRef intoBranchName)"

  hashToMerge=$(git rev-parse --verify "$toMerge^{}" 2>/dev/null) || return 128
  hashMergeInto=$(git rev-parse --verify "$mergeInto^{}" 2>/dev/null) || return 128

  [[ $hashToMerge == $hashMergeInto ]] && return 0
  hashMergeBase=$(git merge-base "$hashMergeInto" "$hashToMerge")
  [[ $hashToMerge == $hashMergeBase ]]
}
# usage
#  local toMerge=$1 intoBranch=$2 needCheckout
#  _branch_merge_ff
# in/out:
#  toMerge    -- commish to merge
#  intoBranch -- branch to merge into (local name)
# out:
#  intoBranchName -- branch name without remote prefix
#  needCheckout
# return:
#  0   -- ff merge succeeded
#  1   -- ff merge failed 
#  128 -- bad arguments

_branch_merge_ff()
{
  # merge 'toMerge' (invariant) into 'intoBranch' < 'toMerge'
  # 'intoBranch' should be a local branch with a symbolic name
  local hashToMerge hashMergeInto hashMergeBase intoRef branch lbranch bref ec=0
  branch_set_realize "$intoBranch" || ec=$?
  if [ $ec -eq 2 ]; then
    mio_error "Invalid branch name '$intoBranch' (error code = $ec)"
    return 128
  else
    intoBranch=$branch
    intoBranchName=$lbranch
    intoRef=$bref
  fi
  # io_trace "_branch_merge_ff -- $(print_vars toMerge intoBranch intoRef intoBranchName)"

  hashToMerge="$(git rev-parse --verify "$toMerge^{}" 2>/dev/null)"
  if [ $? -ne 0 ]; then
    toMerge=$(branch_realize "$toMerge")
    if [ $? -gt 1 ]; then
      mio_error "Invalid commish '$toMerge'"
      return 128
    fi
    hashToMerge="$(git rev-parse --verify "$toMerge" 2>/dev/null)"
    if [ $? -ne 0 ]; then
      mio_error "Invalid commish '$toMerge'"
      return 128
    fi
  fi
  hashMergeInto=$(git show-ref -s --verify "$intoRef" 2>/dev/null)
  if [ $? -ne 0 ]; then
    mio_error "Invalid reference '$intoRef'"
    return 128
  fi

  [[ $hashToMerge == $hashMergeInto ]] && return 0
  hashMergeBase=$(git merge-base $hashMergeInto $hashToMerge)
  [[ $hashToMerge == $hashMergeBase ]] && return 0

  if [[ "$(git symbolic-ref HEAD 2>/dev/null)" == "$intoRef" ]]; then
    _branch_merge_ff_only || return 1
  else
    needCheckout=true
    if [[ $hashMergeBase != "$hashMergeInto" ]]; then
      return 1
    fi
    if git update-ref -m "merge $toMerge into $intoBranch (fast forward)" "$intoRef" "$hashToMerge" "$hashMergeInto"; then
      mio_success "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green} (fast-forward)"
    else
      return 1
    fi
  fi
  # io_trace "_branch_merge_ff -- $(print_vars toMerge intoBranch ref)" ${Green}
}
_branch_merge_ff_only()
{
  if git merge --ff-only "$toMerge" &>/dev/null; then
    mio_success "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green} (fast-forward)"
  else
    return 1
  fi
}
_branch_merge()
{
  local message=$1 toMerge=$2; shift 2
  if git merge -m "$message" "$@" "$toMerge" &>/dev/null; then
    # io_trace "_branch_merge -- $(print_vars toMerge intoBranch ref)" ${Green}
    return 0
  fi

  ! repo_is_merging && return 1

  if _branch_merge_resolve_submodule_conflicts; then
    git commit -m "$message" >/dev/null
  elif ! _branch_merge_interactive; then
    # git diff
    return 1
  fi
}
_branch_merge_interactive()
{
  local ec=0
  _branch_merge_tool &>/dev/null && git commit --no-edit &>/dev/null || ec=$?
  _branch_remove_temp_merge_files
  return $ec
}
_branch_remove_temp_merge_files()
{
  # clean temp merge files
  repo_list_untracked | grep -E '(\.orig$|_(BACKUP|BASE|LOCAL|REMOTE)_[0-9]+)' | xargs --no-run-if-empty rm --
}
_branch_merge_tool()
{
  io_locked_eval 'git mergetool 2>&1' : ${DarkGray}
}
_branch_merge_resolve_submodule_conflicts()
{
  local line status path lines ec=0
  IFS=$'\n' lines=($(git status -s --porcelain)); IFS=$OIFS
  for line in "${lines[@]}"; do
    if [[ $line =~ ^[[:blank:]]*([A-Z]+)[[:blank:]]+(.+)$ ]]; then
      status=${BASH_REMATCH[1]}
      path=${BASH_REMATCH[2]}
      if [[ -f "$path/.git" ]]; then
        # ignore submodules - keep local one
        git reset -q "$path"
      else
        # still unmerged files
        ec=1
      fi
    fi
  done
  return $ec
}