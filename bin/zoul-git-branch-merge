#!/usr/bin/env bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option
# https://stackoverflow.com/questions/3216360/merge-update-and-pull-git-branches-without-using-checkouts

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch-merge
ZOUL_GIT_BRANCH_MERGE=true

[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

mergingEvent=()
mergeSuccessEvent=()
mergeAbortEvent=()
branch_raise_merging_event() { raise_event 'mergingEvent[@]' "$@"; }
branch_raise_merge_success_event() { raise_event 'mergeSuccessEvent[@]' "$@"; }
branch_raise_merge_abort_event() { raise_event 'mergeAbortEvent[@]' "$@"; }

branch_merge_ff()
{
  local toMerge=$1 intoBranch=$2 toMergeAlias=${3:-$1} intoBranchName needCheckout
  _branch_merge_ff
}
branch_merge_sync()
{
  branch_merge "$@" && branch_merge_ff "$2" "$1"
}
branch_merge_abort()
{
  if repo_is_merging; then
    # io_trace "branch_merge_abort -1-"
    gitx merge --abort
    _branch_remove_temp_merge_files
    branch_raise_merge_abort_event
  fi
}
branch_merge()
{
  branch_merge_abort

  local toMerge=$1 intoBranch=$2 toMergeAlias intoBranchName needCheckout mergeOpts=() ec=0; shift 2
  while [[ "$#" > 0 ]]; do case "$1" in
    -*) mergeOpts+=($1);;
    *)  toMergeAlias=$1;;
  esac; shift; done
  toMergeAlias=${toMergeAlias:-$toMerge}
  # io_trace "branch_merge -1- $(print_vars toMerge intoBranch toMergeAlias mergeOpts[@])"

  _branch_merge_ff || ec=$?
  case $ec in
    0|128) return $ec;;
    *) ec=0;;
  esac
  # io_trace "branch_merge -2- $(print_vars toMerge intoBranch toMergeAlias needCheckout mergeOpts[@])"

  local message="zou-flow: merge '$toMergeAlias' into '$intoBranch' ($(gitx rev-parse --short "$toMerge" 2>>"$stderrRedir") -> $(gitx rev-parse --short "$intoBranch" 2>>"$stderrRedir"))"
  if [[ $needCheckout == true ]] && gitx checkout $intoBranchName &>>"$stdallRedir"; then
    # io_trace "branch_merge -3- $(print_vars toMerge intoBranch toMergeAlias needCheckout mergeOpts[@])"
    _branch_merge "$message" "$toMerge" "${mergeOpts[@]}" || ec=$?
    if [ $ec -ne 0 ] && repo_is_merging; then
      mio_error "Merging ${VC}$toMergeAlias${Red} into ${VC}$intoBranch${Red} will cause merge conflicts."
      branch_show_status '  '
      io_lock_enter
      mio_message_unsafe "You have to merge these branches manually." ${Cyan}
      if [[ -z $(git config merge.tool) ]]; then
        mio_message_unsafe "  Your merge tool is not configured." ${DarkGray}
        mio_message_unsafe "  See 'git mergetool --tool-help' or 'git help config' for more details." ${DarkGray}
      fi
      io_lock_exit
    fi
    gitx checkout - &>>"$stdallRedir"
  else
    # io_trace "branch_merge -4- $(print_vars toMerge intoBranch toMergeAlias needCheckout mergeOpts[@] ec)"
    _branch_merge "$message" "$toMerge" "${mergeOpts[@]}" || ec=$?
  fi
  if [ $ec -eq 0 ]; then
    [[ $quiet == true ]] || mio_success "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green}"
  else
    repo_require_clean_work_tree "Cannot merge ${VC}$toMergeAlias${Brown} into ${VC}$intoBranch${Brown}"
  fi
  return $ec
}
branch_is_merged()
{
  local toMerge=$1 mergeInto=$2 \
        hashToMerge hashMergeInto hashMergeBase

  # io_trace "branch_is_merged -- $(print_vars toMerge intoBranch intoRef intoBranchName)"

  hashToMerge=$(gitx rev-parse --verify "$toMerge^{}" 2>>"$stderrRedir") || return 128
  hashMergeInto=$(gitx rev-parse --verify "$mergeInto^{}" 2>>"$stderrRedir") || return 128

  [[ $hashToMerge == $hashMergeInto ]] && return 0
  hashMergeBase=$(gitx merge-base "$hashMergeInto" "$hashToMerge")
  [[ $hashToMerge == $hashMergeBase ]]
}
# usage
#  local toMerge=$1 intoBranch=$2 needCheckout
#  _branch_merge_ff
# in/out:
#  toMerge    -- commish to merge
#  intoBranch -- branch to merge into (local name)
# out:
#  intoBranchName -- branch name without remote prefix
#  needCheckout
# return:
#  0   -- ff merge succeeded
#  1   -- ff merge failed 
#  128 -- bad arguments

_branch_merge_ff()
{
  # merge 'toMerge' (invariant) into 'intoBranch' < 'toMerge'
  # 'intoBranch' should be a local branch with a symbolic name

  local hashToMerge hashMergeInto hashMergeBase intoRef branch lbranch bref ec=0
  # io_trace ">>>> _branch_merge_ff ${*@Q}"
  branch_set_realize "$intoBranch" 'true' || ec=$?
  # io_trace "_branch_merge_ff -1- $(print_vars branch lbranch bref ec)"
  if [ $ec -eq 2 ]; then
    mio_error "Invalid branch name '$intoBranch' (error code = $ec)"
    return 128
  else
    intoBranch=$branch
    intoBranchName=$lbranch
    intoRef=$bref
  fi

  hashToMerge="$(gitx rev-parse --verify "$toMerge^{}" 2>>"$stderrRedir")"
  if [ $? -ne 0 ]; then
    toMerge=$(branch_realize "$toMerge")
    if [ $? -gt 1 ]; then
      mio_error "Invalid commish '$toMerge'"
      return 128
    fi
    hashToMerge="$(gitx rev-parse --verify "$toMerge" 2>>"$stderrRedir")"
    if [ $? -ne 0 ]; then
      mio_error "Invalid commish '$toMerge'"
      return 128
    fi
  fi
  hashMergeInto=$(gitx show-ref -s --verify "$intoRef" 2>>"$stderrRedir")
  if [ $? -ne 0 ]; then
    mio_error "Invalid reference '$intoRef'"
    return 128
  fi

  [[ $hashToMerge == $hashMergeInto ]] && return 0
  hashMergeBase=$(gitx merge-base $hashMergeInto $hashToMerge)
  [[ $hashToMerge == $hashMergeBase ]] && return 0

  if [[ "$(gitx symbolic-ref HEAD 2>>"$stderrRedir")" == "$intoRef" ]]; then
    _branch_merge_ff_only || return 1
  else
    needCheckout=true
    if [[ $hashMergeBase != "$hashMergeInto" ]]; then
      return 1
    fi
    if gitx update-ref -m "merge $toMerge into $intoBranch (fast forward)" "$intoRef" "$hashToMerge" "$hashMergeInto" 2>>"$stderrRedir"; then
      branch_raise_merge_success_event "$toMerge" "$intoBranch"
      [[ $quiet == true ]] || mio_success "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green} (fast-forward)"
      # io_trace "<<<< _branch_merge_ff -2- $(print_vars toMerge intoBranch ref)"
      return 0
    else
      # io_trace "<<<< _branch_merge_ff -3- $(print_vars toMerge intoBranch ref)"
      return 1
    fi
  fi
  # io_trace "<<<< _branch_merge_ff -4- $(print_vars toMerge intoBranch ref)"
}
_branch_merge_ff_only()
{
  # io_trace "_branch_merge_ff_only -1- $(print_vars toMerge intoBranch ref)"
  # branch_raise_merging_event "$toMerge" "$intoBranch"
  if gitx merge --ff-only "$toMerge" &>>"$stdallRedir"; then
    # io_trace "_branch_merge_ff_only -2- $(print_vars toMerge intoBranch ref)"
    branch_raise_merge_success_event "$toMerge" "$intoBranch"
    [[ $quiet == true ]] || mio_success "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green} (fast-forward)"
    return 0
  else
    # io_trace "_branch_merge_ff_only -3- $(print_vars toMerge intoBranch ref)"
    return 1
  fi
}
_branch_merge()
{
  local message=$1 toMerge=$2; shift 2
  # io_trace "_branch_merge -1- $(print_vars toMerge intoBranch)"
  # branch_raise_merging_event "$toMerge" "$intoBranch"
  if gitx merge -m "$message" "$@" "$toMerge" &>>"$stdallRedir"; then
    # io_trace "_branch_merge -2- $(print_vars toMerge intoBranch)"
    branch_raise_merge_success_event "$toMerge" "$intoBranch"
    return 0
  fi
  # io_trace "_branch_merge -3- $(print_vars toMerge intoBranch)"

  if _branch_merge_resolve_submodule_conflicts; then
    # io_trace "_branch_merge -4.1- $(print_vars toMerge intoBranch)"

    # no files to merge, just submodules
    # all conflicts should be resolved
    branch_merge_abort

    if io_buffered_eval "gitx merge -m '$message' "$@" '$toMerge' '-sours' 2>&1" _branch_merge_selector; then
      # io_trace "_branch_merge -4.1.1- $(print_vars toMerge intoBranch)"
      branch_raise_merge_success_event "$toMerge" "$intoBranch"
      return 0
    else
      # io_trace "_branch_merge -4.1.2- $(print_vars toMerge intoBranch)"
      return 1
    fi
  elif _branch_merge_interactive; then
    # io_trace "_branch_merge -5.1- $(print_vars toMerge intoBranch)"
    branch_raise_merge_success_event "$toMerge" "$intoBranch"
    return 0
  else
    # io_trace "_branch_merge -5.2- $(print_vars toMerge intoBranch)"
    # gitx diff
    return 1
  fi
}
_branch_merge_selector()
{
  if [ $ec -eq 0 ]; then
    skipCurrentLine=true
  fi
}
_branch_merge_interactive()
{
  local ec=0
  _branch_merge_tool && gitx commit --no-edit &>>"$stdallRedir" || ec=$?
  _branch_remove_temp_merge_files
  return $ec
}
_branch_remove_temp_merge_files()
{
  # clean temp merge files
  repo_list_untracked | grep -E '(\.orig$|_(BACKUP|BASE|LOCAL|REMOTE)_[0-9]+)' | xargs -d $'\n' --no-run-if-empty rm --
}
_branch_merge_tool()
{
  # io_buffered_eval 'gitx mergetool 2>&1' : ${DarkGray}
  local mergeTool="$(git config merge.tool)" ec
  branch_raise_merging_event "$toMerge" "$intoBranch"

  io_lock_enter
  {
    mio_warning_unsafe "Merging ${VC}$toMergeAlias${Brown} into ${VC}$intoBranchName${Brown} with conflicts" ''
    branch_show_file_status_unsafe '  '
    # mio_message_unsafe "  Fix conflict before proceeding."
    mio_message_unsafe "  Starting ${VC}$mergeTool${Cyan} merge tool, please wait..."
    gitx mergetool &>/dev/null; ec=$?
    # io_trace "_branch_merge_tool -1- $(print_vars ec)"

    if [ $ec -eq 0 ]; then
      branch_raise_merge_success_event "$toMerge" "$intoBranch"
      mio_success_unsafe "Merged ${VC}$toMergeAlias${Green} into ${VC}$intoBranchName${Green}"
    else
      mio_warning_unsafe "Merge of ${VC}$toMergeAlias${Brown} into ${VC}$intoBranchName${Brown} has been canceled" ''
    fi
  }
  io_lock_exit

  return $ec
}
_branch_merge_resolve_submodule_conflicts()
{
  local mroot="${moduleRoot:-$(repo_module_root)}"
  # io_trace "_branch_merge_resolve_submodule_conflicts -1- $(print_vars mroot)"

  gitx -C "$mroot" status -s --porcelain 2>&1 | \
  {
    local line status path ec=0
    while read -r line; do
      if [[ $line =~ ^[[:blank:]]*([A-Z]+)[[:blank:]]+(.+)$ ]]; then
        status=${BASH_REMATCH[1]}
        path=${BASH_REMATCH[2]}
        # io_trace "_branch_merge_resolve_submodule_conflicts -2- $(print_vars status path)"
        if [[ -f "$mroot/$path/.git" ]]; then
          # ignore submodules - keep local one
          gitx reset -q -- "$path" &>>"$stdallRedir"
        else
          # still unmerged files
          ec=1
        fi
      fi
    done
    return $ec
  }
  return ${PIPESTATUS[1]}
}
