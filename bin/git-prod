#!/usr/bin/env bash

[[ -z $ZOUL_LOCK ]]              && . zoul-lock
[[ -z $ZOUL_GIT_CMD ]]           && . zoul-git-cmd
[[ -z $ZOUL_GIT_PROD ]]          && . zoul-git-prod
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_VTABLE ]]        && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]  && . zoul-git-branch-merge

prodPreinitEvent+=( _prod_on_preinit )

prod_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -n|--dry-run)   dryRun=true;;
    -)              unset stayInProd;;
    --merge)        mergeIntoDev=true;;
    --vlast)        checkoutType='vlast';;
    --vnext)        checkoutType='vnext';;
    --vtag)         attachMode='vtag';;
    --vtable)       vtable=true;;
    --force)        forcePrincipalRelease=true;;
    --reuse)        prerelPrefix='reuse';;
    --alpha)        prerelPrefix='alpha';;
    --beta)         prerelPrefix='beta';;
    --rc)           prerelPrefix='rc';;
    --rtm)          prerelPrefix='rtm';;
    attach|select)  subcommand=$1;;
    enter|release)  subcommand=$1;;
    --)             shift; break;;
    -*) io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_subcommand 'attach' 'select' 'enter' 'release'

  if [[ $subcommand == 'select' && ${#args[@]} -ge 1 ]]; then
      prodSelectSpec=${args[0]}
      args=(${args[@]:1})
  fi
  
  cmd_check_args "${args[@]}"
  prodModulePaths=( "$@" )
  
  # io_trace "prod_parse -- $(print_vars recursive checkoutType subcommand prodModulePaths[@])"
}
prod_run()
{
  # parse command line
  local jobsCount recursive noSkuFilter command='prod' subcommand \
        cmdScopes=( prod_scope config_scope cosm_scope ) \
        mergeIntoDev vtable prerelPrefix dryRun prodModulePaths=() \
        checkoutType='vnext' attachMode='auto' forcePrincipalRelease \
        prodSelectSpec stayInProd=true

  prod_parse "$@" || return $?
  prod_startup_message

  bundle_scope prod_command
}
prod_startup_message()
{
  case $subcommand in
    attach)
      local what='branch'
      [[ $attachMode == 'vtag' ]] && what='tag'
      startupMessage="Attaching to current version ${Brown}$what${White}, please wait...";;
    select)
      local what='current version branch'
      [[ $attachMode == 'vtag' ]] && what='current version tag'
      [[ -n $prodSelectSpec ]] && what="version $prodSelectSpec"
      startupMessage="Selecting ${Brown}$what${White}, please wait...";;
    *)
      local what='next version' color=${White}
      [[ $dryRun == true ]] && color=${DarkGray}
      [[ $checkoutType == 'vlast' ]] && what='last version'
      case $subcommand in
        enter)   startupMessage="Entering ${Brown}$what${White}, please wait...";;
        release) startupMessage="${color}Releasing ${Brown}$what${color}, please wait...";;
      esac;;
  esac
}
prod_command()
{
  [ ${#prodModulePaths[@]} -eq 0 ] && prodModulePaths+=( './' )
  
  case $subcommand in
    select)
      recursive=true
      noSubmodulesInit=true
      ;;
    release)
      recursive=true
      unset noSkuFilter
      ;;
  esac

  cmd_register_module_paths "$recursive" "${prodModulePaths[@]}"
  cmd_visit_modules
}

_prod_on_preinit()
{
  if module_is_bundle; then
    # vlast does not apply to bundle
    prodCheckoutType='vnext'
    # io_trace "_prod_on_preinit BUNDLE -- $(print_vars checkoutType prodCheckoutType prerelPrefix)"
  else
    prodCheckoutType=$checkoutType
    # io_trace "_prod_on_preinit CHILD -- $(print_vars checkoutType prodCheckoutType prerelPrefix)"
  fi
}

prod_attach_finally()   { branch_show_status; }
prod_attach_xfinally()  { branch_show_status; }
prod_select_finally()   { branch_show_status; }
prod_select_xfinally()  { branch_show_status; }
prod_enter_finally()    { branch_show_status; }
prod_release_xfinally() { branch_show_status; }

########
# ATTACH
########

prod_attach_prolog()  { module_prod_attach "$attachMode" || io_trace_error 'prod_attach_prolog'; }
prod_attach_xprolog() { module_prod_attach "$attachMode" || io_trace_error 'prod_attach_xprolog'; }

########
# SELECT
########

prod_select_select()   { _prod_select_select || io_trace_error 'prod_select_select'; }
prod_select_xselect()  { _prod_select_select || io_trace_error 'prod_select_xselect'; }
prod_select_epilog()   { _prod_select_epilog || io_trace_error 'prod_select_epilog'; }
prod_select_xepilog()  { _prod_select_epilog || io_trace_error 'prod_select_xepilog'; }
prod_select_finally()  { branch_show_status  || io_trace_error 'prod_select_finally'; }
prod_select_xfinally() { branch_show_status  || io_trace_error 'prod_select_xfinally'; }

prod_select_root_scope()
{
  # io_trace "prod_select_root_scope -1- $(print_vars prodSelectSpec attachMode)"
  if [[ -z $prodSelectSpec ]]; then
    case $attachMode in
      vtag) prodSelectSpec=$prodVTag;;
      *)    prodSelectSpec=$prodBranchPath;;
    esac
  else
    [[ $attachMode == 'auto' ]] && vtag_is_semver $prodSelectSpec && attachMode='vtag'
  fi
  # io_trace "prod_select_root_scope -2- $(print_vars prodSelectSpec attachMode)"

  # execute next russian doll
  $1 "${@:2}"
}
_prod_select_select()
{
  if cmd_is_top_level; then
    # io_trace "_prod_select_select -1- $(print_vars prodSelectSpec attachMode)"
    branch_checkout "$prodSelectSpec" true
  else
    # io_trace "_prod_select_select -2- $(print_vars prodSelectSpec attachMode)"
    module_prod_attach "$attachMode"
  fi
  # deferred submodules initialisation (see noSubmodulesInit)
  module_upd_sync_all_submodules

  # io_trace "_prod_select_select -3- $(print_vars configSkuInclude[@])"
  printf '%s\n' "${configSkuInclude[@]}"
}
_prod_select_epilog()
{
  # io_trace "_prod_select_epilog -- $(print_vars attachMode moduleId)" ${Green}
  repo_remove_dangling_submodules
}

#######
# ENTER
#######

prod_enter_epilog() { prod_checkout "$checkoutType" true || io_trace_error 'prod_enter_prolog'; }

#########
# RELEASE
#########

prod_release_root_scope()
{
  # avoid reentrency
  if [[ $prodReleaseRootScopeInitialized != true ]]; then

    # io_trace "prod_release_root_scope ${*@Q}"
    local prodReleaseRootScopeInitialized=true
    # principal module htag
    # - used by '_prod_force_release_of_principal_module'
    # - updated by '_prod_refresh_bundle_htag' (zoul-git-prod))
    local pmProdHTagRoot

    # version table scope
    local vtableCreate vtableGate vtableLookupPath vtableRoot
    _vtable_init || return $?

    # dry run scope
    local rstatusParentGate rstatusLookupPath rstatusParentLookupPath principalReleaseStatus

    # io_trace "prod_release_root_scope -1- $(print_vars forcePrincipalRelease checkoutType prodCheckoutType prodBranch modulePrerelPrefix)"
  fi

  # execute next russian doll
  $1 "${@:2}"
}
prod_release_scope()
{
  local modulePrerelPrefix=$prerelPrefix cmdIsTopLevel \
        wasInDevMode=1 hasBeenReleased forceRelease pmProdHTag

  [[ -z $stayInProd ]] && module_in_strict_dev_mode && wasInDevMode=0
  cmd_is_top_level; cmdIsTopLevel=$?
  
  # io_trace "prod_release_scope -- $(print_vars wasInDevMode cmdIsTopLevel releaseStatus devEqualsProd checkoutType prodCheckoutType prodBranch)"

  if module_is_bundle; then
    # io_trace "prod_release_scope BUNDLE -- $(print_vars prodCheckoutType modulePrerelPrefix)"
    :
  elif module_is_principal; then
    # vlast does not apply to principal module if force release is specified
    if [[ $forcePrincipalRelease == true ]]; then
      forceRelease=true
      if [[ -n "$pmProdHTagRoot" ]]; then
        pmProdHTag="$pmProdHTagRoot"
      fi
      prodCheckoutType='vnext'
    fi
    # io_trace "prod_release_scope PRINCIPAL -- $(print_vars pmProdHTag prodCheckoutType modulePrerelPrefix forceRelease)"
  elif [ $cmdIsTopLevel -ne 0 ]; then
    # prerelease does not apply to non top level submodules (excepting principal module)
    if [[ $prerelPrefix != 'rtm' ]]; then
      modulePrerelPrefix=''
    fi
    # io_trace "prod_release_scope CHILD -- $(print_vars prodCheckoutType modulePrerelPrefix forceRelease)"
  fi

  if module_has_submodules; then
    if [ $cmdIsTopLevel -eq 0 ]; then
      # setup permanent array of child submodules still in prod mode
      # io_trace "prod_release_scope TOP LEVEL -- $(print_vars wasInDevMode)"
      local smInProd smInProdGate smInProdPath
      _sm_in_prod_init || return $?
    fi
  elif _prod_is_release_completed; then
    _prod_release_released
    _vtable_update || io_trace_error 'prod_release_scope' || return $?
    return 0
  fi

  # execute next russian doll
  $1 "${@:2}"
}
_prod_is_release_completed()
{
  # it's not completed if status != released
  [[ $releaseStatus == 'released' ]] || return 1
  # it's not completed if dev != prod
  ref_equals "$moduleDevBranchPath" "$prodBranchPath" || return 1
  # status == released && dev == prod
  # io_trace "_prod_is_release_completed -1- $(print_vars moduleDevBranchPath prodBranchPath)"

  # check if a release of principal module is necessary
  if module_is_principal; then
    # io_trace "_prod_is_release_completed PRINCIPAL -2- $(print_vars pmProdHTag releaseVTag)"
    # bundle and principal module versions are not synchronized
    [[ -n $pmProdHTag && $pmProdHTag != $releaseVTag ]] && return 1
  fi

  return 0
}

prod_release_prolog()
{
  # io_trace "prod_release_prolog -1- $(print_vars prodBranch releaseStatus)"
  case "$releaseStatus" in
    unreleasable)
      dev_checkout false "$moduleDevBranch"
      prod_ensure_vbranch
      if ! repo_is_merging ; then
        branch_merge "$moduleDevBranchPath" "$prodBranchPath" '-Xtheirs' \
        && branch_merge_ff "$prodBranchPath" "$moduleDevBranchPath" \
        || io_trace_error 'prod_release_prolog'
      fi
      ;;
    error)
      mio_error "Branch ${VC}$moduleDevBranch${Red} cannot be released."
      mio_info "  use ${VC}git dev release${Cyan} to release some development code."
      return 1
      ;;
  esac
  if [[ $dryRun == true ]]; then
    _rstatus_init || io_trace_error 'prod_release_prolog 1'
  elif repo_is_clean && ! repo_is_merging && ! cosm_has_unstaged_dirty_submodules; then
    prod_checkout "$prodCheckoutType" false "$moduleDevBranch" || io_trace_error 'prod_release_prolog -2-'
    # io_trace "prod_release_prolog -3- $(print_vars prodBranch releaseStatus)"
  fi
}
prod_release_epilog()
{
  # io_trace "prod_release_epilog ${*@Q} -- $(print_vars prodBranch releaseStatus)"
  if repo_is_clean && ! repo_is_merging && ! cosm_has_unstaged_dirty_submodules; then
    _prod_fix_release_status
    _prod_release || io_trace_error 'prod_release_epilog 1' || return $?
    _vtable_update || io_trace_error 'prod_release_epilog 2' || return $?
  else
    # io_trace "prod_release_epilog -2- $(print_vars unstagedDirtyIncludedSubmodules[@])"
    mio_error  "Branch ${VC}$moduleDevBranch${Red} cannot be released."
    if cosm_has_unstaged_dirty_submodules; then
      io_warning "  Fix unstaged submodules." "$moduleTracePrefix"
    elif repo_is_merging; then
      io_warning "  Resolve or abort your merge conflicts." "$moduleTracePrefix"
    else
      io_warning "  Commit or stash your changes (do not commit submodules references)." "$moduleTracePrefix"
    fi
    io_warning "  When done, restart the ${VC}git prod release${Brown} command." "$moduleTracePrefix"
    return 1
  fi
  return 0
}
prod_release_finally()
{
  [[ $dryRun == true ]] && { branch_show_status; return 0; }

  if [ $cmdIsTopLevel -eq 0 ]; then
    if config_has_submodules; then
      # checkout dev branch for registerd child submodules
      . "$smInProdPath" # deserialize
      # io_trace "prod_release_finally TOP LEVEL -- $(print_vars smInProd[@] smInProdPath)"
      module_visit_submodules_async 'smInProd[@]' module_scope _prod_dev_checkout
    fi
    [ $wasInDevMode -eq 0 ] && dev_checkout false "$moduleDevBranch"
    # if [[ $stayInProd == true ]]; then
    #   io_warning "WARNING: you are in PROD mode" "$moduleTracePrefix"
    #   io_message "  don't forget to ${VC}git dev enter${Cyan} before commiting again" "$moduleTracePrefix"
    #   io_message "  or use ${VC}git prod release -${Cyan} to restore previous mode after release" "$moduleTracePrefix"
    # fi
  elif [ $wasInDevMode -eq 0 ] && ! module_dev_attach; then
    # defer dev checkout to top level module
    # io_trace "prod_release_finally NON TOP LEVEL -- $(print_vars moduleBundlePath moduleHead smInProdPath)"
    _sm_in_prod_update "$moduleBundlePath"
  fi
  branch_show_status
}
prod_release_xepilog() { _vtable_update; }

#################
# Release helpers
#################

_prod_dev_checkout()
{
  dev_checkout false "$moduleDevBranch"
}
_prod_fix_release_status()
{
  prod_fix_release_status "$modulePrerelPrefix" "$forceRelease" "$prodCheckoutType"
  [[ $dryRun == true ]] && _rstatus_update
}
_prod_release()
{
  # io_trace ">>>> _prod_release -- $(print_vars modulePrerelPrefix releaseStatus)"
  case $releaseStatus in
    unreleased) _prod_release_unreleased;;
    ffRelease)  _prod_release_ff;;
    released)   _prod_release_released;;
    *)          _prod_release_unimplemented;;
  esac
  # io_trace "<<<< _prod_release -- $(print_vars modulePrerelPrefix releaseStatus hasBeenReleased)"
}
_prod_release_ff()
{
  if [[ $dryRun == true ]]; then
    mio_success "Branch ${VC}$prodBranch${Green} will be forwarded to ${VC}$prodVTag${Green}"
  else
    branch_merge "$prodVTag" "$prodBranchPath" \
    && { branch_raise_head_changed_event "$prodBranch"; hasBeenReleased=true; } \
    || { mio_error "Merge of branch ${VC}$prodBranch${Red} failed"; return 1; }
  fi
}
_prod_release_unreleased()
{
  # io_trace ">>>> _prod_release_unreleased -1- $(print_vars modulePrerelPrefix releaseStatus)"
  # head will change
  prod_increment_release_version "$modulePrerelPrefix"
  [ $? -eq 127 ] && _prod_force_release_of_principal_module
  # io_trace "#### _prod_release_unreleased -2- $(print_vars modulePrerelPrefix releaseStatus releaseVTag pmProdHTag)"

  if [[ $dryRun == true ]]; then
    mio_success "Branch ${VC}$prodBranch${Green} will be released at ${VC}$releaseVTag" "$alias"
  else
    # io_trace "#### _prod_release_unreleased -3- $(print_vars modulePrerelPrefix releaseStatus)"
    prod_commit_release \
    && branch_raise_head_changed_event "$prodBranch" \
    && { mio_success "Released branch ${VC}$prodBranch${Green} at ${VC}$releaseVTag"; hasBeenReleased=true; } \
    || { mio_error "Release of branch '$prodBranch' failed"; return 1; }
  fi
  # io_trace "<<<< _prod_release_unreleased -4- $(print_vars modulePrerelPrefix releaseStatus)"
}
_prod_release_released()
{
  if [[ $dryRun != true && $vtableCreate == true ]]; then
    # disable vtable creation if already released 
    [[ $moduleRoot == $vtableRoot ]] && vtableCreate=false
  fi
  mio_message "Already released" ${LightBlue}
}
_prod_release_unimplemented()
{
  mio_error "Fatal: releaseStatus '$releaseStatus' not implemented"
  exit 1
}
_prod_force_release_of_principal_module()
{
  # io_trace "_prod_force_release_of_principal_module -- $(print_vars pmProdHTagRoot)"
  mio_warning "Forcing release of principal module ${VC}$principalModuleId"
  local forcePrincipalRelease=true
  cmd_visit_module "$principalModuleId"
  cosm_reset_scope
}
_prod_merge_into_dev()
{
  local toMerge=$1 toMergeAlias=${2:-$1} devBranch=$(wip_to_ref "$moduleDevBranch")
  if [[ $devBranch == $moduleDevBranch ]]; then
    _prod_merge_into_dev_core "$toMerge" "$moduleDevBranchPath" "$toMergeAlias"
  else
    local branch lbranch bref
    branch_set_realize "$devBranch"
    _prod_merge_into_dev_core "$toMerge" "$branch" "$toMergeAlias"
  fi
}
_prod_merge_into_dev_core()
{
  # io_trace ">>>> _prod_merge_into_dev_core -- $(print_vars hasBeenReleased prodCheckoutType)"
  [[ $hasBeenReleased == true ]] || return 0

  local toMerge=$1 mergeInto=$2 toMergeAlias=${3:-$1}

  branch_merge "$toMerge" "$mergeInto" "$toMergeAlias" '-Xtheirs'
  # io_trace "<<<< _prod_merge_into_dev_core -- $(print_vars toMerge mergeInto toMergeAlias)"
}

##########################
# Submodules still in prod
##########################

_sm_in_prod_init()
{
  [[ $dryRun == true ]] && return 0
  smInProdGate=$(lock_init)
  smInProdPath="$(mktemp)"
  local smInProd=()
  # serialize empty array
  declare -p smInProd >"$smInProdPath"
  # remove file when the script finishes
  trap_exit "rm \"$smInProdPath\""
  # io_trace "_sm_in_prod_init -- $(print_vars smInProdPath)"
}
_sm_in_prod_update()
{
  [[ $dryRun == true ]] && return 0
  local smInProd
  lock_enter "$smInProdGate"
  . "$smInProdPath"                     # deserialize
  smInProd+=( "$1" )                    # modify
  declare -p smInProd >"$smInProdPath"  # serialize
  lock_exit "$smInProdGate"
  # io_trace "_sm_in_prod_update -- $(print_vars smInProdPath)"
}

###############
# Version table
###############

_vtable_init()
{
  [[ $dryRun == true ]] && return 0

  if [[ $vtable == true ]]; then
    vtableCreate=true
  elif cmd_is_single_root "$bundleRoot"; then
    vtableCreate=true
  fi
  if [[ $vtableCreate == true ]]; then
    vtableRoot=$(cmd_single_root)
    if [ $? -ne 0 ]; then
      mio_error "Version table cannot be created when distinct modules are specified (${VC}$(cmd_registered_paths)${Red})"
      return 1
    fi
    vtableGate=$(lock_init)
    vtableLookupPath="$(mktemp)"
    # io_trace "_vtable_init -- $(print_vars vtableGate vtableLookupPath)"
    vtable_init "$vtableRoot" "$vtableLookupPath"
  fi
}
_vtable_update()
{
  [[ $dryRun == true ]] && return 0

  # io_trace "_vtable_update -- $(print_vars vtable vtableCreate configSelectIsExcluded vtableRoot)"
  if [[ "$PWD" == "$vtableRoot" ]]; then
    _vtable_commit
  else
    _vtable_update_core
  fi
}
_vtable_update_core()
{
  [[ $dryRun == true ]] && return 0

  # io_trace "_vtable_update_core -- $(print_vars vtableCreate vtableRoot)"
  [[ $vtableCreate == true ]] && vtable_update "$vtableRoot" "$moduleId" "$vtableLookupPath" "$vtableGate"
  [[ $configSelectIsExcluded == true || $dryRun == true ]] && return 0
  _prod_merge_into_dev_core "$prodBranch" "$moduleDevBranchPath" || io_trace_error "_vtable_update_core merge"
}
_vtable_commit()
{
  [[ $dryRun == true ]] && return 0

  # io_trace "_vtable_commit -- $(print_vars vtableCreate)"
  _prod_merge_into_dev "$prodBranch"
  if [[ $vtableCreate == true ]]; then
    # io_trace "_vtable_commit -- $(print_vars releaseStatus prodBranch moduleDevBranch checkoutType)"
    vtable_update "$vtableRoot" "$moduleId" "$vtableLookupPath" "$vtableGate" true \
    && mio_message "Created version table for ${VC}$prodBranch${Green} at ${VC}$releaseVTag" ${Green}
  fi
}

################################
# Release status in dry run mode
################################

_rstatus_init()
{
  rstatusParentGate=$(lock_init)
  rstatusParentLookupPath=$rstatusLookupPath
  rstatusLookupPath=''
  # io_trace "_rstatus_init -1- $(print_vars rstatusParentLookupPath rstatusLookupPath)"
  if config_has_submodules; then
    rstatusLookupPath="$(mktemp)"
    trap_exit "rm \"$rstatusLookupPath\""
    _rstatus_init_core "$rstatusLookupPath"
    # io_trace "_rstatus_init -2- $(print_vars rstatusParentLookupPath rstatusLookupPath)"
  fi
}
_rstatus_update()
{
  # io_trace ">>>> _rstatus_update -- $(print_vars rstatusParentLookupPath rstatusLookupPath)"
  if [[ -n $rstatusLookupPath ]]; then
    _rstatus_commit_core "$rstatusLookupPath"
  fi
  if [[ -n $rstatusParentLookupPath ]]; then
    _rstatus_update_core "$rstatusParentLookupPath" "$rstatusParentGate" "$moduleId" "$releaseStatus"
  fi
  # io_trace "<<<< _rstatus_update -- $(print_vars releaseStatus)"
}
_rstatus_init_core()
{
  local lookupPath=$1
  # io_trace ">>>> _rstatus_init_core -- $(print_vars lookupPath)"
  
  declare -A lookup                 # create lookup
  declare -p lookup >"$lookupPath"  # serialize lookup
  # io_trace "<<<< _rstatus_init_core -- $(print_vars lookupPath)"
}
_rstatus_update_core()
{
  local lookupPath=$1 gate=$2 moduleId=$3 releaseStatus=$4
  # io_trace ">>>> _rstatus_update_core -- $(print_vars lookupPath gate moduleId releaseStatus)"
  
  lock_enter "$gate"
  . "$lookupPath"                     # deserialize lookup
  lookup[$moduleId]="$releaseStatus"  # save publish status
  declare -p lookup >"$lookupPath"    # serialize lookup
  lock_exit "$gate"
  # io_trace "<<<< _rstatus_update_core -- $(print_vars lookupPath releaseStatus)"
}
# out:
#   releaseStatus
#   principalReleaseStatus
_rstatus_commit_core()
{
  local lookupPath=$1 mid status
  # io_trace ">>>> _rstatus_commit_core -- $(print_vars lookupPath)"
  . "$lookupPath"
  for mid in ${!lookup[@]}; do
    status=${lookup[$mid]}
    [[ $status == 'unreleased' ]] && releaseStatus=$status
    [[ $mid == $principalModuleId ]] && principalReleaseStatus=$status
  done
  # io_trace "<<<< _rstatus_commit_core -- $(print_vars lookupPath)"
  return 0
}

prod_run  "$@"
