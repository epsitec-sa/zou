#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select
ZOUL_GIT_BRANCH_SELECT=true

[[ -z $ZOUL_GIT_REF ]]         && . zoul-git-ref
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# Use this method to find the development branch which best matches
# any superproject branch (dev|prod)
# in:
#   $1: sku
# out:
#   bestMatch -- local or remote dev branch
branch_best_match_dev()
{
  local patterns=$(ref_dev_fallback $1) \
        branches=( $(branch_list_local) ) \
        remoteIndex=${#branches[@]} \
        pattern branch lbranch i
        
  branches+=( $(branch_list_remote_untracked) )
  # try to find a branch matching bundle branch name
  for pattern in $patterns; do
    for i in ${!branches[@]}; do
      branch=${branches[i]}
      (( $i < $remoteIndex )) && lbranch=$branch || lbranch=${branch#*/}
      [[ $lbranch == $pattern ]] && {
        echo $branch
        return 0
      }
    done
  done
  return 1
}
branch_best_match_prod()
{
  local sku=$1 branch
  branch=$(branch_realize $sku 2>/dev/null)
  if [ $? -le 1 ]; then
    echo $branch
  else
    vtag_get_vbranch_name $(vtag_describe $(branch_best_match_dev $sku))
  fi
}
# in:
#   $1: sku
#   $2: hint (dev|prod)
# out:
#   bestMatch -- local or remote branch
branch_best_match()
{
  # io_trace "branch_best_match ${*@Q}"
  local sku=$1 hint=$2
  if [[ $hint == 'prod' ]]; then
    vtag_get_vbranch_name $(vtag_describe $(branch_best_match_dev $sku))
  elif [[ $hint == 'dev' ]]; then
    branch_best_match_dev $sku
  else
    if branch_is_prod $sku; then
      branch_best_match_prod $sku
    else
      branch_best_match_dev $sku
    fi
  fi
}
branch_set_select_info()
{
  local sku=${1:-$bundleBranch} skipVNodes=$2 allowDuplicateTags=$3 ltag ec=0

  branch=$(branch_best_match_dev "$sku")
  if ltag=$(vtag_describe "$branch" $skipVNodes); then
    vtag_set_info $ltag
    vtag_set_vbranch_name $vtag
    htag=$(vtag_highest $vbranch true)
    if [[ $htag != $vtag ]]; then
      git merge-base --is-ancestor "$branch" "$htag" >&2 || io_warning "$branch was never published as $htag" "$moduleTracePrefix"
      delta=$(( -$(git rev-list --count $vtag..$htag) + 1 ))
      vtag=$htag
      alias="< $vtag ($delta)"
    fi
    if [[ $allowDuplicateTags != true ]]; then
      htag=$(vtag_highest $vbranch false)
    fi
    if vtag_is_vnode $vtag; then
      local vtags=( $(vtag_list "$vbranch" | grep -v '\-@$') )
      if [ ${#vtags[@]} -eq 0 ]; then
        status='vnodeOnly'
      else
        status='vnode'
      fi
    else
      status='vtag'
    fi
  else
    status='noVTag'
  fi
  # ZOU_TRACE=true io_trace "branch_set_select_info -- $(print_vars sku skipVNodes allowDuplicateTags branch vbranch vtag delta alias status)"
}
# Select branch or vtag
#   if module == bundle || hint == dev
#     select dev branch
#   else
#     select vtag
#
# in:
#   $1:sku=bundleBranch
#   $2:hint -- hint == dev ? select dev branch : select vtag
#   $2:forceCheckout=true
# out:
#   branchOrTag
#   0:devBranch,        branch -- switched to dev branch
#   1:neverPublished,   branch -- switched to branch (no vtag)
#   2:vnodeOnly,        branch -- switched to branch (vtag == vnode)
#   3:vnode,            branch -- switched to branch (vtag == vnode)
#   4:alreadyPublished, vtag -- switched to branch (vtag == branch)
#   5:ffPublish,        vtag   -- no change (vtag > branch)
#  10:error
branch_set_select_auto()
{
  local sku=$1 hint=$2 forceCheckout=${3:-true} skipVNodes=${4:-true} allowDuplicateTags=$5 mroot broot ec=0
  [[ -z $sku ]]   && sku=$bundleBranch
  [[ -z $sku ]]   && sku=$(branch_current_root_branch)
  [[ -z $mroot ]] && mroot=$moduleRoot
  [[ -z $mroot ]] && mroot=$(repo_module_root)
  [[ -z $broot ]] && broot=$bundleRoot
  [[ -z $broot ]] && broot=$(repo_bundle_root)
  [[ -z $allowDuplicateTags && $mroot == $broot ]] && allowDuplicateTags=true

  # ZOU_TRACE=true io_trace "branch_set_select_auto -- $(print_vars sku hint forceCheckout skipVNodes allowDuplicateTags mroot broot)"

  _branch_set_select_auto_core "$sku" "$hint" "$forceCheckout" "$skipVNodes" "$allowDuplicateTags" "$mroot" "$broot"  || ec=$?
  if [ $ec -eq 10 ]; then
    repo_require_clean_work_tree "Cannot switch to '$branch'"
  else
    branch_set_upstream "$branch"
  fi
  return $ec
}
_branch_set_select_auto_core()
{
  local sku=$1 hint=$2 forceCheckout=$3 skipVNodes=$4 allowDuplicateTags=$5 mroot=$6 broot=$7 ec=0
  
  local branch vbranch vtag htag delta alias status
  branch_set_select_info $sku $skipVNodes $allowDuplicateTags

  if [[ "$mroot" == "$broot" || $hint == 'dev' ]]; then
    # force dev branch
    branch_checkout "$branch" "$forceCheckout" "$alias" >/dev/null || return 10
    branchOrTag=$branch
    return 0 # switched to dev branch
  elif [[ $status == 'noVTag' ]]; then
    # no vtag, stay in dev mode
    branch_checkout "$branch" "$forceCheckout" "$alias" || return 10
    branchOrTag=$branch
    return 1  # never published
  elif [[ $status == 'vnodeOnly' ]]; then
    # preview mode, stay in dev mode
    branch_checkout "$branch" "$forceCheckout" "$alias" || return 10
    branchOrTag=$vtag
    return 2  # vnode only
  elif [[ $status == 'vnode' ]]; then
    # preview mode, stay in dev mode
    branch_checkout "$branch" "$forceCheckout" "$alias" || return 10
    branchOrTag=$vtag
    return 3  # vnode
  elif [[ $status == 'vtag' ]]; then
    # already published
    if [ $delta -ge 0 ]; then
      # dev == prod (branch == vtag)
      branch_checkout "$vtag" "$forceCheckout" "$vtag" || return 10
      branchOrTag=$vtag
      return 4  # already published
    elif [ $delta -lt 0 ]; then
      branch_try_attach "$vtag" "$branch" "$forceCheckout" || return 10
      branchOrTag=$vtag
      return 5  # vtag is more recent
    else
      io_error "_branch_set_select_auto_core: delta '$delta' not implemented" "$moduleTracePrefix"
    fi
  else
    io_error "_branch_set_select_auto_core: status '$status' not implemented" "$moduleTracePrefix"
  fi
}
