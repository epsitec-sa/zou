#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select
ZOUL_GIT_BRANCH_SELECT=true

[[ -z $ZOUL_GIT_REF ]]         && . zoul-git-ref
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# Use this method to find the development branch which best matches
# any superproject branch (dev|prod)
# in:
#   $1: sku
# out:
#   bestMatch -- local or remote dev branch
branch_best_match_dev()
{
  local patterns=$(ref_dev_fallback $1) \
        branches=( $(branch_list_local) ) \
        remoteIndex=${#branches[@]}
        
  branches+=( $(branch_list_remote_untracked) )
  local pattern i branch lbranch
  # try to find a branch matching bundle branch name
  for pattern in $patterns; do
    for i in ${!branches[@]}; do
      branch=${branches[i]}
      (( $i < $remoteIndex )) && lbranch=$branch || lbranch=${branch#*/}
      [[ $lbranch == $pattern ]] && {
        echo $branch
        return 0
      }
    done
  done
  return 1
}
branch_best_match_prod()
{
  local sku=$1 branch
  branch=$(branch_realize $sku 2>/dev/null)
  if [ $? -le 1 ]; then
    echo $branch
  else
    vtag_get_vbranch_name $(vtag_describe $(branch_best_match_dev $sku))
  fi
}
# in:
#   $1: sku
#   $2: hint (dev|prod)
# out:
#   bestMatch -- local or remote branch
branch_best_match()
{
  # io_trace "branch_best_match ${*@Q}"
  local sku=$1 hint=$2
  if [[ $hint == 'prod' ]]; then
    vtag_get_vbranch_name $(vtag_describe $(branch_best_match_dev $sku))
  elif [[ $hint == 'dev' ]]; then
    branch_best_match_dev $sku
  else
    if branch_is_prod $sku; then
      branch_best_match_prod $sku
    else
      branch_best_match_dev $sku
    fi
  fi
}
# Compute tag properties
# in:
#   $1: ltag
# out:
#   vtag
#   delta
#   alias
vtag_set_info()
{
  # ZOU_TRACE=true io_trace "vtag_set_info ${*@Q}"
  local ltag=$1 lsuf
    # compute checkout alias
  if [[ -n $ltag ]]; then
    vtag=${ltag%-*-g*}
    lsuf=${ltag#$vtag}
    delta=${lsuf%-g*}
    delta=${delta#-}
    if [[ -z $delta ]]; then
      alias="$vtag"
      delta=0
    else
      alias="> $vtag ($delta)"
    fi
  fi
}
branch_select_auto()
{
  # # ZOU_TRACE=true io_trace "branch_select_auto ${*@Q}"

  local sku=$1 hint=$2 forceCheckout=${3:-true} mroot broot ec=0
  [[ -z $sku ]]   && sku=$bundleBranch
  [[ -z $sku ]]   && sku=$(branch_current_root_branch)
  [[ -z $mroot ]] && mroot=$moduleRoot
  [[ -z $mroot ]] && mroot=$(repo_module_root)
  [[ -z $broot ]] && broot=$bundleRoot
  [[ -z $broot ]] && broot=$(repo_bundle_root)
  

  local bestMatch=$(branch_best_match_dev "$sku")
  # ZOU_TRACE=true  io_trace "branch_select_auto -- $(print_vars sku hint bestMatch mroot broot)"
  if [[ "$mroot" == "$broot" || $hint == 'dev' ]]; then
    branch_select_branch "$bestMatch" "$forceCheckout" >/dev/null || ec=$?
  else
    branch_select_vtag  "$bestMatch" "$forceCheckout" >/dev/null || ec=$?
  fi
  if [ $ec -eq 10 ]; then
    # cannot checkout
    repo_require_clean_work_tree 'Cannot select'
  else
    branch_set_upstream "$bestMatch"
  fi
  return $ec
}
branch_select_branch()
{
  local branch=$1 forceCheckout=${2:-true}
  local vtag delta alias ec=0
  vtag_set_info $(vtag_describe $branch)
  
  # ZOU_TRACE=true io_trace "branch_select_branch ${*@Q} -- $(print_vars branch vtag delta alias)"
  branch_checkout "$branch" "$forceCheckout" "$alias" >/dev/null || return 10
  echo $branch
}
branch_select_vtag()
{
  # branch can be remote or local
  # ZOU_TRACE=true io_trace "branch_select_vtag ${*@Q}"
  local branch=$1 forceCheckout=${2:-true} ltag

  ltag=$(vtag_describe "$branch") || {
    branch_checkout "$branch" "$forceCheckout" || return 10
    echo $branch
    return 2  # no vtag
  }

  local vtag delta alias
  vtag_set_info $ltag
  # ZOU_TRACE=true io_trace "branch_select_vtag -- $(print_vars branch vtag delta alias)"
  if vtag_is_vnode $vtag; then
    branch_checkout "$branch" "$forceCheckout" "$alias" || return 10
    echo $vtag
    return 2  # vnode
  fi

  if [[ $delta -eq 0 ]]; then
    branch_checkout "$branch" "$forceCheckout" "$vtag" || return 10
    echo $vtag
    return 1  # branch == vtag
  fi

  if git merge-base --is-ancestor "$branch" "$vtag" >&2; then
    echo $vtag
    return 3  # vtag is more recent
  fi

  branch_try_attach "$vtag" "$branch" "$forceCheckout" || return 10
  echo $vtag
  return 0  # switched to vtag
}
