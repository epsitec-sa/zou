#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select
ZOUL_GIT_BRANCH_SELECT=true

[[ -z $ZOUL_GIT_REF ]]         && . zoul-git-ref
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# Use this method to find the development branch which best matches
# any superproject branch (dev|prod)
# in:
#   $1: sku
# out:
#   branch   -- local or remote
#   lbranch  -- local branch
# return:
#   1 -- not found
branch_set_best_match_dev()
{
  unset branch
  local patterns=$(ref_dev_fallback $1) \
        branches=( $(branch_list_local) ) \
        remoteIndex=${#branches[@]} \
        pattern b i
        
  branches+=( $(branch_list_remote_untracked) )
  # try to find a branch matching bundle branch name
  for pattern in $patterns; do
    for i in ${!branches[@]}; do
      b=${branches[i]}
      (( $i < $remoteIndex )) && lbranch=$b || lbranch=${b#*/}
      [[ $lbranch == $pattern ]] && {
        branch=$b
        return 0
      }
    done
  done
  unset lbranch
  return 1
}
# Create SKU selection information
#
# usage:
#   local branch lbranch vbranch vtag htag delta alias status
#   branch_set_select_info $sku $skipVNodes $allowDuplicateTags
#
#                       skipVNodes allowDuplicateTags
#   publish.submodule:    false        false 
#      publish.bundle:    false        true 
#    select.submodule:    true         false 
#       select.bundle:    true         true 
#
# in:
#   $1:sku=bundleBranch
#   $2:skipVNodes=true          -- false to publish,   true to select 
#   $3:allowDuplicateTags=true  -- false in submodule, true in bundle
# out:
#   branch    -- best match branch (local or remote)
#   lbranch   -- local branch name
#   vbranch   -- associated version branch
#   vtag      -- nearest vtag (depends on skipVNodes value)
#   htag      -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   delta     -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   alias     -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
#   status    -- vtag status
#                vnode       -- nearest vtag is a vnode (branch was never published on this vbranch)
#                vtag        -- nearest vtag is a vtag
#                vtagMissing -- no vtag found (branch was never published)
branch_set_select_info()
{
  unset branch lbranch vbranch vtag htag delta alias status
  local sku=${1:-$bundleBranch} skipVNodes=$2 allowDuplicateTags=$3 skip=${2:-true} ltag ec=0
  # io_trace "branch_set_select_info ${*@Q}"
  branch_set_best_match_dev "$sku"                   # -> branch lbranch
  vtag_set_describe "$branch" "$lbranch" "$skip" # -> ltag
  # io_trace "branch_set_select_info 1 -- $(print_vars sku skipVNodes allowDuplicateTags branch lbranch ltag alias)"
  if [[ -n $ltag ]]; then
    vtag_set_info $ltag         # -> vtag delta alias
    local folder version
    vtag_set_vbranch_name $vtag # -> vbranch folder version
    htag=$(vtag_highest $vbranch true)
    if [[ $htag != $vtag ]]; then
      if ! git merge-base --is-ancestor "$branch" "$htag" >&2; then
        # retry without skipping vnodes
        if [[ -z $skipVNodes && $skip == true ]]; then
          branch_set_select_info "$sku" false "$allowDuplicateTags"
          return $?
        else
          io_message "Branch '$lbranch' was never published as '$htag'" "$moduleTracePrefix" LightPurple
        fi
      fi
      delta=$(( -$(git rev-list --count $vtag..$htag) ))
      # io_trace "branch_set_select_info 2 -- $(print_vars sku skipVNodes allowDuplicateTags branch lbranch vbranch ltag vtag htag delta alias status)"
      vtag=$htag
      alias="< $vtag ($delta)" # (master < v2.0.0 (8))
    fi
    [ $delta -ne 0 ] && alias="$lbranch $alias" # (master > v2.0.0 (8))

    if [[ $allowDuplicateTags != true ]]; then
      htag=$(vtag_highest $vbranch false)
    fi
    # vnode or vtag
    vtag_is_vnode $vtag && status='vnode' || status='vtag'
    # io_trace "branch_set_select_info 3 -- $(print_vars sku skipVNodes allowDuplicateTags branch lbranch vbranch ltag vtag htag delta alias status)"
  else
    # compute alias without skipping vnodes
    if [[ $skip == true ]] && ltag=$(vtag_describe "$branch" false) && vtag_set_info $ltag; then
      [ $delta -ne 0 ] && alias="$branch $alias" # (master > v2.0.0 (8))
    else
      alias='<>'
    fi
    unset vbranch vtag htag delta
    status='vtagMissing'
    # io_trace "branch_set_select_info 4 -- $(print_vars sku skipVNodes allowDuplicateTags branch lbranch vbranch vtag htag delta alias status)"
  fi
}
branch_ensure_attached()
{
  local sku=$1 branch vbranch vtag htag publishStatus
  ! branch_is_attached && branch_set_select_auto "$sku" false false false
}
# Select branch or vtag and return publish status
# - if checkout fails, display repo status
# - if checkout succeeds, push branch
#
# usage:
#  local branch vbranch vtag htag publishStatus
#  branch_set_select_auto $sku $forceDev $forceCheckout $skipVNodes $allowDuplicateTags
#
# in:
#   $1:sku
#   $2:forceDev           -- force checkout of dev branch
#   $3:forceCheckout=true -- checkout even if already checked out (display already checked out message)
#   $4:skipVNodes=true    -- always select vtag if true        (false to publish,   true to select)
#   $5:allowDuplicateTags -- influence highest tag computation (false in submodule, true in bundle)
# out:
#   branch        -- best match branch (local name)
#   vbranch       -- associated version branch
#   vtag          -- nearest vtag (depends on skipVNodes value)
#   htag          -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   publishStatus -- publish status
#                    error
#                    unpublishable
#                    published
#                    notPublished
#                    ffPublish
branch_set_select_auto()
{
  unset branch vbranch vtag htag publishStatus

  local sku=$1 forceDev=${2:-false} forceCheckout=${3:-true} skipVNodes=$4 allowDuplicateTags ec=0

  [[ -z $sku ]]   && sku=$bundleBranch
  [[ -z $sku ]]   && sku=$(branch_current_root_branch)
  [[ -z $allowDuplicateTags && -n $moduleRoot && $moduleRoot == $bundleRoot ]] && allowDuplicateTags=true


  local lbranch delta alias status head
  # io_trace "branch_set_select_auto 1 -- $(print_vars sku forceDev forceCheckout skipVNodes allowDuplicateTags mroot broot)"
  _branch_set_select_auto_core || ec=$?
  # io_trace "branch_set_select_auto 2 -- $(print_vars branch vbranch vtag htag alias status publishStatus ec)"

  if [ $ec -ne 0 ]; then
    repo_require_clean_work_tree "Cannot switch to '$branch'"
  else
    branch_set_upstream "$branch"
  fi
  return $ec
}
# in:
#   sku forceDev forceCheckout skipVNodes allowDuplicateTags
# out:
#   branch lbranch vbranch vtag htag delta alias status -- herited from branch_set_select_info
#   head          -- new head after checkout
#   publishStatus -- publish status
#                    error
#                    unpublishable
#                    published
#                    notPublished
#                    ffPublish
_branch_set_select_auto_core()
{
  unset branch lbranch vbranch vtag htag delta alias status head publishStatus
  branch_set_select_info "$sku" "$skipVNodes" "$allowDuplicateTags" # -> branch lbranch vbranch vtag htag delta alias status
  publishStatus='error'
  branch=$lbranch # work with local branch name
  head=$branch    # default ref to checkout
  # io_trace "_branch_set_select_auto_core -- $(print_vars branch vbranch vtag htag alias status publishStatus ec)"
  if [[ $status == 'vtagMissing' ]]; then
    # no vtag, stay in dev mode
    publishStatus='unpublishable'
  elif [[ $status == 'vtag' ]]; then
    # published at least once on this vbrnach
    if [ $delta -eq 0 ]; then
      # head has not been moved since last publish, stay in dev mode
      publishStatus='published'
    else
      # head has been moved since last publish, move to last vtag unless dev mode is forced
      [[ $forceDev == true ]] || head=$vtag
      [ $delta -gt 0 ] \
        && publishStatus='notPublished' \
        || publishStatus='ffPublish'
    fi
  elif [[ $status == 'vnode' ]]; then
    # never published on this vbranch, stay in dev mode
    publishStatus='notPublished'
  else
    io_error "_branch_set_select_auto_core: status '$status' not implemented" "$moduleTracePrefix"
    return 1
  fi
  branch_checkout "$head" "$forceCheckout" "$alias"
}
