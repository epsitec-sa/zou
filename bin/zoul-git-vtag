#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VTAG ]] && . zoul-git-vtag
ZOUL_GIT_VTAG=true

[[ -z $ZOUL_CORE ]]            && . zoul-core
[[ -z $ZOUL_GIT_CORE ]]        && . zoul-git-core
[[ -z $ZOUL_GIT_REF ]]         && . zoul-git-ref

# Tokenize semver tag
# in:
#   $1:ref                              x/y/v1.2.3-rc4+meta
# out:
#   ${BASH_REMATCH[1]} -- folder        x/y/
#   ${BASH_REMATCH[2]} -- major         1
#   ${BASH_REMATCH[3]} -- minor         2
#   ${BASH_REMATCH[4]} -- tail          .3-rc4+meta
#   ${BASH_REMATCH[5]} -- patch         3
#   ${BASH_REMATCH[6]} -- prel          -rc4
#   ${BASH_REMATCH[7]} -- prel-pfx      -rc 
#   ${BASH_REMATCH[8]} -- prel-rev      4
#   ${BASH_REMATCH[9]} -- meta          +meta
# return:
#   0 if ref is a semver 2.0 tag
vtag_is_semver() { [[ $1 =~ ^(.*/)?v([0-9]+)\.([0-9]+)(-@|.([0-9]+)((-alpha|-beta|-rc)([0-9]+))?(\+.+)?)$ ]]; }

# Tokenize vnode
# in:
#   $1:ref                              x/y/v1.2-@
# out:
#   ${BASH_REMATCH[1]} -- folder        x/y/
#   ${BASH_REMATCH[2]} -- major         1
#   ${BASH_REMATCH[3]} -- minor         2
#   ${BASH_REMATCH[4]} -- tail          -@
# return:
#   0 if ref is a vnode
vtag_is_vnode()  { [[ $1 =~ ^(.*/)?v([0-9]+)\.([0-9]+)(-@) ]]; }

# get highest version on a specific vbranch
# - a bundle can have the same version twice (SKU version)
#   sku/sal/v13.1.0
#   sku/acc/v13.1.0 - OK
# - a submodule must not have twice the same version (module version)
#   v1.0.0
#   sku/sal/v1.0.0 - WRONG
#   sku/sal/v1.0.1 - OK
# in:
#   $1 -- vbranch
#   $2 -- allowDuplicates (default to true in bundle, false in submodule)
#         true  : limit to vtags with same vbranch version and folder
#         false : take in account all vtags with same vbranch version
#         empty : true in bundle, false in submodule
#   $3 -- vnodes
#         true  : include vnodes
#         empty : skip vnodes
# stdout:
#   htag -- highest version tag
# exemple:
#   tags: v1.0.0 v1.0.1 v1.0.2 sku/v1.0.0 sku/v1.0.1
#   vtag_highest 1.0          -> v1.0.2
#   vtag_highest 1.0     true -> v1.0.2
#   vtag_highest sku/1.0      -> sku/v1.0.2 (does not exist - used as a base for next vtag computation)
#   vtag_highest sku/1.0 true -> sku/v1.0.1
vtag_highest()
{
  local vbranch=$1 allowDuplicates=$2 skipVNodes=$3
  # io_trace "vtag_highest -- $(print_vars vbranch allowDuplicateTags skipVNodes)"

  if [[ $vbranch =~ ^(.*/)?([0-9]+\.[0-9]+) ]]; then
    local folder=${BASH_REMATCH[1]}
    local version=${BASH_REMATCH[2]}
    local regex
    [[ -z $allowDuplicates && $moduleRoot == $bundleRoot ]] && allowDuplicates=true
    if [[ $allowDuplicates == true ]]; then
      # restrict vtags to vbranch folder
      regex="^$(wildcard_to_regex $folder)v$(wildcard_to_regex $version)"
    else
      regex="^(.*/)?v$(wildcard_to_regex $version)"
    fi
    local tags=() tag
    for tag in $(git tag -l "*v${version}*"); do
      [[ $tag =~ ^other/ ]] && continue
      [[ $skipVNodes == true && $tag =~ -@$ ]] && continue
      if [[ $tag =~ $regex ]]; then
        if [[ $allowDuplicates == true ]]; then
          tags+=( "$tag" )
        else
          # replace vtag folder with vbranch folder
          tags+=( "$folder${tag##*/}" )
        fi
      fi
    done
    # io_trace "vtag_highest $(print_vars vbranch tags[@])"
    vtag_highest_of "${tags[@]}"
  else
    mio_error "vbranch invalid format : '$1'"
    return 1
  fi
}
# find first vtag ancestor starting from given commit
# usage:
#  local branch lbranch
#  branch_set_best_match_dev "$sku"
#  local vbranch vtag delta alias
#  vtag_set_describe "$branch" "$lbranch" $skipVNodes
#  
# in:
#   $1:branch     -- local or remote branch name
#   $2:lbranch    -- local branch name
#   $3:skipVNodes -- (auto | true | *)
#                 -- auto - match vtag  then match vnode then fallback
#                 -- true - match vtag  then fallback
#                 -- *    - match vnode then fallback
# out:
#   vbranch -- the infered vbranch name 
#   vtag    -- the highest vtag that match the glob
#   delta   -- number of commits between branch and vtag (extracted from ltag)
#   alias   -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
vtag_set_describe()
{
  local branch=$1 lbranch=${2:-$1} skipVNodes=$3 strict=$4 \
        ltag stag match fallback
  
  fallback=( $(ref_tag_fallback "$lbranch" 'v[0-9]*' "$strict") )

  # io_trace "vtag_set_describe 1 -- $(print_vars branch lbranch skipVNodes fallback[@] strict)"
  for match in "${fallback[@]}"; do
    case $SkipVNodes in
    auto) ltag=$(_vtag_describe '*-@') || ltag=$(_vtag_describe);;
    true) ltag=$(_vtag_describe '*-@');;
    *)    ltag=$(_vtag_describe);;
    esac
    # io_trace "vtag_set_describe 2 -- $(print_vars branch lbranch skipVNodes match ltag)"
    if [[ -n $ltag ]]; then
      stag=${ltag%-*-g*}
      if git merge-base --is-ancestor $stag^{} $branch; then
        _vtag_set_info "$ltag" "$stag" "$match" # -> vbranch vtag delta alias
        # io_trace "vtag_set_describe 3 -- $(print_vars vbranch vtag delta alias)"
        return 0
      fi
    fi
  done
  vbranch=''; vtag=''; alias='<>'; delta=0
  # io_trace "vtag_set_describe 4 -- $(print_vars vbranch vtag delta alias)"
  return 1
}
_vtag_describe()
{
  local exclude=() pattern
  for pattern; do exclude+=('--exclude' "$pattern"); done
  git describe --tags --match "$match" --exclude 'other/*' --exclude '_*' ${exclude[@]} -- "$branch" 2>/dev/null  
}
# Compute tag properties
# in:
#   $1: ltag  -- long tag description (ex: v1.0.0-g8-16ef0ca)
#   $2: stag  -- short tag description (ex: v1.0.0)
#   $3: match -- glob to match (ex: v[0-9]*)
# out:
#   vbranch -- the infered vbranch name 
#   vtag    -- the highest vtag that match the glob
#   delta   -- number of commits between branch and vtag (extracted from ltag)
#   alias   -- condensed vtag info - (> v1.0.0 (8)) means branch is ahead of v1.0.0 by 8 commits
_vtag_set_info()
{
  local ltag=$1 stag=$2 regex=$(wildcard_to_regex_match_whole $3) lsuf vtags
  # io_trace "_vtag_set_info 1 -- $(print_vars ltag stag regex)"

  lsuf=${ltag#$stag}
  delta=${lsuf%-g*}
  delta=${delta#-}
  delta=${delta:-0}

  # infer vbranch name
  [[ $stag =~ ^(.*/)?v([0-9]+\.[0-9]+)(\.|-) ]]
  vbranch=${BASH_REMATCH[1]}${BASH_REMATCH[2]};

  # get the highest vtag pointing at the same commit that matches given regex
  vtags=$(vtag_match_vtags_at "$stag^{}" "$regex")
  vtag=$(vtag_highest_of $vtags)
  # io_trace "_vtag_set_info 2 -> $(print_vars vtags vtag delta alias)"
}
# out:
#   alias
vtag_format_alias()
{
  local vtag=$1 delta=${2:-0}
  if [[ -z $vtag ]]; then
    alias="${Purple}<>"
  else
    local prefix color
    if [ $delta -gt 0 ]; then
      prefix="${Brown}>($delta) "
    elif [ $delta -lt 0 ]; then
      prefix="${Brown}<($((-delta))) "
    fi
    if [[ $vtag =~ -@$ ]]; then
      color=${LightPurple}
    elif [ $delta -eq 0 ]; then
      color=${LightGreen}
    else
      color=${Green}
    fi
    alias="${prefix}${color}$vtag"
  fi
}
# list all vtags pointing at given commit that match a regex
# input:
#  $1:ref    -- commish
#  $2:regex  -- regex to match with
# output:
#  list of vtags pointing at given commit (given ref will be omitted)
vtag_match_vtags_at()
{
  # io_trace "vtag_match_vtags_at ${*@Q}"
  local ref=$1 regex=$2 tags tag
  for tag in $(git tag --sort=-v:refname -l --points-at "$ref"); do
    # io_trace "vtag_match_vtags_at -- $(print_vars ref regex tag)"
    [[ $tag == $ref ]] && continue
    [[ $tag =~ $regex ]] && echo $tag
    vtag_match_vtags_at "$tag" "$match"
  done
}
vtag_highest_of()
{
  # io_trace "vtag_highest_of ${*@Q}"
  if [ $# -eq 1 ]; then
    echo $1
  else
    local highest=$1 cc=0; shift
    while [[ -n $1 ]]; do
      vtag_compare $1 $highest 2>/dev/null
      [ $? -eq 1 ] && highest=$1
      shift
    done
    echo $highest
  fi
}
# output:
# - -1: $1 <  $2 (255)
# -  0: $1 == $2
# -  1: $1 >  $2
vtag_compare()
{
  if vtag_is_semver $1; then
    local major1=${BASH_REMATCH[2]}
    local minor1=${BASH_REMATCH[3]}
    local patch1=${BASH_REMATCH[5]}
    local prerel1=${BASH_REMATCH[6]}
    local prerelPrefix1=${BASH_REMATCH[7]}
    local prerelRev1=${BASH_REMATCH[8]}
    local meta1=${BASH_REMATCH[9]}
    if vtag_is_semver $2; then
      local major2=${BASH_REMATCH[2]}
      local minor2=${BASH_REMATCH[3]}
      local patch2=${BASH_REMATCH[5]}
      local prerel2=${BASH_REMATCH[6]}
      local prerelPrefix2=${BASH_REMATCH[7]}
      local prerelRev2=${BASH_REMATCH[8]}
      local meta2=${BASH_REMATCH[9]}

      [[ $1 == $2 ]] && return 0
      (( $major1 < $major2 )) && return -1
      (( $major1 > $major2 )) && return  1
      (( $minor1 < $minor2 )) && return -1
      (( $minor1 > $minor2 )) && return  1
      [[ -z $patch1 && -z $patch2 ]] && return  0  # both vnodes
      [[ -z $patch1 && -n $patch2 ]] && return -1
      [[ -n $patch1 && -z $patch2 ]] && return  1
      (( $patch1 < $patch2 )) && return -1
      (( $patch1 > $patch2 )) && return  1

      [[ $prerel1 == $prerel2 ]] && return 0
      [[ -n $prerel1 && -z $prerel2 ]] && return -1
      [[ -z $prerel1 && -n $prerel2 ]] && return  1
      [[ $prerelPrefix1 < $prerelPrefix2 ]] && return -1
      [[ $prerelPrefix1 > $prerelPrefix2 ]] && return  1
      (( prerelRev1 < prerelRev2 )) && return -1
      (( prerelRev1 > prerelRev2 )) && return  1

      [[ $meta1 == $meta2 ]] && return 0
      [[ -n $meta1 && -z $meta2 ]] && return  1
      [[ -z $meta1 && -n $meta2 ]] && return -1
      [[ $meta1 < $meta2 ]] && return -1
      [[ $meta1 > $meta2 ]] && return  1
      
      return 0
    else
      mio_error "vtag_compare: invalid vtag format: $2"
    fi
  else
    mio_error "vtag_compare: invalid vtag format: $1"
  fi
}
vtag_increment()
{
  local vnext
  vtag_set_increment "$@" && echo $vnext
}
# in:
#   vtag=$1
#   prerelPrefix=$2
# out:
#   vnext
vtag_set_increment()
{
  vnext=''
  local vtag=$1 prerelPrefix=$2 prerelDefault rtm
  [[ $prerelPrefix == 'rtm' ]] && { prerelPrefix=''; rtm=true; }
  [[ -n $prerelPrefix ]] && prerelDefault=-${prerelPrefix}1
  #  <major>.<minor>-@
  #  <major>.<minor>.<patch>[-<pre-release>][+<meta>]-<delta>-g<sha1>
  if [[ $vtag =~ ^(.*/)?v([0-9]+)\.([0-9]+)(\.|-)(.*)$ ]]; then
    local prefix=${BASH_REMATCH[1]}
    local major=${BASH_REMATCH[2]}
    local minor=${BASH_REMATCH[3]}
    local patch=${BASH_REMATCH[5]}
    if [[ $patch == '@' ]]; then
      io_debug patch vtag_increment
      vnext="${prefix}v$major.$minor.0$prerelDefault"
    elif [[ $patch =~ ^([0-9]+)(\.[0-9]+)?(-[[:alnum:]]+)?(\+.+)?$ ]]; then
      patch=${BASH_REMATCH[1]}
      local build=${BASH_REMATCH[2]}
      local prerel=${BASH_REMATCH[3]}
      local meta=${BASH_REMATCH[4]}
      if [[ $prerel =~ -(alpha|beta|rc)([0-9]*) ]]; then
        if [[ -n $rtm ]]; then
          vnext="${prefix}v$major.$minor.$patch"
        else
          local actual_prerelPrefix=${BASH_REMATCH[1]}
          local prerel_rev=${BASH_REMATCH[2]}
          if [[ $prerelPrefix > $actual_prerelPrefix ]]; then
            prerel_rev=1
          else
            prerelPrefix=$actual_prerelPrefix
            (( prerel_rev = prerel_rev + 1 ))
          fi
          prerel=-$prerelPrefix$prerel_rev
          vnext="${prefix}v$major.$minor.$patch$prerel"
        fi
      else
        vnext="${prefix}v$major.$minor.$((patch+1))$prerelDefault"
      fi
    fi
  fi
  if [[ -z $vnext ]]; then
    mio_error "vtag_increment: wrong vtag format: $vtag"
    return 1
  fi
}

