#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_PROD ]] && . zoul-git-prod
ZOUL_GIT_PROD=true

[[ -z $ZOUL_GIT_REF ]]            && . zoul-git-ref
[[ -z $ZOUL_GIT_VBRANCH ]]        && . zoul-git-vbranch
[[ -z $ZOUL_GIT_BRANCH_CORE ]]    && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]   && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version

########################################################
# GLOBALS

branchFetchAll='false'

########################################################
# EVENTS

prodPreinitEvent=()
prod_raise_preinit_event() { raise_event 'prodPreinitEvent[@]' "$@"; }

headChangedEvent+=( prod_reset_scope )
headNameChangedEvent+=( prod_reset_scope )
mergeSuccessEvent+=( prod_reset_scope )
branchCreatedEvent+=( _prod_on_branch_created )
branchDeletedEvent+=( _prod_on_branch_deleted )

_prod_on_branch_created()
{
  [[ $1 =~ ^(.*/)?[0-9]+\.[0-9]+ ]] && prod_reset_scope "$@"
}
_prod_on_branch_deleted()
{
  [[ $1 =~ ^(.*/)?[0-9]+\.[0-9]+ ]] && prod_reset_scope "$@"
}

########################################################
# SCOPE

prod_run() { module_run prod_scope "$@"; }

# usage:
#   module_run prod_scope $*
prod_scope()
{
  # io_trace "prod_scope ${*@Q}"
  # setup prod context
  # prodCheckoutType -- (vlast|vnext|dev)
  # vtagResolveMode  -- (auto|vtag|*)
  local prodScopeInitialized=true \
        prodBranch prodBranchPath \
        prodVTag prodHTag prodAlias devAlias prod2devAlias dev2prodAlias moduleAlias \
        vtagStatus vtag2dev vtag2prod \
        releaseVTag releasePrerelPrefix releaseStatus \
        prodCheckoutType vtagResolveMode
  
  [[ $branchFetchAll == true ]] && branch_fetch_all
  prod_reset_scope

  # execute next russian doll
  # io_trace "prod_scope >> $*"
  $1 "${@:2}"
  # io_trace "prod_scope << $*"
}
prod_reset_scope()
{
  # avoid prematured event processing
  [[ $prodScopeInitialized == true ]] || return 0

  # io_trace "prod_reset_scope ${*@Q}"
  prod_raise_preinit_event

  _prod_init_vars

  if [[ $configSelectIsExcluded == true ]]; then
    _prod_init_xscope
  else
    _prod_init_scope "$moduleHead"
  fi
}
_prod_reset_alias()
{
  if module_in_prod_mode; then
    # if [[ -z $dev2prodAlias ]]; then
    #   moduleAlias="$prodAlias"
    # elif (( $prod2dev != 0 )); then
      moduleAlias="$prodAlias${White} / $dev2prodAlias"
    # fi
  else
    # if [[ -z $prod2devAlias ]]; then
    #   moduleAlias="$devAlias"
    # elif (( $prod2dev != 0 )); then
      moduleAlias="$devAlias${White} / $prod2devAlias"
    # fi
  fi
  # io_trace "_prod_reset_alias $(print_vars moduleAlias)"
}
_prod_trace()
{
  [[ $zouTraceScope == true ]] || return 0

  io_lock_enter
  case $1 in
  _prod_*)
    io_trace "$1 -- $(print_vars prodBranch prodBranchPath prodCheckoutType)"
    io_trace "$1 -- $(print_vars vtagStatus prodVTag prodHTag pmProdHTag)"
    io_trace "$1 -- $(print_vars vtag2dev vtag2prod prod2dev vtagResolveMode)"
    io_trace "$1 -- $(print_vars prodAlias devAlias prod2devAlias dev2prodAlias moduleAlias)"
    io_trace "$1 -- $(print_vars releaseStatus releaseVTag releasePrerelPrefix)"
    ;;
  *)
    io_trace "$1 -- $(print_vars prodBranch)"
    io_trace "$1 -- $(print_vars prodBranchPath)"
    io_trace "$1 -- $(print_vars prodCheckoutType)"
    io_trace "$1 -- $(print_vars vtagStatus)"
    io_trace "$1 -- $(print_vars prodVTag)"
    io_trace "$1 -- $(print_vars prodHTag)"
    io_trace "$1 -- $(print_vars pmProdHTag)"
    io_trace "$1 -- $(print_vars vtag2dev)"
    io_trace "$1 -- $(print_vars vtag2prod)"
    io_trace "$1 -- $(print_vars prod2dev)"
    io_trace "$1 -- $(print_vars vtagResolveMode)"
    io_trace "$1 -- $(print_vars prodAlias)"
    io_trace "$1 -- $(print_vars devAlias)"
    io_trace "$1 -- $(print_vars prod2devAlias)"
    io_trace "$1 -- $(print_vars dev2prodAlias)"
    io_trace "$1 -- $(print_vars moduleAlias)"
    io_trace "$1 -- $(print_vars releaseStatus)"
    io_trace "$1 -- $(print_vars releaseVTag)"
    io_trace "$1 -- $(print_vars releasePrerelPrefix)"
    ;;
  esac
  io_lock_exit
}

########################################################
# SCOPE INITIALIZATION

_prod_init_vars()
{
  prodBranch=''; prodBranchPath=''; prodVTag=''; prodHTag=''
  vtagStatus='vtagMissing'; vtag2dev=0; vtag2prod=0; prod2dev=0
  releasePrerelPrefix=''; releaseStatus='error'
  local alias; vtag_format_alias
  prodAlias=$alias; devAlias=$alias; prod2devAlias=$alias; dev2prodAlias=$alias; moduleAlias=$alias

  [[ $prodCheckoutType == 'vlast' ]] && vtagResolveMode='auto' || vtagResolveMode='first'

  # io_trace "_prod_init_vars -- $(print_vars prodAlias devAlias prod2devAlias dev2prodAlias moduleAlias prodCheckoutType vtagResolveMode)"
}
_prod_init_scope()
{
  local devBranchPath=$1 devBranch=${2:-$1} vbranchCreate=$3 \
        vbranch vtag htag delta=0 status

  # 1. Retrieve vtag and vbranch info starting from dev branch
  vtag_set_describe "$devBranchPath" "$devBranch" "$vtagResolveMode" "true" # -> vbranch vtag delta
  # io_trace "#### _prod_init_scope ${*@Q} -- $(print_vars devBranchPath devBranch vbranchCreate vbranch vtag delta pmProdHTag)"
  if [[ -n $pmProdHTag ]]; then
    vtag="$pmProdHTag"
    htag="$pmProdHTag"
    releaseVTag=$pmProdHTag
  fi

  if [[ -n $vtag ]]; then
    _prod_init_dev "$vbranchCreate"

    # 2. Retrieve vtag and vbranch info starting from prod branch
    if [[ -z $prodBranchPath ]]; then
      _prod_set_no_prod_info "$vtag"
    else
      _prod_set_prod_info
    fi
    _prod_init_prod
  else
    status='vtagMissing'
    _prod_init_vars
    _prod_init_dev false
  fi
  _prod_init_release_status "$delta" "$status"

  unset pmProdHTag
  # io_trace "<<<< _prod_init_scope ${*@Q} -- $(print_vars devBranchPath devBranch vbranchCreate vbranch vtag delta pmProdHTag)"

  _prod_trace '_prod_init_scope'
}
_prod_init_xscope()
{
  local vbranch vtag htag delta=0 status

  # io_trace "_prod_init_xscope 1 -- $(print_vars moduleHead)"
  vtag_set_describe "$moduleHead" "$moduleHead" # -> vbranch vtag delta
  if [[ -n $vtag ]]; then
    _prod_init_dev false

    # 2. Retrieve vtag and vbranch info starting from prod branch
    if [[ -z $prodBranchPath ]]; then
      _prod_set_no_prod_info "$vtag"
    else
      _prod_set_xprod_info
    fi
    _prod_init_prod
    releaseStatus='released'
  fi

  _prod_trace '_prod_init_xscope'
}
_prod_init_dev()
{
  local vbranchCreate=$1
  if [[ -n $vbranch ]]; then
    local branch lbranch bref
    branch_set_realize "$vbranch"
    if [[ -z $branch && $vbranchCreate == true ]]; then
      branch_create "$vbranch" "$vtag"
      branch_set_realize "$vbranch"
    fi
    prodBranchPath=$branch
    prodBranch=$lbranch
    # io_trace "_prod_init_dev -1- $(print_vars prodBranch prodBranchPath vbranch)"
  fi
  prodVTag=$vtag
  vtag2dev=$delta

  local alias
  vtag_format_alias "$vtag" "$delta"
  devAlias=$alias
  moduleAlias=$alias
  # io_trace "_prod_init_dev -2- $(print_vars vtag devAlias moduleAlias)"
}
_prod_init_prod()
{
  prodVTag=$vtag
  prodHTag=$htag
  vtag2prod=$delta
  vtagStatus=$status
  # io_trace "_prod_init_prod -1- $(print_vars prodVTag prodHTag releaseVTag)"
  [[ -z $releaseVTag ]] && releaseVTag=$vtag
  vtag_is_semver "$vtag" && releasePrerelPrefix=${BASH_REMATCH[7]#-}
  # io_trace "_prod_init_prod -2- $(print_vars prodVTag prodHTag releaseVTag)"

  local alias
  vtag_format_alias "$vtag" "$delta"
  prodAlias=$alias

  prod2dev=$(( $(gitx rev-list --count $prodBranchPath..$moduleDevBranchPath 2>>"$stderrRedir") ))
  if [ $prod2dev -eq 0 ]; then
    prod2dev=$(( -$(gitx rev-list --count $moduleDevBranchPath..$prodBranchPath 2>>"$stderrRedir") ))
  fi
  # io_trace "_prod_init_prod -3- $(print_vars prodBranchPath moduleDevBranchPath prod2dev)"
  vtag_format_alias "$prodBranch" "$prod2dev"
  prod2devAlias=$alias
  vtag_format_alias "$moduleDevBranchPath" "$((-$prod2dev))"
  dev2prodAlias=$alias

  _prod_reset_alias
}
# usage:
#   local vbranch vtag htag delta status
#   _prod_set_prod_info
# scope:
#   devBranch devBranchPath prodBranch prodBranchPath
# out:
#   vbranch   -- associated version branch
#   vtag      -- nearest vtag (depends on skipVNodes value)
#   htag      -- highest vtag on vbranch (depends on allowDuplicateTags value)
#   delta     -- number of commits between branch and vtag (can be negative if branch is behind vtag)
#   status    -- vnode       -- nearest vtag is a vnode (branch was never released on this vbranch)
#                vtag        -- nearest vtag is a vtag
#                vtagMissing -- no vtag found (branch was never released)
_prod_set_prod_info()
{
  vtag_set_describe "$prodBranchPath" "$prodBranch" "$vtagResolveMode" "true" # -> vbranch vtag delta
  if [[ $vbranch != $prodBranch ]]; then
    mio_message "${Magenta}Branches ${VC}$prodBranch${Magenta} and ${VC}$vbranch${Magenta} are both descendants of (${VC}$vtag${Magenta})"
    return 1
  fi
  # get highest tag in same folder
  htag=${pmProdHTag:-$(vtag_highest "$vbranch" true)}   # in same folder
  # io_trace "_prod_set_prod_info 1 -- $(print_vars prodBranch prodBranchPath vbranch vtag htag delta)"
  if [[ $htag != $vtag ]]; then
    vtag=$htag
    delta=$(( $(gitx rev-list --count $vtag..$prodBranchPath 2>>"$stderrRedir") ))
    # io_trace "_prod_set_prod_info 2 -- $(print_vars prodBranch vbranch vtag htag delta)"
  fi
  if ! module_is_bundle; then
    htag=${pmProdHTag:-$(vtag_highest "$vbranch" false)} # in all folders
  fi
  # vnode or vtag
  vtag_is_vnode $vtag && status='vnode' || status='vtag'
  # io_trace "_prod_set_prod_info 3 -- $(print_vars prodBranch vbranch vtag htag status)"
}
_prod_set_xprod_info()
{
  vtag_set_describe "$prodBranchPath" "$prodBranch" "$vtagResolveMode" "true" # -> vbranch vtag delta
  # io_trace "_prod_set_xprod_info 1 -- $(print_vars prodBranch vbranch vtag htag delta)"
  if module_is_bundle; then
    htag=$(vtag_highest $vbranch true)
  else
    htag=${pmProdHTag:-$(vtag_highest $vbranch false)}
  fi
  # vnode or vtag
  vtag_is_vnode $vtag && status='vnode' || status='vtag'
  # io_trace "_prod_set_xprod_info 2 -- $(print_vars prodBranch vbranch vtag htag status)"
}
# in:  vtag
# out: htag delta status
_prod_set_no_prod_info()
{
  local vtag=$1
  htag=$vtag
  delta=0
  if [[ -z $vtag ]]; then
    status='vtagMissing'
  else
    vtag_is_vnode $vtag && status='vnode' || status='vtag'
  fi
  # io_trace "_prod_set_no_prod_info -- $(print_vars vtag htag delta status)"
}
# in:  delta status
# out: releaseStatus -- (error, unreleasable, released, unreleased, ffRelease)
_prod_init_release_status()
{
  local delta=$1 status=$2
  # io_trace "_prod_init_release_status -- $(print_vars delta status)"
  releaseStatus='error'
  if [[ $status == 'vtagMissing' ]]; then
    releaseStatus='unreleasable'
  elif [[ $status == 'vtag' ]]; then
    # released at least once on this vbranch
    if [ $delta -eq 0 ]; then
      # head has not been moved since last publish
      releaseStatus='released'
    elif [ $delta -gt 0 ]; then
      releaseStatus='unreleased'
    else
      # prod branch is behind vtag
      releaseStatus='ffRelease'
    fi
  elif [[ $status == 'vnode' ]]; then
    # never released on this vbranch
    releaseStatus='unreleased'
  else
    [[ -n "$status" ]] && mio_error "_prod_init_release_status: status '$status' not implemented"
    return 1
  fi
  # io_trace "_prod_init_release_status -> $(print_vars releaseStatus)"
}

########################################################
# CHECKOUT

# in:
#   $1:sku
#   $2:prodCheckoutType -- (vlast|vnext|dev) default to vlast
sku_checkout()
{
  # io_trace "sku_checkout ${*@Q}"
  local sku=$1 prodCheckoutType=${2:-dev} forceCheckout=$3 branch lbranch
  branch_set_best_match_dev "$sku"  # -> branch lbranch
  # io_trace "sku_checkout -- $(print_vars branch lbranch)"

  case $prodCheckoutType in
    vlast)  prod_checkout 'vlast' "$forceCheckout" "$lbranch";;
    vnext)  prod_checkout 'vnext' "$forceCheckout" "$lbranch";;
    dev)    dev_checkout          "$forceCheckout" "$lbranch";;
  esac
}
# in:
#   $1:prodCheckoutType   -- (vlast|vnext|dev)
#   $2:forceCheckout      -- force branch checkout even if head does not change
#   $3:devFallback        -- fallback to this dev branch if neither prod branch nor vtag exist 
#   $4:vnodeCheckoutProd  -- checkout production branch if vtag is a vnode
prod_checkout()
{
  local prodCheckoutType=$1 forceCheckout=$2 devFallback=$3 \
        vnodeCheckoutProd=${4:-true} pmProdHTag0=$pmProdHTag
  # io_trace ">>>> prod_checkout -- $(print_vars prodCheckoutType forceCheckout devFallback vnodeCheckoutProd vtagStatus prodBranch prodVTag moduleHead moduleDevBranch pmProdHTag)"
  

  if [[ -n $devFallback && $moduleDevBranch != $devFallback ]]; then
    local branch lbranch bref
    branch_set_realize "$devFallback"
    # io_trace "_prod_checkout -2- $(print_vars devFallback moduleDevBranch branch lbranch )"
    _prod_init_scope "$branch" "$lbranch" true
  else
    # io_trace "_prod_checkout -3- $(print_vars moduleHead moduleDevBranch )"
    _prod_init_scope "$moduleDevBranchPath" "$moduleDevBranch" true
  fi

  case $prodCheckoutType in
    vnext) _prod_checkout_vnext "$forceCheckout" "$devFallback" "$vnodeCheckoutProd";;
    vlast) _prod_checkout_vlast "$forceCheckout" "$devFallback" "$vnodeCheckoutProd";;
    *)     dev_checkout "$forceCheckout" "$devFallback";;
  esac

  pmProdHTag=$pmProdHTag0

  # io_trace "<<<< prod_checkout -- $(print_vars pmProdHTag prodHTag)"
}
_prod_checkout_vnext()
{
  local forceCheckout=$1 devFallback=$2 vnodeCheckoutProd=$3
  # io_trace "_prod_checkout_vnext -1- $(print_vars forceCheckout devFallback vnodeCheckoutProd )"
  if [[ -n $prodBranch ]]; then
    # io_trace "_prod_checkout_vnext -4- $(print_vars prodBranch )"
    branch_checkout "$prodBranch" "$forceCheckout"
  else
    # io_trace "_prod_checkout_vnext -5- $(print_vars devFallback )"
    _prod_checkout_vlast "$forceCheckout" "$devFallback" "$vnodeCheckoutProd"
    # dev_checkout "$forceCheckout" "$devFallback"
  fi
}
_prod_checkout_vlast()
{
  local forceCheckout=$1 devFallback=$2 vnodeCheckoutProd=$3
  # io_trace "_prod_checkout_vlast -1- $(print_vars forceCheckout devFallback vnodeCheckoutProd )"

  if [[ $vtagStatus == 'vtag' ]]; then
    # io_trace "_prod_checkout_vlast -2- $(print_vars prodVTag vtagStatus )"
    branch_checkout "$prodVTag" "$forceCheckout"
  elif [[ $vtagStatus == 'vnode' && $vnodeCheckoutProd == true ]]; then
    # io_trace "_prod_checkout_vlast -3- $(print_vars profBranch vtagStatus )"
    branch_checkout "$prodBranch" "$forceCheckout"
  else
    # io_trace "_prod_checkout_vlast -4- $(print_vars devFallback )"
    dev_checkout "$forceCheckout" "$devFallback"
  fi
}
dev_checkout()
{
  local forceCheckout=$1 devBranch=$2 strict=${3:true}
  # io_trace "dev_checkout -1- $(print_vars forceCheckout devBranch strict)"
  if [[ -z $devBranch ]]; then
    if module_is_bundle; then
      devBranch=$bundleDevBranch
    else
      local branch lbranch
      branch_set_best_match_dev "$bundleDevBranch" # -> branch lbranch
      devBranch=$lbranch
    fi
    # io_trace "dev_checkout -2- $(print_vars devBranch bundleDevBranch)"
  fi
  if [[ $strict == true ]]; then
    devBranch=$(wip_to_ref $devBranch)
  fi
  # io_trace "dev_checkout -3- $(print_vars devBranch bundleDevBranch)"
  branch_checkout "$devBranch" "$forceCheckout"
}

########################################################
# BRANCH CREATION

# Compute version branch
#
# usage:
#   local vbranch graftPoint
#   prod_set_vbranch 0.1 'minor'
#   [ $? -ne 0 ] && vbranch_create "$vbranch" "$graftPoint"
#
# in:
#   version=${1:-0.1}   -- default version if no vbranch exists
#   incrementKind=${2}  -- (minor|major)
#                       -- increment minor or major version if vbranch exists
# out:
#   vbranch -- version branch
#
# return:
#   0: vbranch exists
#   1: vbranch does not exist
#   255: error

prod_set_vbranch()
{
  local version=$1 incrementKind=$2
  # io_trace "prod_set_vbranch -1- -- $(print_vars version incrementKind)"
  if [[ $prodBranch =~ ^(.*/)?([0-9]+)\.([0-9]+)(.*)$ ]]; then
    local prodFolder=${BASH_REMATCH[1]} major=${BASH_REMATCH[2]} minor=${BASH_REMATCH[3]} suffix=${BASH_REMATCH[4]}
    
    # do not share prod branch by default - if not already shared, create vbranch in same folder as dev branch
    [[ $vtagStatus == 'vnode' && $(wip_to_ref $moduleDevBranch) =~ ^(.*/)? ]] && prodFolder=${BASH_REMATCH[1]}

    # update major and/or minor versions
    case $incrementKind in
      minor) (( minor += 1 ));;
      major) (( major += 1 )); minor=0;;
    esac
    vbranch="${prodFolder}${major}.${minor}${suffix}"
    graftPoint=$moduleDevBranchPath
    # io_trace "prod_set_vbranch -2- -- $(print_vars prodFolder major minor incrementKind prodBranch)"
    [[ $vbranch == $prodBranch ]]; ec=$?
    return $ec
  else
    local branch lbranch bref
    [[ $incrementKind == 'major' ]] && version=${version:-1.0} || version=${version:-0.1}
    branch_set_realize $(wip_to_ref $moduleDevBranch)
    # io_trace "prod_set_vbranch -3- -- $(print_vars version incrementKind prodBranch vtag2dev branch lbranch)"

    [[ $lbranch =~ ^(.*/)? ]] || return 255
    vbranch=${BASH_REMATCH[1]}$version
    graftPoint=$branch
    # io_trace "prod_set_vbranch -4- -- $(print_vars vbranch graftPoint)"
    return 1
  fi
}
# in:
#   version=${1:-0.1}   -- default version if no vbranch exists
#   incrementKind=${2}  -- (minor|major)
#                       -- increment minor or major version if vbranch exists
prod_ensure_vbranch()
{
  module_in_wip_mode && return 0

  local version=$1 incrementKind=$2 vbranch graftPoint ec
  prod_set_vbranch "$version" "$incrementKind"; ec=$?
  # io_trace "prod_ensure_vbranch -1- -- $(print_vars version incrementKind vbranch graftPoint ec)"
  case $ec in
    0) ;; # vbranch exists
    1) vbranch_create "$vbranch" "$graftPoint";;
    *) return $ec;;
  esac
  _prod_ensure_bundle_vbranch
}
_prod_ensure_bundle_vbranch()
{
  module_is_principal || return 0
  # io_trace "_prod_ensure_bundle_vbranch -- $(print_vars moduleId principalModuleId prodBranch)"
  local bundleScopes=( prod_scope )
  module_visit "$bundleRoot" "${bundleScopes[@]}" _prod_ensure_bundle_vbranch_core "$prodBranch"
}
_prod_ensure_bundle_vbranch_core()
{
  [[ $prodBranch == $1 ]] && return 0
  
  local principalBranch=$1 principalVersion principalSuffix \
        devFolder devBranch vbranch

  [[ $principalBranch =~ ^(.*/)?([0-9]+\.[0-9]+)(.*)$ ]]
  principalVersion=${BASH_REMATCH[2]}
  principalSuffix=${BASH_REMATCH[3]}

  devBranch=$(wip_to_ref "$moduleDevBranch")
  [[ $devBranch =~ ^(.*/) ]] && devFolder=${BASH_REMATCH[1]}

  vbranch=${devFolder}${principalVersion}${principalSuffix}
  # io_trace "_prod_ensure_bundle_vbranch_core ${*@Q} -- $(print_vars principalBranch principalVersion principalSuffix devFolder vbranch)"

  vbranch_create "$vbranch" "$moduleDevBranchPath"
}

########################################################
# RELEASE

prod_fix_release_status()
{
  local prerelPrefix=$1 forceRelease=$2 checkoutType=$3
  # io_trace "prod_fix_release_status 1 -- $(print_vars prerelPrefix forceRelease checkoutType releasePrerelPrefix releaseStatus)"
  _prod_should_release "$@" && releaseStatus='unreleased'
  [[ $checkoutType == 'vlast' && $releaseStatus == 'unreleased' && $vtagStatus == 'vtag' && $forceRelease != true ]] && releaseStatus='released'

  # io_trace "prod_fix_release_status 2 -- $(print_vars prerelPrefix forceRelease checkoutType releasePrerelPrefix releaseStatus)"
}
_prod_should_release()
{
  local prerelPrefix=$1 forceRelease=$2
  [[ $forceRelease == true ]] && return 0
  [[ $releaseStatus != 'released' ]] && return 1
  # io_trace "_prod_should_release 1 -- $(print_vars prerelPrefix releasePrerelPrefix releaseStatus)"
  cosm_has_unstaged_submodules && return 0
  # io_trace "_prod_should_release 2 -- $(print_vars prerelPrefix releasePrerelPrefix releaseStatus)"
  [[ -z $prerelPrefix || $prerelPrefix == 'reuse' ]] && return 1
  # io_trace "_prod_should_release 3 -- $(print_vars prerelPrefix releasePrerelPrefix releaseStatus)"
  [[ $prerelPrefix == 'rtm' && -z $releasePrerelPrefix ]] && return 1
  # io_trace "_prod_should_release 4 -- $(print_vars prerelPrefix releasePrerelPrefix releaseStatus)"
  [[ $prerelPrefix == $releasePrerelPrefix ]] && return 1
  # io_trace "_prod_should_release 5 -- $(print_vars prerelPrefix releasePrerelPrefix releaseStatus)"
  [[ $prerelPrefix > $releasePrerelPrefix ]] && return 0
  # io_trace "_prod_should_release 6 -- $(print_vars prerelPrefix releasePrerelPrefix releaseStatus)"
  return 1
}
# return code
#   0   -- not a bundle || no principal module
#   1   -- invalid operation (principal module should be released and bundle should not be released)
#   127 -- principal module and bundle have same versions
prod_increment_release_version()
{
  local prerelPrefix=$1 noIncrement ec=0
  # get principal module version
  # io_trace "prod_increment_release_version -1- $(print_vars pmProdHTag)"
  _prod_refresh_bundle_htag; ec=$?  # -> prodHTag bundleHTag noIncrement
  [ $ec -eq 1 ] && return 1
  _prod_increment_release_version "$prerelPrefix" "$noIncrement" # -> releaseVTag releasePrerelPrefix

  # io_trace "prod_increment_release_version -2- $(print_vars releaseStatus releasePrerelPrefix)"
  # io_trace "prod_increment_release_version -2- $(print_vars prodVTag prodHTag releaseVTag)"
  return $ec
}
prod_commit_release()
{
  if [[ $releasePrerelPrefix == 'reuse' ]]; then
    _prod_commit_release_core
    tag_move "$releaseVTag" "$prodBranch"
    # io_trace "prod_commit_release -1- -- $(print_vars releasePrerelPrefix releaseVTag prodBranch)"
  else
    # update technical version
    _prod_commit_release_core 'version_update'
    local comment="publish branch '$prodBranch' as '$releaseVTag'"
    io_buffered_eval "gitx tag -a -m 'zou-flow: $comment' "$releaseVTag" "$prodBranch" 2>&1"
    # io_trace "prod_commit_release -2- -- $(print_vars releasePrerelPrefix releaseVTag prodBranch)"
  fi
}
_prod_commit_release_core()
{
  # io_trace "_prod_commit_release_core ${*@Q}"
  local updater=$1 vresources=()
  # update technical version - modify resources files
  [[ -n $updater ]] && vresources=( $($updater $releaseVTag) )
  # commit resources and clean submodules in dev branch
  version_commit_files "$releaseVTag" "${vresources[@]}" "${unstagedCleanSubmodules[@]}"
  [[ ${#unstagedCleanSubmodules[@]} -ne 0 ]] && repo_raise_submodule_changed_event "${unstagedCleanSubmodules[@]}"
  # io_trace "_prod_commit_release_core -1- $(print_vars releaseVTag vresources[@])"
}
# return code
#   0   -- not a bundle || principal module undefined
#   1   -- invalid operation (bundle should not be released and principal module should be released)
#   127 -- principal module and bundle have same versions
_prod_refresh_bundle_htag()
{
  [[ -n $principalModuleId ]] && module_is_bundle  || return 0
  if [[ $releaseStatus == 'released' ]]; then
    mio_error "Invalid operation in ${VC}_prod_refresh_bundle_htag${Red} (bundle should not be released), aborting..."
    return 1
  fi
  noIncrement=''  # increment bundle version (bundle is not released)

  local pinfo pstatus pvtag phtag pvver phver hver htag \
        principalScopes=( prod_scope )

  # get principal module release info
  pinfo=$(module_visit "$principalModuleId" "${principalScopes[@]}" _prod_get_principal_module_release_info)
  read -r pstatus pvtag phtag <<< "$pinfo"
  # io_trace "_prod_refresh_bundle_htag -0- PM -- $(print_vars pstatus pvtag phtag)"

  if [[ $pstatus == 'unreleased' || -z "$pvtag" || -z "$phtag" ]]; then
    mio_error "Invalid operation in ${VC}_prod_refresh_bundle_htag${Red} (principal module ${VC}$principalModuleId${Red} should be released), aborting..."
    return 1
  fi

  # bundle unreleased
  # principal module released

  hver=${prodHTag##*/}
  # io_trace "_prod_refresh_bundle_htag -1- $(print_vars prodHTag hver)"
  pvver=${pvtag##*/}
  phver=${phtag##*/}
  # io_trace "_prod_refresh_bundle_htag -2- $(print_vars prodVTag prodHTag hver pvtag phtag pvver phver)"

  # _prod_trace '_prod_refresh_bundle_htag -2.1-'

  if [[ $phver == $hver ]]; then
    # bundle version equals principal module version
    # io_trace "_prod_refresh_bundle_htag -3- PM == BUNDLE (FORCE)"
    return 127  # force release of principal module
  else
    local hhver=$(vtag_highest_of $phver $hver)
    # io_trace "_prod_refresh_bundle_htag -4- $(print_vars phver hver hhver)"
    if [[ $hhver == $phver ]]; then
      # principal module version bigger than bundle version
      # restore folder
      [[ $prodHTag =~ ^.*/ ]]
      prodHTag="${BASH_REMATCH[0]}$hhver"
      if [[ $pvver == $phver ]]; then
        noIncrement='true'
        # io_trace "_prod_refresh_bundle_htag -4.1- PM > BUNDLE -- $(print_vars prodHTag noIncrement)"
      else
        # io_trace "_prod_refresh_bundle_htag -4.2- PM > BUNDLE (FORCE) -- $(print_vars prodHTag noIncrement)"
        return 127;
      fi
    else
      # principal module version smaller than bundle version
      # restore folder
      [[ $pvtag =~ ^.*/ ]]
      pmProdHTagRoot="${BASH_REMATCH[0]}$hhver"
      # io_trace "_prod_refresh_bundle_htag -4.3- PM < BUNDLE (FORCE) -- $(print_vars prodHTag pmProdHTagRoot noIncrement)"
      return 127  # force release of principal module
    fi
  fi
}
# run in principal module context
_prod_get_principal_module_release_info()
{
  # io_trace "_prod_get_principal_module_release_info -1- $(print_vars releaseStatus prodVTag prodHTag releaseVTag)"
  # [[ $dryRun == true && -n $principalReleaseStatus ]] && releaseStatus=$principalReleaseStatus
  # io_trace "_prod_get_principal_module_release_info -2- $(print_vars lbranch vbranch vtag htag delta status nextHead releaseStatus)"
  _prod_increment_release_version
  # io_trace "_prod_get_principal_module_release_info -3- $(print_vars bundleReleaseStatus releaseStatus prodVTag prodHTag releaseVTag)"
  echo "$releaseStatus" "$prodVTag" "$releaseVTag"
}

# Compute next version and prerelease
#
# usage:
#  local releaseVTag releasePrerelPrefix
#  _prod_increment_release_version $prerelPrefix $noIncrement
# in:
#  $1:prerelPrefix  -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#  $2:noIncrement   -- do not increment 
# out:
#  releaseVTag
#  releasePrerelPrefix  -- prerelease prefix (alpha, beta, rc, rtm, reuse)
_prod_increment_release_version()
{
  if [[ $releaseStatus == 'released' ]]; then
    releaseVTag=$prodHTag
  else
    local prerelPrefix=$1 noIncrement=$2 vnext
    releasePrerelPrefix=$prerelPrefix
    if [[ $prerelPrefix == 'reuse' ]]; then
      # reuse previous vtag if it's not a vnode
      if vtag_is_vnode $prodVTag; then
        releasePrerelPrefix=''
        _prod_increment_release_version_core || return 1
      else
        releaseVTag=$prodVTag
      fi
    else
      _prod_increment_release_version_core || return 1
    fi
  fi
}
# out:
#   releaseVTag
_prod_increment_release_version_core()
{
  local vnext
  # io_trace ">>>> _prod_increment_release_version_core $(print_vars noIncrement prodHTag releaseVTag pmProdHTag pmProdHTagRoot)"
  [[ -n $pmProdHTag ]] && prodHTag=$pmProdHTag

  if [[ $noIncrement == true ]]; then
    if vtag_is_vnode $prodHTag; then
      vtag_set_increment "$prodHTag" "$releasePrerelPrefix" || return 1
      releaseVTag=$vnext
    else
      releaseVTag=$prodHTag
    fi
  else
    vtag_set_increment "$prodHTag" "$releasePrerelPrefix" || return 1
    releaseVTag=$vnext
  fi
  
  if [[ $releaseVTag != $prodHTag && -n $principalModuleId ]] && module_is_bundle; then
    pmProdHTagRoot=$prodHTag
    # io_trace "#### _prod_increment_release_version_core BUNDLE+PM $(print_vars noIncrement prodHTag prodHTag releaseVTag pmProdHTag pmProdHTagRoot)"
  fi
  
  [[ -n $pmProdHTag ]] && pmProdHTag=$releaseVTag
  # io_trace "<<<< _prod_increment_release_version_core $(print_vars noIncrement prodHTag releaseVTag pmProdHTag pmProdHTagRoot)"
  return 0
}

########################################################
# VERSION UPDATE (git dev vupdate)

# in:
#   vbranch
#   prerelPrefix
#   vcommit
# out:
#  vtag
#  vnext
prod_increment_update_version()
{
  local vbranch=$1 prerelPrefix=$2 vcommit=$3 vnode vresources=()

  if [[ $vbranch == $prodBranch ]]; then
    vtag="$prodHTag"
    # io_trace "prod_increment_update_version -1- -- $(print_vars vbranch prodBranch vtag)"
  else
    vbranch_set_vnode "$vbranch" || return 1 # -> vnode
    vtag=$vnode
    # io_trace "prod_increment_update_version -2- -- $(print_vars vbranch prodBranch vtag)"
  fi

  vtag_set_increment "$vtag" "$prerelPrefix" || return 1 # -> vnext
  # io_trace "prod_increment_update_version -3- -- $(print_vars vtag prerelPrefix vnext)"

  # update technical version - modify resources files
  vresources=( $(version_update "$vnext") )
  if [[ $vcommit == 'true' ]]; then
    version_commit_files "$vnext" "${vresources[@]}"
  else
    mio_warning "Updated technical version to ${VC}$vnext${NC}"
  fi
}
