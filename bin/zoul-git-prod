#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_PROD ]] && . zoul-git-prod
ZOUL_GIT_PROD=true

[[ -z $ZOUL_GIT_REF ]]           && . zoul-git-ref
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

# io_trace "branchChangedEvent+=( prod_reset_scope )"
branchChangedEvent+=( _prod_on_branch_changed )
branchCreatedEvent+=( _prod_on_branch_created )
branchDeletedEvent+=( _prod_on_branch_deleted )

# usage:
#   module_run prod_scope $*
prod_scope()
{
  # setup prod context
  local prodScopeInitialized=true prodBranchChangedDisabled \
        prodBranch prodBranchPath prodVTag prodHTag \
        prodDelta prodStatus prodAlias
  
  prod_reset_scope

  # execute next russian doll
  # io_trace "prod_scope >> $*"
  $1 "${@:2}"
  # io_trace "prod_scope << $*"
}
prod_reset_scope()
{
  _prod_init_scope "$moduleDevBranchPath" "$moduleDevBranch"
}

sku_checkout()
{
  local sku=$1 vnext=$2 forceCheckout=$3 branch lbranch ec=0
  branch_set_best_match_dev "$sku"                 # -> branch lbranch
  _prod_init_scope $branch $lbranch

  local prodBranchChangedDisabled=true
  prod_checkout "$vnext" "$forceCheckout" "$lbranch" || ec=$?
  prodBranchChangedDisabled=''
  return $ec
}
prod_checkout()
{
  local vnext=$1 forceCheckout=$2 devBranch=$3
  # io_trace "prod_checkout -- $(print_vars vnext forceCheckout devBranch prodStatus prodBranch prodVTag)"
  if [[ $prodStatus == 'vtag' ]]; then
    if [[ $vnext == true ]]; then
      branch_checkout "$prodBranch" "$forceCheckout"
    else
      branch_checkout "$prodVTag" "$forceCheckout"
    fi
  else
    dev_checkout "$forceCheckout" "$devBranch"
  fi
}
dev_checkout()
{
  # io_trace "dev_checkout -- ${*@Q}"
  local forceCheckout=$1 devBranch=$2
  if [[ -z $devBranch ]]; then
    local branch lbranch
    branch_set_best_match_dev "$bundleDevBranch" # -> branch lbranch
    devBranch=$lbranch
    # io_trace "dev_checkout 1 -- $(print_vars bundleDevBranch branch lbranch devBranch)"
  fi
  devBranch=$(wip_to_ref $devBranch)
  # io_trace "dev_checkout 2 -- $(print_vars bundleDevBranch branch lbranch devBranch)"
  branch_checkout "$devBranch" "$forceCheckout"
}

_prod_init_scope()
{
  [[ $prodScopeInitialized == true ]] || return 0

  local branch=$1 lbranch=$2 vbranch vtag htag delta alias status
  branch_set_vtag_info "$branch" "$lbranch" 'auto'
  io_create_alias_color "$alias"

  prodVTag=$vtag
  prodHTag=$htag
  prodDelta=$delta
  prodAlias=$alias
  prodStatus=$status
  if [[ -z $vbranch ]]; then
    prodBranchPath=''; prodBranch=''
  else
    local branch lbranch bref
    branch_set_realize "$vbranch"
    prodBranchPath=$branch
    prodBranch=$lbranch
  fi

  # io_lock_enter
  # io_trace_unsafe "_prod_init_scope -- $(print_vars prodBranch prodBranchPath)"
  # io_trace_unsafe "_prod_init_scope -- $(print_vars prodVTag prodHTag)"
  # io_trace_unsafe "_prod_init_scope -- $(print_vars prodDelta prodStatus prodAlias)"
  # io_lock_exit
}
_prod_on_branch_changed()
{
  [[ $prodBranchChangedDisabled == true ]] || prod_reset_scope
}
_prod_on_branch_created()
{
  [[ $1 =~ ^(.*/)?[0-9]+\.[0-9]+ ]] && prod_reset_scope
}
_prod_on_branch_deleted()
{
  [[ $1 =~ ^(.*/)?[0-9]+\.[0-9]+ ]] && prod_reset_scope
}
