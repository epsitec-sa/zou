#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VBRANCH ]] && . zoul-git-vbranch
ZOUL_GIT_VBRANCH=true

[[ -z $ZOUL_GIT_CORE ]]        && . zoul-git-core
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

vbranch_without_prefix() { [[ $1 =~ ^(.*/)?([0-9]+\.[0-9]+)$ ]] && echo "${BASH_REMATCH[2]}"; }

vbranch_prev_vtag()
{
  # io_trace "vbranch_prev_vtag ${*@Q}"

  local branch=$(git_symbolic_ref ${1:-HEAD}) prerelPrefix=$2 vbranch
  local vbranch vtag delta alias
  vtag_set_describe "$branch"
  # io_trace "vbranch_prev_vtag -- $(print_vars branch prerelPrefix vtag delta alias)"

  [[ -z $vtag ]] && {
    mio_error "vbranch_prev_vtag: $branch has no vtag ancestor"
    return 1
  }

  [ $delta -eq 0 ] && ! vtag_is_vnode $vtag && {
    mio_message "Already published at ${VC}$vtag" '' ${LightBlue}
    echo $vtag
    return 3
  }

  vtag_highest "$vbranch"
}
vbranch_next_vtag()
{
  local rev=${1:-HEAD} prerelPrefix=$2 vtag ec=0
  vtag=$(vbranch_prev_vtag "$rev" "$prerelPrefix") || ec=$?
  [ $ec -eq 0 ] && vtag=$(vtag_increment "$vtag" "$prerelPrefix")
  echo $vtag
  return $ec
}
# out:
#   folder=${BASH_REMATCH[1]}
#   version=${BASH_REMATCH[2]}
vbranch_is_vbranch() { [[ $1 =~ ^(.*/)?([0-9]+\.[0-9]+)$ ]]; }
vbranch_group_by_version()
{
  declare -A lookup
  local version vbranch
  for vbranch in $(branch_list_all_flatten); do
    # skip other vbranches
    ref_is_other $vbranch && continue
    # keep only vbranches
    vbranch_is_vbranch $vbranch || continue
    version=${BASH_REMATCH[2]}
    if [ -z "${lookup[$version]}" ]; then
      lookup[$version]=$vbranch
    else
      lookup[$version]="${lookup[$version]} $vbranch"
    fi
    # io_trace "vvbranch_group_by_version $(print_vars version vtag)"
  done
  [ ${#lookup[@]} -eq 0 ] && echo 'declare -A lookup=()' || declare -p lookup
}
vbranch_create()
{
  local branch=$1 commit=${2:-$moduleBranch} message=$3 \
        prefix version vnode

  if [[ $branch =~ ^(.*/)?([0-9]+\.[0-9]+)$ ]]; then
    prefix=${BASH_REMATCH[1]}
    version=${BASH_REMATCH[2]}
    vnode="${prefix}v${version}-@"
    # create vnode
    tag_new "$vnode" "$commit" "$message"
    # create vbranch
    branch_create $branch $commit
  else
    mio_error "Branch '$branch' is not a vbranch"
  fi
}
