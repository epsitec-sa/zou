#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VBRANCH ]] && . zoul-git-vbranch
ZOUL_GIT_VBRANCH=true

[[ -z $ZOUL_GIT_REPO ]] && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]] && . zoul-git-vtag

vbranch_without_prefix() { [[ $1 =~ ^(.*/)?([0-9]+\.[0-9]+)$ ]] && echo "${BASH_REMATCH[2]}"; }

vbranch_prev_vtag()
{
  # io_trace "vbranch_prev_vtag ${*@Q}"

  local rev=${1:-HEAD} prerelPrefix=$2 ltag stag lsuf vbranch htag

  ltag=$(vtag_describe "$rev")
  io_debug ltag vbranch_prev_vtag

  [[ -z $ltag ]] && {
    io_error "vbranch_prev_vtag: $rev has no vtag ancestor" "$moduleTracePrefix"
    return 1
  }
  stag=${ltag%-*-g*}
  lsuf=${ltag#$stag}

  # io_trace "vbranch_prev_vtag -- $(print_vars rev prerelPrefix ltag stag lsuf)"

  [[ -z $lsuf ]] && ! vtag_is_vnode $stag && {
    io_info "Already published at ${Brown}$stag" "$moduleTracePrefix"
    echo $stag
    return 3
  }

  vbranch=$(vtag_get_vbranch_name $stag)
  io_debug lsuf vbranch_prev_vtag

  htag=$(vtag_highest $(vtag_list $vbranch | grep -vE "\-@$" ) )
  [[ -n $htag ]] && stag=$htag
  io_debug stag vbranch_prev_vtag
  echo $stag
}
vbranch_next_vtag()
{
  local rev=${1:-HEAD} prerelPrefix=$2 vtag ec=0
  vtag=$(vbranch_prev_vtag "$rev" "$prerelPrefix") || ec=$?
  [ $ec -eq 0 ] && vtag=$(vtag_increment "$vtag" "$prerelPrefix")
  echo $vtag
  return $ec
}
