#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VBRANCH ]] && . zoul-git-vbranch
ZOUL_GIT_VBRANCH=true

[[ -z $ZOUL_GIT_VTAG ]] && . zoul-git-vtag

vbranch_without_prefix() { [[ $1 =~ ^(.*/)?([0-9]+\.[0-9]+)$ ]] && echo "${BASH_REMATCH[2]}"; }

vbranch_next_vtag()
{
  local rev=${1:-HEAD}
  local prerel_prefix=$2

  io_debug rev vbranch_next_vtag
  io_debug prerel_prefix vbranch_next_vtag
  
  local commit=$(git rev-parse "$rev^{}")
  local ltag=$(vtag_describe "$commit")

  io_debug commit vbranch_next_vtag
  io_debug ltag vbranch_next_vtag

  if [[ -z $ltag ]]; then
    io_error "vbranch_next_vtag: $rev has no vtag ancestor"
    return 1
  else
    local stag=${ltag%-*-g*}
    local lsuf=${ltag#$stag}

    io_debug stag vbranch_next_vtag
    io_debug lsuf vbranch_next_vtag

    # fix stag and ltag when multiple tags point at same commit
    local vrange=$(vtag_get_vbranch_tail $stag $rev)
    if [[ -z $vrange ]]; then
      local revs=$(echo $rev $(vtag_vtags_at $rev) | xargs -n 1 git rev-parse --abbrev-ref | sort -u)
      io_error "vbranch_next_vtag: unable to associate $(string_join ' or ' $revs) with a vbranch"
      return 1
    else
      io_debug vrange vbranch_next_vtag

      vrange=($vrange)
      stag=${vrange[0]}
      ltag=$stag$lsuf
      vbranch=$(vbranch_without_prefix "${vrange[1]}")

      io_debug ltag vbranch_next_vtag
      io_debug stag vbranch_next_vtag
      io_debug vbranch vbranch_next_vtag

      # get range upper limit
      local utag=$(vtag_get_next_vtag $stag $vbranch)
      if [[ -n $utag ]]; then
        # upper limit exist
        io_debug utag vbranch_next_vtag
        local vnext=$(vtag_increment $stag $prerel_prefix)
        io_debug vnext vbranch_next_vtag
        vtag_compare $vnext $utag
        if (( $? == 255 )); then
          echo $vnext
        else
          io_error "vbranch_next_vtag: unable to insert vtag between $stag and $utag"
          return 1
        fi
      else
        # no upper limit: compute vnext
        vnext=$(vtag_increment $stag $prerel_prefix)
        io_debug vnext vbranch_next_vtag
        echo $vnext
      fi
    fi
  fi
}
