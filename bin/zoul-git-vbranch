#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VBRANCH ]] && . zoul-git-vbranch
ZOUL_GIT_VBRANCH=true

[[ -z $ZOUL_GIT_REPO ]] && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]] && . zoul-git-vtag

vbranch_without_prefix() { [[ $1 =~ ^(.*/)?([0-9]+\.[0-9]+)$ ]] && echo "${BASH_REMATCH[2]}"; }

vbranch_prev_vtag()
{
  local rev=${1:-HEAD}
  local label="[$(repo_moduleId)]"

  io_debug rev vbranch_prev_vtag
  
  local ltag=$(vtag_describe "$rev")

  io_debug ltag vbranch_prev_vtag

  if [[ -z $ltag ]]; then
    io_error "vbranch_prev_vtag: $rev has no vtag ancestor" "$label $zou_command"
    return 1
  else
    local stag=${ltag%-*-g*}
    local lsuf=${ltag#$stag}

    io_debug stag vbranch_prev_vtag
    io_debug lsuf vbranch_prev_vtag

    # fix stag and ltag when multiple tags point at same commit
    local vrange=$(vtag_get_vbranch_tail $stag $rev)
    if [[ -z $vrange ]]; then
      local revs=$(echo $rev $(vtag_vtags_at $rev) | xargs -n 1 git rev-parse --abbrev-ref)
      io_error "vbranch_next_vtag: unable to associate $(string_join ' or ' $revs) with a vbranch" "$label $zou_command"
      return 2
    else
      io_debug vrange vbranch_next_vtag

      vrange=($vrange)
      stag=${vrange[0]}
      vbranch=${vrange[1]}
      status=${vrange[2]}
      ltag=$stag$lsuf

      io_debug ltag vbranch_next_vtag
      io_debug stag vbranch_next_vtag
      io_debug vbranch vbranch_next_vtag
      io_debug status vbranch_next_vtag

      if [[ $status == 'full' ]]; then
        io_info "Already published at '$stag'" "$label"
        echo $stag
        return 3
      fi

      echo $stag
    fi
  fi
}
vbranch_next_vtag()
{
  local rev=${1:-HEAD}
  local prerel_prefix=$2
  local label="[$(repo_moduleId)]"

  io_debug rev vbranch_next_vtag
  io_debug prerel_prefix vbranch_next_vtag
  
  local ltag=$(vtag_describe "$rev")

  io_debug ltag vbranch_next_vtag

  if [[ -z $ltag ]]; then
    io_error "vbranch_next_vtag: $rev has no vtag ancestor" "$label $zou_command"
    return 1
  else
    local stag=${ltag%-*-g*}
    local lsuf=${ltag#$stag}

    io_debug stag vbranch_next_vtag
    io_debug lsuf vbranch_next_vtag

    # fix stag and ltag when multiple tags point at same commit
    local vrange=$(vtag_get_vbranch_tail $stag $rev)
    if [[ -z $vrange ]]; then
      local revs=$(echo $rev $(vtag_vtags_at $rev) | xargs -n 1 git rev-parse --abbrev-ref)
      io_error "vbranch_next_vtag: unable to associate $(string_join ' or ' $revs) with a vbranch" "$label $zou_command"
      return 2
    else
      io_debug vrange vbranch_next_vtag

      vrange=($vrange)
      stag=${vrange[0]}
      vbranch=${vrange[1]}
      status=${vrange[2]}
      ltag=$stag$lsuf
      # vbranch=$(vbranch_without_prefix "${vrange[1]}")

      io_debug ltag vbranch_next_vtag
      io_debug stag vbranch_next_vtag
      io_debug vbranch vbranch_next_vtag
      io_debug status vbranch_next_vtag

      if [[ $status == 'full' ]]; then
        io_info "Already published at '$stag'" "$label"
        echo $stag
        return 3
      fi

      # get range upper limit
      local vnext utag=$(vtag_get_next_vtag "$stag" "$vbranch")
      if [[ -n $utag ]]; then
        # upper limit exist
        io_debug utag vbranch_next_vtag
        vnext=$(vtag_increment "$stag" "$prerel_prefix" "$label")
        io_debug vnext vbranch_next_vtag
        vtag_compare $vnext $utag
        if (( $? == 255 )); then
          echo $vnext
        else
          io_warning "Unable to publish '$rev' between '$stag' and '$utag'" "$label"
          return 4
        fi
      else
        # no upper limit: compute vnext
        vnext=$(vtag_increment "$stag" "$prerel_prefix" "$label")
        io_debug vnext vbranch_next_vtag
        echo $vnext
      fi
    fi
  fi
}
