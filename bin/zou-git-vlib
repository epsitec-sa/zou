#! /bin/bash

rev_find_vltag_ancestor()
{
  git describe --first-parent --tags --match 'v[0-9]*' $1 2>/dev/null
}
rev_list_vtags_at()
{
  # given git rev, list all vtags pointing at it, recursively
  local rev=$1
  local commit=$(git rev-parse $rev)
  for vtag in $(git tag --points-at $commit | grep ^v[0-9]); do
    # optionally dereference annotated tag
    local hash=$(git cat-file tag $vtag 2>/dev/null | grep ^object)
    [[ -n $hash ]] && git tag --points-at ${hash#* } | grep ^v[0-9]
  done
}


vtag_extract_vbranch_name ()
{
  # extract vbranch name from vtag
  local vtag=$1
  if [[ $vtag =~ ^v([0-9]+)\.([0-9]+)(\.|-) ]]; then
    local major=${BASH_REMATCH[1]}
    local minor=${BASH_REMATCH[2]}
    echo $major.$minor;
  fi
}
vtag_find_matching_vbranch()
{
    # convert a vtag to a local or remote matching vbranch
    local vtag=$1
    local vbranch=$(vtag_extract_vbranch_name $vtag)
    if [[ -n $(git show-ref refs/heads/$vbranch) ]]; then
        echo $vbranch
    else
        # local branch not found try remote branch
        vbranch=$(git remote)/$vbranch
        [[ -n $(git show-ref refs/remotes/$vbranch) ]] && echo $vbranch
    fi
}
rev_find_vtag_and_branch()
{
  local commit=$1
  local stag=$2
  for vtag in $(rev_list_vtags_at $stag | uniq); do
    local vbranch=$(vtag_find_matching_vbranch $vtag)
    git merge-base --is-ancestor $commit $vbranch
    if (( $? == 0 )); then
      echo $vtag $vbranch
      break;
    fi
  done
}
get_vtag_descendant()
{
  local stag=$1
  local vbranch=$vbranch
  local result
  for vtag in $(git vtags $vbranch); do
    if [[ $stag == vtag ]]; then
      [[ -n $result ]] && echo $result
    else
      result=$stag
    fi
  done
}
