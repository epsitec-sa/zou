#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
ZOUL_GIT_MODULE=true

[[ -z $ZOUL_CORE ]]            && . zoul-core
[[ -z $ZOUL_PROCESS ]]         && . zoul-process
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# module state variables
readonly moduleScope='moduleRoot moduleId moduleBranch moduleTracePrefix'
readonly moduleStartupScope='startupDir startupRoot bundleRoot bundleId bundleBranch'

module_run()
{
  module_scope_startup module_scope $*
}
module_scope_startup()
{
  # setup startup context
  local \
    startupDir=$PWD \
    startupRoot=$(repo_module_root) \
    bundleId=$(repo_bundle_id) \
    bundleRoot=$(repo_bundle_root) \
    bundleBranch=$(branch_current_root_branch) \
    submodulePathMaxLength

  # enter startup module
  module_enter "$startupRoot" || return $?

  # execute next russian doll
  $*
}
# usage:
#   module_enter "$moduleDir" || return $?
#   module_scope $*
module_scope()
{
  # setup module context
  local \
    moduleRoot="$PWD" \
    moduleId=$(repo_module_id) \
    moduleBranch=$(branch_current) \
    moduleConfigFile="$PWD/.zou-flow" \
    moduleSubmodulePaths=( $(repo_list_submodule_paths $PWD) ) \
    moduleBranchChanged='_module_branch_changed' \
    moduleTracePrefix
  
  if [[ $moduleRoot == $startupRoot ]]; then
    # initialize startup module context
    _module_set_submodule_path_max_length
  fi

  _module_set_trace_prefix

  if [[ $showVisitModuleMessage == true ]]; then
    local startupRelativeDir=$(path_make_relative '.' "$startupDir")
    io_message "Entering '$startupRelativeDir'" "$moduleTracePrefix" Gray
  fi

  # execute next russian doll
  $*
}
# usage:
#   module_enter "$moduleDir" || return $?
module_enter()
{
  cd "$1" &>/dev/null || {
    io_error "No such [sub]module directory '$1'" "$moduleTracePrefix"
    return 1
  }
}

# usage:
#   module_visit_submodules enumerator next ...
# in:
#   $1     -- enumerator
#   ${@:2} -- next ...
module_visit_submodules()
{
  visit $1 module_submodule_visitor "${@:2}"
}
# usage:
#   module_visit_submodules_async enumerator next ...
# in:
#   $1     -- enumerator
#   ${@:2} -- next ...
module_visit_submodules_async()
{
  visit_async $1 module_submodule_visitor "${@:2}"
}
module_visit_submodules_async_fast()
{
  visit_async_fast $1 module_submodule_visitor "${@:2}"
}
# Default submodules enumerator
# exemple:
#   module_visit_submodules \
#     module_submodules_enumerator \
#     module_submodule_visitor ...
module_submodules_enumerator()
{
  echo "${moduleSubmodulePaths[@]}"
}
# usage:
#   module_submodule_visitor path next ...
# in:
#   $1     -- path
#   ${@:2} -- next ...
module_submodule_visitor()
{
  module_enter "$1" || return $?
  module_scope "${@:2}" || return $?
}
_module_branch_changed()
{
  [[ "$PWD" == "$bundleRoot" ]] && bundleBranch=$1
  moduleBranch=$1
  _module_set_trace_prefix
}
_module_branch_prefix()
{
  local ref=$(git rev-parse --abbrev-ref HEAD)
  if [[ $ref == HEAD ]]; then
    ref=$(git tag --points-at HEAD | head -n1)
    if [[ -z $ref ]]; then
      ref="$(git rev-parse --short HEAD)..."
    fi
    echo "($ref)"
    return 1
  else
    echo "$ref"
    return 0
  fi
}
_module_set_submodule_path_max_length()
{
  local path
  submodulePathMaxLength=${#moduleId}
  for path in ${moduleSubmodulePaths[@]}; do
    (( ${#path} > $submodulePathMaxLength )) && submodulePathMaxLength=${#path}
  done
}
_module_set_trace_prefix()
{
  local mcolor=$LightCyan
  if [[ $useLongModuleTracePrefix == true ]]; then
    local spaces sep bcolor branchPrefix
    branchPrefix=$(_module_branch_prefix)
    [ $? -eq 0 ] && bcolor=$Cyan || bcolor=$Purple
    (( spaces = 30 - ${#moduleId} - ${#branchPrefix} ))
    (( spaces < 1 )) && spaces=1
    printf -v sep '%0.s-' $(seq 1 $spaces)
    moduleTracePrefix="${mcolor}[$moduleId]${DarkGray}${sep}${bcolor}($branchPrefix)${NC}"
  else
    local len; (( len = ${submodulePathMaxLength} + 2 ))
    printf -v moduleTracePrefix "%-${len}s" "[$moduleId]"
    moduleTracePrefix="${mcolor}$moduleTracePrefix${NC}"
  fi
}

