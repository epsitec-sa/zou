#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
ZOUL_GIT_MODULE=true

[[ -z $ZOUL_CORE ]]              && . zoul-core
[[ -z $ZOUL_PROCESS ]]           && . zoul-process
[[ -z $ZOUL_GIT_REPO ]]          && . zoul-git-repo
[[ -z $ZOUL_GIT_BUNDLE ]]        && . zoul-git-bundle
[[ -z $ZOUL_GIT_BRANCH_CORE ]]   && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SYNC ]]   && . zoul-git-branch-sync
[[ -z $ZOUL_GIT_HOOKS ]]         && . zoul-git-hooks
[[ -z $ZOUL_GIT_NOTES ]]         && . zoul-git-notes

# global variables
startupMessage=''

# global options
noSubmodulesInit=false
doNotRegisterBundle=false

########
# EVENTS
########

headChangedEvent+=( _module_on_head_changed )
headNameChangedEvent+=( _module_on_head_name_changed )
branchSyncEvent+=( _module_on_sync )
mergingEvent+=( _module_on_merging )
mergeSuccessEvent+=( _module_on_merge_success )
mergeAbortEvent+=( _module_on_merge_abort )

_module_on_head_changed()
{
  # io_trace ">>>> _module_on_head_changed ${*@Q} -- $(print_vars moduleSubmodulePaths[@])"
  _bundle_reset_scope
  _module_reset_scope
  _module_sync_all_submodules
  # io_trace "<<<< _module_on_head_changed ${*@Q} -- $(print_vars moduleSubmodulePaths[@])"
}
_module_on_head_name_changed()
{
  # io_trace ">>>> _module_on_head_name_changed ${*@Q}"
  _bundle_reset_scope
  _module_reset_scope
  # io_trace "<<<< _module_on_head_name_changed ${*@Q}"
}
_module_on_sync()
{
  # io_trace ">>>> _module_on_sync ${*@Q} -- $(print_vars moduleSubmodulePaths[@])"
  if [[ $3 =~ ^\< ]]; then
    _module_set_submodule_paths
    _module_sync_all_submodules
    _module_upd_sync_unitialized_submodules
  fi
  # io_trace ">>>> _module_on_sync ${*@Q} -- $(print_vars moduleSubmodulePaths[@])"
}
_module_on_merging()
{
  # io_trace ">>>> _module_on_merging ${*@Q} -- $moduleTracePrefix"
  repo_is_merging
  _module_set_trace_prefix $?
  # io_trace "<<<< _module_on_merging ${*@Q} -- $moduleTracePrefix"
}
_module_on_merge_success()
{
  # io_trace ">>>> _module_on_merge_success ${*@Q} -- $moduleTracePrefix"
  _module_set_trace_prefix 1
  # io_trace "<<<<< _module_on_merge_success ${*@Q} -- $moduleTracePrefix"
}
_module_on_merge_abort()
{
  # io_trace ">>>> _module_on_merge_abort ${*@Q} -- $moduleTracePrefix"
  _module_set_trace_prefix 1
  # io_trace "<<<<< _module_on_merge_abort ${*@Q} -- $moduleTracePrefix"
}

#########
# VISITOR
#########

# run a function in the startup module root folder with startup, bundle and module scopes defined
module_run()
{
  bundle_scope module_scope "$@"
}
# usage:
#   module_visit sm-path next ...
# in:
#   $1     -- submodule path
#   ${@:2} -- next ...
module_visit()
{
  local sm=( "$1" )
  visit 'sm[@]' _module_submodule_visitor "${@:2}"
}
# usage:
#   module_visit_submodules enumerator next ...
#   module_visit_submodules array[@] next ...
# in:
#   $1     -- enumerator or array name
#   ${@:2} -- next ...
module_visit_submodules()
{
  visit $1 _module_submodule_visitor "${@:2}"
}
# usage:
#   module_visit_submodules_async enumerator next ...
#   module_visit_submodules_async array[@] next ...
# in:
#   $1     -- enumerator or array name
#   ${@:2} -- next ...
module_visit_submodules_async()
{
  # io_trace "module_visit_submodules_async ${*@Q}"
  visit_async $1 _module_submodule_visitor "${@:2}"
}
module_visit_submodules_async_fast()
{
  visit_async_fast $1 _module_submodule_visitor "${@:2}"
}
module_has_submodules() { [ ${#moduleSubmodulePaths[@]} -gt 0 ]; }
module_is_bundle()      { [[ -n "$moduleRoot" && "$moduleRoot" == "$bundleRoot" ]]; }
module_is_principal()   { [[ $moduleId == $principalModuleId ]]; }
module_in_wip_mode()    { [[ $moduleHead != $(wip_to_ref $moduleHead) ]]; }
bundle_in_wip_mode()    { [[ $bundleHead != $(wip_to_ref $bundleHead) ]]; }
module_in_dev_mode()    { [[ $(wip_to_ref $moduleHead) == $(wip_to_ref $moduleDevBranch) ]]; }
bundle_in_dev_mode()    { [[ $(wip_to_ref $bundleHead) == $(wip_to_ref $bundleDevBranch) ]]; }
module_in_prod_mode()   { [[ $moduleHead =~ ^(.*/)?v?[0-9]+\.[0-9] ]]; }
bundle_in_prod_mode()   { [[ $bundleHead =~ ^(.*/)?v?[0-9]+\.[0-9] ]]; }
module_in_hotfix_mode() { [[ $moduleHead =~ ^(.*/)?hotfix/ ]]; }
bundle_in_hotfix_mode() { [[ $bundleHead =~ ^(.*/)?hotfix/ ]]; }
module_is_startup()     { [[ $moduleRoot == $startupRoot ]]; }

module_in_strict_dev_mode() { [[ $moduleHead == $(wip_to_ref $moduleDevBranch) ]]; }
bundle_in_strict_dev_mode() { [[ $bundleHead == $(wip_to_ref $bundleDevBranch) ]]; }

module_is_included_in_sku() { array_contains_element "$1" "${configSkuInclude[@]}"; }

########################################################
# ATTACH

# return:
#   0 : dev attach succeeds
#   1 : dev attach fails
module_dev_attach()
{
  local forceCheckout=$1 ref=${2:-$moduleHead} devBranchPath=$3 devBranch
  if [[ -z $devBranchPath || $devBranchPath == $moduleDevBranchPath ]]; then
    devBranchPath=$moduleDevBranchPath
    devBranch=$moduleDevBranch
  else
    local branch lbranch bref
    branch_set_realize "$devBranchPath"
    devBranchPath=$branch
    devBranch=$lbranch
  fi
  # io_trace "module_dev_attach ${*@Q} -- $(print_vars ref devBranchPath)"
  if module_is_bundle || ref_equals "$ref" "$devBranchPath"; then
    # io_trace "module_dev_attach ${*@Q} -1- $(print_vars ref devBranchPath)"
    branch_checkout "$devBranch" "$forceCheckout"
    return 0
  else
    # io_trace "module_dev_attach ${*@Q} -2- $(print_vars ref devBranchPath)"
    branch_checkout "$ref" "$forceCheckout"
    return 1
  fi
}

module_prod_attach()
{
  local attachMode=$1 ref=${2:-$moduleHead} refs branch vbranch vtag vnode vref

  refs=( $(ref_list_all_at $ref) )

  # io_trace "module_prod_attach ${*@Q} -1- $(print_vars attachMode ref refs[@])"
  
  for i in ${!refs[@]}; do
    ref="${refs[i]}"
    if [[ -z $vbranch ]] && branch_is_prod "$ref"; then
      vbranch="$ref"
    elif [[ -z $vnode ]] && vtag_is_vnode "$ref"; then
      vnode="$ref"
    elif [[ -z $vtag ]] && vtag_is_semver "$ref"; then
      vtag="$ref"
    elif [[ -z $branch ]] && branch_is_dev "$ref"; then
      branch="$ref"
    fi
  done

  # io_trace "module_prod_attach ${*@Q} -2- $(print_vars vbranch vtag vnode)"

  if [[ $attachMode == 'vtag' ]]; then
    vref="$vtag"
    [[ -z $vref && -n $vbranch ]] && vref=$vbranch
  else
    vref="$vbranch"
    [[ -z $vref && -n $vtag  ]] && vref=$vtag
  fi

  [[ -z $vref && -n $vnode ]] && vref=$vnode
  # io_trace "module_prod_attach ${*@Q} -3- $(print_vars refs[@] vref vbranch vtag vnode)"

  if [[ -n $vref ]]; then
    branch_checkout "$vref" true
  elif [[ -n $branch ]]; then
    mio_warning "Still in development on ${VC}$branch"
  else
    mio_warning "Detached HEAD at ${VC}$ref"
  fi

  return 0
}

#########
# TRACING
#########

_module_trace()
{
  [[ $zouTraceScope == true ]] || return 0

  io_lock_enter
  case $1 in
  bundle_scope)
    io_trace "$1 -- $(print_vars startupDir startupRoot)"
    io_trace "$1 -- $(print_vars bundleId principalModuleId)"
    io_trace "$1 -- $(print_vars bundleHead bundleHeadType)"
    io_trace "$1 -- $(print_vars bundleDevBranch bundleDevBranchPath)"
    io_trace "$1 -- $(print_vars bundleUrl bundleUrlName bundleRoot)"
    io_trace "$1 -- $(print_vars moduleInSku)"
    # io_trace "$1 -- $(print_vars bundleTracePrefix)"
    ;;
  _bundle_reset_scope)
    io_trace "$1 -- $(print_vars bundleId principalModuleId)"
    io_trace "$1 -- $(print_vars bundleHead bundleHeadType)"
    io_trace "$1 -- $(print_vars bundleDevBranch bundleDevBranchPath)"
    io_trace "$1 -- $(print_vars moduleInSku)"
    # io_trace "$1 -- $(print_vars bundleTracePrefix)"
    ;;
  module_scope)
    io_trace "$1 -- $(print_vars moduleId)"
    io_trace "$1 -- $(print_vars moduleInSku moduleIsExternal)"
    io_trace "$1 -- $(print_vars moduleSubmodulePaths[@])"
    io_trace "$1 -- $(print_vars moduleHead moduleHeadType)"
    io_trace "$1 -- $(print_vars moduleDevBranch moduleDevBranchPath)"
    io_trace "$1 -- $(print_vars modulePath moduleBundlePath moduleRoot)"
    io_trace "$1 -- $(print_vars moduleParent noSubmodulesInit)"
    # io_trace "$1 -- $(print_vars moduleTracePrefix)"
    ;;
  _module_reset_scope)
    io_trace "$1 -- $(print_vars moduleId)"
    io_trace "$1 -- $(print_vars moduleInSku moduleIsExternal)"
    io_trace "$1 -- $(print_vars moduleHead moduleHeadType)"
    io_trace "$1 -- $(print_vars moduleDevBranch moduleDevBranchPath)"
    io_trace "$1 -- $(print_vars moduleSubmodulePaths[@])"
    # io_trace "$1 -- $(print_vars moduleTracePrefix)"
    ;;
  *)
    io_trace "$1 -- $(print_vars startupDir)"
    io_trace "$1 -- $(print_vars startupRoot)"
    io_trace "$1 -- $(print_vars bundleRoot)"
    io_trace "$1 -- $(print_vars bundleId)"
    io_trace "$1 -- $(print_vars principalModuleId)"
    io_trace "$1 -- $(print_vars bundleHead)"
    io_trace "$1 -- $(print_vars bundleHeadType)"
    io_trace "$1 -- $(print_vars bundleDevBranch)"
    io_trace "$1 -- $(print_vars bundleDevBranchPath)"
    io_trace "$1 -- $(print_vars bundleUrlName )"
    io_trace "$1 -- $(print_vars bundleUrl)"
    # io_trace "$1 -- $(print_vars bundleTracePrefix)"
    io_trace "$1 -- $(print_vars moduleRoot)"
    io_trace "$1 -- $(print_vars modulePath)"
    io_trace "$1 -- $(print_vars moduleBundlePath)"
    io_trace "$1 -- $(print_vars moduleId)"
    io_trace "$1 -- $(print_vars moduleInSku)"
    io_trace "$1 -- $(print_vars moduleIsExternal)"
    io_trace "$1 -- $(print_vars moduleSubmodulePaths[@])"
    io_trace "$1 -- $(print_vars moduleHead)"
    io_trace "$1 -- $(print_vars moduleHeadType)"
    io_trace "$1 -- $(print_vars moduleDevBranch)"
    io_trace "$1 -- $(print_vars moduleDevBranchPath)"
    # io_trace "$1 -- $(print_vars moduleTracePrefix)"
  esac
  io_lock_exit
}

########
# SCOPES
########

# run a function in the startup module root folder with startup and bundle scopes defined
bundle_scope()
{
  # setup startup context
  local startupDir=$PWD startupRoot \
        bundleId bundleRoot \
        bundleHead bundleHeadType \
        bundleDevBranch bundleDevBranchPath\
        bundleUrl bundleUrlName \
        bundleTracePrefix \
        principalModuleId \
        submodulePathMaxLength \
        moduleStartupScopeInitialized=true

  startupRoot=$(repo_module_root)
  [[ -z $startupRoot ]] && {
    io_error "Not a git repository ${VC}$PWD${Red} (or any of the parent directories)"
    return 1
  }
  # enter startup module
  _module_enter "$startupRoot" || return $?

  bundleId=$(repo_bundle_id)
  bundleRoot=$(repo_bundle_root)
  bundleConfigFile="$bundleRoot/.zou-flow"

  cd "$bundleRoot"
  _bundle_set_head
  cd - >/dev/null
  
  repo_set_bundle_url_info "$bundleRoot"  # -> bundleUrl bundleUrlName
  repo_is_merging "$bundleRoot"; _module_set_bundle_trace_prefix $?
  _module_startup_message

  _module_set_bundle_dev_branch
  _module_set_principal_module_id

  _module_register_bundle

  _module_trace 'bundle_scope'

  # io_trace "bundle_scope >> $*"
  # execute next russian doll
  $1 "${@:2}"
  # io_trace "bundle_scope << $*"
}
# run a function in the module root folder with module scope defined
module_scope()
{
  # io_trace ">>>> module_scope"
  # setup module context
  local moduleRoot moduleConfigFile moduleId moduleSubmodulePaths \
        moduleParent modulePath moduleBundlePath \
        moduleHead moduleHeadType moduleDevBranch moduleDevBranchPath moduleTracePrefix \
        moduleInSku moduleScopeInitialized=true moduleIsExternal
  
  [[ "$1" == '-i' ]] && { moduleInSku=true; shift; }

  moduleRoot="$PWD"
  moduleConfigFile="$moduleRoot/.zou-flow"
  moduleId=$(repo_module_id)
  _module_set_submodule_paths "$moduleRoot"

  moduleParent=$(repo_module_parent)
  [[ -n $moduleParent ]] && modulePath=${moduleRoot#$moduleParent/}
  moduleBundlePath=${moduleRoot#$bundleRoot}
  moduleBundlePath=${moduleBundlePath#/}

  if [[ $moduleRoot == $startupRoot ]]; then
    # initialize startup module context
    _module_set_submodule_path_max_length
  fi

  _module_set_head
  repo_is_merging
  _module_set_trace_prefix $?
  _module_set_module_dev_branch
  _module_set_is_external

  module_configure true

  _module_trace 'module_scope'

  # io_trace "#### module_scope ${*@Q}"

  # execute next russian doll
  $1 "${@:2}"

  # io_trace "<<<< module_scope"
}
_bundle_reset_scope()
{
  [[ $moduleStartupScopeInitialized == true ]] || return 0
  # io_trace "_bundle_reset_scope -- ${*@Q}"

  if [[ "$PWD" == "$bundleRoot" ]]; then
    _bundle_set_head "$1"
    repo_is_merging "$bundleRoot"
    _module_set_bundle_trace_prefix $?
    _module_set_bundle_dev_branch
    _module_set_principal_module_id

    _module_trace '_bundle_reset_scope'
  fi
}
_module_reset_scope()
{
  [[ $moduleScopeInitialized == true ]] || return 0
  # io_trace "_module_reset_scope -- ${*@Q}" ${Green}

  _module_set_submodule_paths
  _module_set_head "$1"
  repo_is_merging
  _module_set_trace_prefix $?
  _module_set_module_dev_branch
  _module_set_is_external
  
  _module_trace '_module_reset_scope'
}
_module_set_submodule_paths()
{
  moduleSubmodulePaths=( $(repo_list_submodule_paths "${1:-$PWD}") )
}
_module_set_is_external()
{
  [[ -z $moduleParent ]] && return 1
  local parentConfigFile="$moduleParent/.zou-flow" parentLevel=$(repo_module_level "$moduleParent")
  # io_trace "_module_set_is_external -1- $(print_vars parentConfigFile parentLevel)"
  if (( $parentLevel == 0 )); then
    # io_trace "_module_set_is_external -2- $(print_vars parentConfigFile)"
    gitx config --file "$parentConfigFile" --get "select.exclude" "$modulePath" &>>"$stdallRedir"
    [ $? -eq 0 ] && moduleIsExternal=true
  else
    # io_trace "_module_set_is_external -3- $(print_vars parentConfigFile)"
    gitx config --file "$parentConfigFile" --get "select.include" "$modulePath" &>>"$stdallRedir"
    [ $? -ne 0 ] && moduleIsExternal=true
  fi
  return 0
}

##############
# DEV BRANCHES
##############

_bundle_set_head()
{
  local refSymbol refType
  ref_set_symbol 'HEAD'
  bundleHead=$refSymbol
  bundleHeadType=$refType
}
_module_set_head()
{
  # io_trace ">>>> _module_set_head ${*@Q}" ${Green}
  if module_is_bundle; then
    moduleHead=$bundleHead
    moduleHeadType=$bundleHeadType
  else
    local ref=${1:-HEAD} refSymbol refType
    ref_set_symbol "$ref"
    moduleHead=$refSymbol
    moduleHeadType=$refType
  fi
  # io_trace "<<<< _module_set_head ${*@Q}" ${Green}
}
_module_set_bundle_dev_branch()
{
  cd "$bundleRoot"

  if [[ $bundleHead == 'HEAD' || ( $(git_object_type $bundleHead) == 'tag' && ! $bundleHead =~ (.*/)?v[0-9]+\.[0-9]+ ) ]]; then
    # we are in detached HEAD : infer dev branch from vtag name
    local ltag stag folder
    ltag=$(gitx describe --tags --match '*v[0-9]*' 2>>"$stderrRedir" | head -n1)
    stag=${ltag%-*-g*}
    _bundle_vref_to_dev "$stag" || bundleDevBranch='master'
    # io_trace "_module_set_bundle_dev_branch -1- $(print_vars bundleHead bundleDevBranch)"
  elif [[ $bundleHead == $(gitx rev-parse --abbrev-ref "$bundleHead" 2>>"$stderrRedir") ]]; then
    _bundle_vref_to_dev "$bundleHead" || bundleDevBranch=$bundleHead
    # io_trace "_module_set_bundle_dev_branch -2- $(print_vars bundleHead bundleDevBranch)"
  elif ! _bundle_vref_to_dev "$bundleHead"; then
    bundleDevBranch='master'
  fi
  # io_trace "_module_set_bundle_dev_branch -3- $(print_vars bundleHead bundleDevBranch)"
  local branch lbranch bref
  branch_set_realize "$bundleDevBranch"
  bundleDevBranchPath=$branch
  # io_trace "_module_set_bundle_sdev_branch -4- $(print_vars bundleHead bundleDevBranch bundleDevBranchPath)"
  cd - >/dev/null
}
_bundle_vref_to_dev()
{
  local vref=$1
  if [[ $vref =~ (.*/)?v?[0-9]+\.[0-9]+ ]]; then
    folder=${BASH_REMATCH[1]}
    [[ -z $folder ]] && bundleDevBranch='master' || bundleDevBranch="${folder}dev"
  else
    return 1
  fi
}
_module_set_module_dev_branch()
{
  # io_trace "_module_set_module_dev_branch -0- $(print_vars moduleId bundleDevBranch moduleHead moduleDevBranch)"
  if module_is_bundle; then
    moduleDevBranchPath=$bundleDevBranchPath
    moduleDevBranch=$bundleDevBranch
    # io_trace "_module_set_module_dev_branch -1- $(print_vars moduleId bundleDevBranch moduleHead moduleDevBranch)"
  # we are in detached HEAD or on vtag/prod branch 
  else
    _module_infer_dev_from_bundle
    # io_trace "_module_set_module_dev_branch -2- $(print_vars moduleHead moduleHeadType moduleDevBranch)"

    # if moduleHead is a SHA try to to attach to dev branch
    if [[ $moduleHeadType == 'sha' ]] && ref_equals "$moduleHead" "$moduleDevBranchPath"; then
      branch_checkout "$moduleDevBranch" false
    fi
  fi
}
_module_infer_dev_from_bundle()
{
  local branch lbranch
  branch_set_best_match_dev "$bundleDevBranch"
  moduleDevBranchPath=$branch
  moduleDevBranch=$lbranch
  # io_trace "_module_infer_dev_from_bundle -- $(print_vars moduleId bundleDevBranch moduleHead moduleDevBranch)"
}

##########
# VISITORS
##########

# usage:
#   _module_submodule_visitor path next ...
# in:
#   $1     -- path
#   ${@:2} -- next ...
_module_submodule_visitor()
{
  # io_trace ">>>> _module_submodule_visitor ${*@Q}"
  local smPath=$1 option; shift
  _module_enter "$smPath" || return $?

  module_is_included_in_sku "$smPath" && option='-i'
  # io_trace "_module_submodule_visitor $smPath -- $(print_vars configSkuInclude[@] configSkuExclude[@] option) >> $*"
  
  module_scope "$option" $* || io_trace_error '_module_submodule_visitor'

  # io_trace "<<<< _module_submodule_visitor ${*@Q}"
}
# usage:
#   _module_enter "$moduleDir" || return $?
_module_enter()
{
  cd "$1" &>>"$stdallRedir" || {
    io_error "No such [sub]module directory '$1'" "$moduleTracePrefix"
    return 1
  }
}

################
# INITIALIZATION
################

_module_sync_all_submodules()
{
  # io_trace ">>>> _module_sync_all_submodules -- $(print_vars moduleSubmodulePaths[@])"
  [[ ${#moduleSubmodulePaths[@]} -eq 0 ]] && return 0

  echo "${moduleSubmodulePaths[@]}" | xargs git-sm sync -C "${moduleRoot}" --
  # io_trace "<<<< _module_sync_all_submodules -- $(print_vars moduleSubmodulePaths[@])"
}
_module_upd_sync_unitialized_submodules()
{
  # io_trace ">>>> _module_upd_sync_unitialized_submodules -- $(print_vars moduleSubmodulePaths[@])"
  local data=$(_module_list_uninitialized_submodules "${configSkuInclude[@]}")
  [[ -z $data ]] && return 0

  xargs git-sm updsync -C "${moduleRoot}" <<< "$data"
  # io_trace "<<<< _module_upd_sync_unitialized_submodules -- $(print_vars moduleSubmodulePaths[@])"
}
module_sync_upd_sync_uninitialized_submodules()
{
  # io_trace ">>>> module_sync_upd_sync_uninitialized_submodules -- $(print_vars configSkuInclude[@])"
  local data=$(_module_list_uninitialized_submodules "${configSkuInclude[@]}")
  [[ -z $data ]] && return 0

  xargs git-sm syncupdsync -C "${moduleRoot}" <<< "$data"
  # io_trace "<<<< module_sync_upd_sync_uninitialized_submodules -- $(print_vars configSkuInclude[@])"
}
_module_list_uninitialized_submodules()
{
  local path
  # io_trace "_module_list_uninitialized_submodules ${*@Q}"
  for path; do
    [[ -f "$moduleRoot/$path/.git" ]] || echo $path
  done
}

###############
# CONFIGURATION
###############

# return code:
#  1 if already configured
module_configure()
{
  local forceConfig=$1

  if [[ $forceConfig == 'true' ]]; then
    # force hooks configuration
    hooks_configure "$moduleRoot" 'true'
    notes_configure
  else
    # abort if hooks are already configured
    hooks_configure "$moduleRoot" && return 1
    notes_configure
  fi
  return 0
}

module_is_configured() { notes_is_configured; }

#########
# STARTUP
#########

_module_startup_message()
{
  [[ -n $startupMessage ]] && io_message "$startupMessage" "$bundleTracePrefix" ${White}
}
_module_register_bundle()
{
  [[ $doNotRegisterBundle == true ]] && return 0
  if [[ $startupRoot == $bundleRoot ]]; then
    bundle_register "$bundleUrl" "$bundleRoot"
    # io_trace "_module_register_bundle ${*@Q} -- $(print_vars bundleUrl bundleRoot)"
  fi
}

##################
# PRINCIPAL MODULE
##################

_module_set_principal_module_id()
{
  # if the bundle branch name starts with 'sku/', use the following part as the principal module ID
  # else use the bundle name without '-*' suffix

  principalModuleId=$(gitx config --file "$bundleConfigFile" "sku.principalModuleId" 2>>"$stderrRedir")
  [ -n "$principalModuleId" ] && [ -d "$bundleRoot/$principalModuleId" ] && return 0

  if [[ $bundleDevBranch =~ ^sku/([^/]+) ]]; then
    principalModuleId=${BASH_REMATCH[1]}
    [ -d "$bundleRoot/$principalModuleId" ] && return 0
  fi
  principalModuleId=${bundleUrlName%-*}
  [ -d "$bundleRoot/$principalModuleId" ] && return 0
  principalModuleId=''
  return 1
}

##############
# TRACE PREFIX
##############

_module_set_submodule_path_max_length()
{
  local maxLength
  string_set_max_length "${moduleSubmodulePaths[@]}"
  submodulePathMaxLength=$maxLength
}
# in:
#   $1 -- id
#   $2 -- len
#   $3 -- color
# out:
#   sid -- smart colored id
#   rlen -- remaining length
_module_set_smart_id()
{
  local len=$1 id=$2 color=$3
  # io_trace "_module_set_smart_id 1 -- $(print_vars len id color)"
  rlen=$len
  if (( ${#id} <= $len )); then
    sid="${color}$id"
  else
    local atoms ratoms
    IFS='/' atoms=( $id ); IFS=$OIFS
    if (( ${#atoms[@]} > 1 )); then
      local i j seq
      (( rlen -= 1 ))
      for i in $(seq 1 "${#atoms[@]}"); do
        # start from the end
        j=$(( ${#atoms[@]} - $i ))
        (( rlen -= ${#atoms[$j]} ))
        # io_trace "_module_set_smart_id 3 -- $(print_vars i j rlen)"
        (( rlen <= 0 )) && break
        (( rlen -= 1 ))
      done
      (( j += 1 ))
      ratoms=( "${atoms[@]:$j}" )
      (( ${#ratoms[@]} == 0 )) && ratoms=( ${atoms[-1]} )
      id=${ratoms[*]}
      # io_trace "_module_set_smart_id 4 -- $(print_vars ratoms[@] id)"
      id=${id// /\/}
      sid="${Purple}\u2026/${color}${id}"
      id="./${id}"
    else
      id=${atoms[0]}
      sid="${color}${id}"
    fi
  fi
  (( rlen = len - ${#id} ))
  # io_trace "_module_set_smart_id 5 -- $(print_vars rlen sid)"
}
_module_set_smart_id2()
{
  local len=$1 mid=$2 mcolor=$3 bid=$4 bcolor=$5 spaces sep
  # io_trace "_module_set_smart_id2 0 -- $(print_vars len mid mcolor bid bcolor)"
  (( spaces = $len - ${#mid} - ${#bid} - 4 ))
  if (( spaces <= 0 )); then
    # no enough space
    # |-----------------------------------|
    # |----------mid---------|-|----------bid----------|
    local grlen mrlen brlen rlen
    (( grlen = -spaces + 1 ))
    (( brlen = ( grlen * ${#bid} ) / ( ${#bid} + ${#mid} ) + 4 ))
    (( mrlen = grlen - brlen ))
    # io_trace "_module_set_smart_id2 1 -- $(print_vars mid spaces grlen mrlen brlen)"
    _module_set_smart_id $(( ${#bid} - brlen )) "$bid" "${bcolor}"
    bid=$sid
    (( mrlen -= rlen ))
    # io_trace "_module_set_smart_id2 2 -- $(print_vars mid spaces grlen mrlen brlen)"
    _module_set_smart_id $(( ${#mid} - mrlen )) "$mid" "${mcolor}"
    mid=$sid
    # io_trace "_module_set_smart_id2 3 -- $(print_vars mid spaces grlen mrlen brlen rlen sid)"
    printf -v sep '%0.s-' $(seq 1 $spaces)
    sid="${mcolor}[$mid]${DarkGray}${sep}${bcolor}($bid)${NC}"
    (( spaces = rlen + 1 ))
  fi
  printf -v sep '%0.s-' $(seq 1 $spaces)
  sid="${mcolor}[$mid]${DarkGray}${sep}${bcolor}($bid)${NC}"
  # io_trace "_module_set_smart_id2 4 -- $(print_vars spaces sid)"
}
_module_set_trace_prefix()
{
  if module_is_bundle; then
    moduleTracePrefix=$bundleTracePrefix;
    # io_trace "_module_set_trace_prefix -1- $(print_vars moduleTracePrefix)"
  else
    local repoIsMerging=$1
    local mcolor=${LightCyan}
    local sid bcolor mid=$moduleId bid=$moduleHead
    [ $repoIsMerging -eq 0 ] && bid="$bid|MERGING"
    _module_set_bcolor 'module' "$moduleHeadType"
    _module_set_smart_id2 42 "$mid" "$mcolor" "$bid" "$bcolor"
    moduleTracePrefix=$sid
    # io_trace "_module_set_trace_prefix -2- $(print_vars repoIsMerging mid bid moduleHead)"
  fi
  export moduleTracePrefix
}
_module_set_bundle_trace_prefix()
{
  local repoIsMerging=$1
  local sid bcolor bid mid=$bundleId
  cd "$bundleRoot"

  bid="$bundleHead"
  [ $repoIsMerging -eq 0 ] && bid="$bid|MERGING"
  _module_set_bcolor 'bundle' "$bundleHeadType"
  _module_set_smart_id2 42 "$mid" ${White} "$bid" $bcolor
  bundleTracePrefix=$sid
  
  cd - &>>"$stdallRedir"
  # io_trace "_module_set_bundle_trace_prefix -1- $(print_vars repoIsMerging mid bid bundleHead)"
}
_module_set_bcolor()
{
  local moduleType=$1 headType=$2
  case "$headType" in
    sha) bcolor=${Red};;
    tag) bcolor=${Purple};;
    *)
      case $moduleType in
        bundle) module_in_prod_mode && bcolor=${Gray} || bcolor=${White};;
        *)      module_in_prod_mode && bcolor=${Magenta} || bcolor=${LightGreen};;
      esac;;
  esac
}