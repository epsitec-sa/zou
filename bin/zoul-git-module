#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
ZOUL_GIT_MODULE=true

[[ -z $ZOUL_CORE ]]            && . zoul-core
[[ -z $ZOUL_PROCESS ]]         && . zoul-process
[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# module state variables
# readonly moduleScope='moduleRoot moduleId moduleBranch moduleTracePrefix'
# readonly moduleStartupScope='startupDir startupRoot bundleRoot bundleId bundleBranch'

# global options
#   useLongModuleTracePrefix
#   showVisitModuleMessage

# io_trace "branchChangedEvent+=( _module_reset_scope )"
branchChangedEvent+=( _module_reset_scope )

module_run()
{
  module_scope_startup module_scope $*
}
module_scope_startup()
{
  # setup startup context
  local startupDir=$PWD startupRoot bundleId bundleRoot bundleBranch submodulePathMaxLength
  startupRoot=$(repo_module_root)
  [[ -z $startupRoot ]] && {
    io_error "Not a git repository '$PWD' (or any of the parent directories)"
    return 1
  }
  bundleId=$(repo_bundle_id)
  bundleRoot=$(repo_bundle_root)
  bundleBranch=$(branch_current_root_branch)

  # enter startup module
  module_enter "$startupRoot" || return $?

  # execute next russian doll
  $*
}
# usage:
#   module_enter "$moduleDir" || return $?
#   module_scope $*
module_scope()
{
  # setup module context
  local \
    moduleRoot="$PWD" \
    moduleParent=$(repo_module_parent) \
    moduleId=$(repo_module_id) \
    moduleBranch=$(branch_current) \
    moduleConfigFile="$PWD/.zou-flow" \
    moduleSubmodulePaths=( $(repo_list_submodule_paths $PWD) ) \
    modulePath moduleTracePrefix \
    moduleScopeEnabled=true
  
  modulePath=${moduleRoot#$moduleParent/}

  if [[ $moduleRoot == $startupRoot ]]; then
    # initialize startup module context
    _module_set_submodule_path_max_length
  fi

  _module_set_trace_prefix

  if [[ $showVisitModuleMessage == true ]]; then
    local startupRelativeDir=$(path_make_relative '.' "$startupDir")
    io_message "Entering '$startupRelativeDir'" "$moduleTracePrefix" Gray
  fi

  # execute next russian doll
  $*
}
# usage:
#   module_enter "$moduleDir" || return $?
module_enter()
{
  cd "$1" &>/dev/null || {
    io_error "No such [sub]module directory '$1'" "$moduleTracePrefix"
    return 1
  }
}

# usage:
#   module_visit_submodules enumerator next ...
# in:
#   $1     -- enumerator
#   ${@:2} -- next ...
module_visit_submodules()
{
  visit $1 module_submodule_visitor "${@:2}"
}
# usage:
#   module_visit_submodules_async enumerator next ...
# in:
#   $1     -- enumerator
#   ${@:2} -- next ...
module_visit_submodules_async()
{
  visit_async $1 module_submodule_visitor "${@:2}"
}
module_visit_submodules_async_fast()
{
  visit_async_fast $1 module_submodule_visitor "${@:2}"
}
# Default submodules enumerator
# exemple:
#   module_visit_submodules \
#     module_submodules_enumerator \
#     module_submodule_visitor ...
module_submodules_enumerator()
{
  echo "${moduleSubmodulePaths[@]}"
}
# usage:
#   module_submodule_visitor path next ...
# in:
#   $1     -- path
#   ${@:2} -- next ...
module_submodule_visitor()
{
  module_enter "$1" || return $?
  repo_check_submodule "$1" || return $?
  module_scope "${@:2}" || return $?
}
_module_reset_scope()
{
  [[ $moduleScopeEnabled == true ]] || return 0
  [[ "$PWD" == "$bundleRoot" ]] && bundleBranch=$1
  moduleBranch=$1
  _module_set_trace_prefix
  # io_trace "_module_reset_scope ${*@Q} -> $(print_vars bundleBranch moduleBranch)"
}
_module_branch_prefix()
{
  local ref=$(git rev-parse --abbrev-ref HEAD)
  if [[ $ref == HEAD ]]; then
    ref=$(git tag --points-at HEAD | head -n1)
    if [[ -z $ref ]]; then
      ref="$(git rev-parse --short HEAD)"
    fi
    echo "$ref"
    return 1
  else
    echo "$ref"
    branch_is_prod "$ref" && return 1 || return 0
  fi
}
_module_set_submodule_path_max_length()
{
  local path
  submodulePathMaxLength=${#moduleId}
  for path in ${moduleSubmodulePaths[@]}; do
    (( ${#path} > $submodulePathMaxLength )) && submodulePathMaxLength=${#path}
  done
}
# in:
#   $1 -- id
#   $2 -- len
#   $3 -- color
# out:
#   sid -- smart colored id
#   rlen -- remaining length
_module_set_smart_id()
{
  ZOU_TRACE='' io_trace "_module_set_smart_id0 <- ${*@Q}"
  local len=$1 id=$2 color=$3
  rlen=$len
  if (( ${#id} <= $len )); then
    sid="${!color}$id"
  else
    local atoms=( ${id//\// } ) ratoms
    if (( ${#atoms[@]} > 1 )); then
      local i j
      (( rlen -= 1 ))
      for i in $(seq 1 ${#atoms[@]}); do
        # start from the end
        j=$(( ${#atoms[@]} - $i ))
        (( rlen -= ${#atoms[$j]} ))
        ZOU_TRACE='' io_trace "_module_set_smart_id0 -> $(print_vars i j rlen)"
        (( rlen <= 0 )) && break
        (( rlen -= 1 ))
      done
      (( j += 1 ))
      ratoms=( "${atoms[@]:$j}" )
      (( ${#ratoms[@]} == 0 )) && ratoms=( ${atoms[-1]} )
      id=${ratoms[*]}
      id=${id// /\/}
      sid="${Purple}\u2026/${!color}${id}"
      id="./${id}"
    else
      id=${atoms[0]}
      sid="${!color}${id}"
    fi
  fi
  (( rlen = len - ${#id} ))
  ZOU_TRACE='' io_trace "_module_set_smart_id0 -> $(print_vars rlen sid)"
}
_module_set_smart_id2()
{
  local len=$1 mid=$2 mcolor=$3 bid=$4 bcolor=$5 spaces sep
  (( spaces = $len - ${#mid} - ${#bid} - 4 ))
  if (( spaces <= 0 )); then
    # no enough space
    # |-----------------------------------|
    # |----------mid---------|-|----------bid----------|
    local grlen mrlen brlen rlen
    (( grlen = -spaces + 1 ))
    (( brlen = ( grlen * ${#bid} ) / ( ${#bid} + ${#mid} ) + 4 ))
    (( mrlen = grlen - brlen ))
    ZOU_TRACE='' io_trace "_module_set_smart_id2 -- $(print_vars spaces grlen mrlen brlen)"
    _module_set_smart_id $(( ${#bid} - brlen )) $bid ${bcolor}
    bid=$sid
    (( mrlen -= rlen ))
    ZOU_TRACE='' io_trace "_module_set_smart_id2 -- $(print_vars spaces grlen mrlen brlen)"
    _module_set_smart_id $(( ${#mid} - mrlen )) $mid ${mcolor}
    mid=$sid
    ZOU_TRACE='' io_trace "_module_set_smart_id2 -- $(print_vars spaces grlen mrlen brlen rlen sid)"
    printf -v sep '%0.s-' $(seq 1 $spaces)
    sid="${!mcolor}[$mid]${DarkGray}${sep}${!bcolor}($bid)${NC}"
    (( spaces = rlen + 1 ))
  fi
  printf -v sep '%0.s-' $(seq 1 $spaces)
  sid="${!mcolor}[$mid]${DarkGray}${sep}${!bcolor}($bid)${NC}"
  ZOU_TRACE='' io_trace "_module_set_smart_id2 -- $(print_vars spaces sid)"
}
_module_set_trace_prefix()
{
  local mcolor=LightCyan
  if [[ $useLongModuleTracePrefix == true ]]; then
    local sid bcolor bid mid=$moduleId
    bid=$(_module_branch_prefix)
    [ $? -eq 0 ] && bcolor=Cyan || bcolor=Brown
    _module_set_smart_id2 42 "$mid" "$mcolor" "$bid" "$bcolor"
    moduleTracePrefix=$sid
  else
    local len; (( len = ${submodulePathMaxLength} + 2 ))
    printf -v moduleTracePrefix "%-${len}s" "[$moduleId]"
    moduleTracePrefix="${!mcolor}$moduleTracePrefix${NC}"
  fi
}
