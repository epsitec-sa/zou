#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BUNDLE ]] && . zoul-git-bundle
ZOUL_GIT_BUNDLE=true

[[ -z $ZOUL_LOCK ]]       && . zoul-lock
[[ -z $ZOUL_CORE ]]       && . zoul-core
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

gitConfigGate=$(lock_init "${zouConfigFile}_lock")

bundle_register()
{
  local url=$1 path=$2
  # io_trace "bundle_register -- $(print_vars url path)"
  lock_enter "$gitConfigGate"
  if ! gitx config --file "$zouConfigFile" --get-regexp "zou.$url.path" "$path" &>>"$stdallRedir"; then
    gitx config --file "$zouConfigFile" --add "zou.$url.path" "$path" &>>"$stdallRedir"
  fi
  lock_exit "$gitConfigGate"
}
bundle_unregister()
{
  local url=$1 path=$2
  lock_enter "$gitConfigGate"
  gitx config --file "$zouConfigFile" --unset "zou.$url.path" "$path" &>>"$stdallRedir"
  lock_exit "$gitConfigGate"
}
bundle_unregister_all()
{
  gitx config --file "$zouConfigFile" --get-regexp 'zou\..*\..*' | \
  while read -r name value; do
    gitx config --file "$zouConfigFile" --unset "$name" "$value"
  done
  lock_exit "$gitConfigGate"
}
# Clean and return registered bundle paths
# - unregister folders without a '.git' folder
# - unregister folders without a 'zou'  folder
# - add registered bundle directory to 'bundleRegisteredPaths' array
#
# out:
#   bundleRegisteredPaths
bundle_set_registered_paths()
{
  bundleRegisteredPaths=()
  
  lock_enter "$gitConfigGate"
  local kv kvs path url
  IFS=$'\n' kvs=( $(gitx config --file "$zouConfigFile" --get-regexp '^zou\..*\.path$' 2>>"$stderrRedir") ); IFS=$OIFS
  for kv in "${kvs[@]}"; do
    # zou.https://git.epsitec.ch/Build/zou-dev.git.path C:/devel/zou-dev
    # zou.https://git.epsitec.ch/cresus-suite/cresus-dev.git.path C:/devel/cresus-dev
    [[ $kv =~ ^zou\.([^[:blank:]]+)\.path[[:blank:]]+(.*)$ ]]
    url=${BASH_REMATCH[1]}
    path=${BASH_REMATCH[2]}
    # io_trace "bundle_set_registered_paths -- $(print_vars kv url path)"
    if [[ -d "$path/.git" && (-d "$path/zou" || "$path" == "$PWD") ]]; then
      bundleRegisteredPaths+=( $path )
    else
      gitx config --file "$zouConfigFile" --unset "zou.$url.path" "$path" &>>"$stdallRedir"
    fi
  done
  lock_exit "$gitConfigGate"
}
bundle_visit_async()
{
  local _bundleVisitPaths
  if [[ "$1" =~ \[@\]$ ]]; then
    _bundleVisitPaths=("${!1}")
    # io_trace "bundle_visit_async -1- $(print_vars _bundleVisitPaths[@])"
  elif [[ -n $1 ]]; then
    _bundleVisitPaths=("$($1)")
    # io_trace "bundle_visit_async -2- $(print_vars _bundleVisitPaths[@])"
  fi
  [ ${#_bundleVisitPaths[@]} -eq 0 ] && return 0

  visit_async '_bundleVisitPaths[@]' _bundle_visitor "${@:2}"
}
bundle_visit()
{
  local _bundleVisitPaths
  if [[ "$1" =~ \[@\]$ ]]; then
    _bundleVisitPaths=("${!1}")
    # io_trace "bundle_visit -1- $(print_vars _bundleVisitPaths[@])"
  elif [[ -n $1 ]]; then
    _bundleVisitPaths=("$($1)")
    # io_trace "bundle_visit -2- $(print_vars _bundleVisitPaths[@])"
  fi
  [ ${#_bundleVisitPaths[@]} -eq 0 ] && return 0

  visit '_bundleVisitPaths[@]' _bundle_visitor "${@:2}"
}
_bundle_visitor()
{
  # io_trace "bundle_visitor ${*@Q}"
  cd "$1" &>>"$stdallRedir" || {
    mio_error "No such bundle directory '$1'"
    return 1
  }
  bundle_scope "${@:2}"
}
