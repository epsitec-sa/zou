#!/usr/bin/env bash

[[ -z $ZOUL_SYSTEM ]]      && . zoul-system
[[ -z $ZOUL_STDIO ]]       && . zoul-stdio
[[ -z $ZOUL_LOG ]]         && . zoul-log
[[ -z $ZOUL_GIT_OPTIONS ]] && . zoul-git-options

# [[ -z $ZOUL_CORE ]] && . zoul-core

sm_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)     jobsCount=${1#-j};;
    clone)   subcommand=$1;;
    update)  subcommand=$1;;
    sync)    subcommand=$1;;
    syncupd) subcommand=$1;;
    add)     subcommand=$1;;
    -C)      shift; workDir="$1";;
    *)       args+=( "$1" );;
  esac; shift; done
}
sm_run()
{
  # io_trace "sm_run ${*@Q}"

  local jobsCount="8" subcommand workDir="$PWD" args=()
  sm_parse "$@" || return $?

  # ensure path is adapted for underlying system
  workDir="$(abspath "$workDir")"
  
  local IFS=$'\n'
  case "$subcommand" in
    clone)   _sm_clone   "${args[@]}";;
    update)  _sm_update  "${args[@]}";;
    syncupd) _sm_syncupd "${args[@]}";;
    sync)    _sm_sync    "${args[@]}";;
    add)     _sm_add     "${args[@]}";;
    *)
      local verb='invalid'
      [[ -z $subcommand ]] && verb='missing'
      printf '%b\n' "${Red}$verb subcommand: use one of (${Gray}clone, update, sync or clone${Red})${NC}"; io_help $0; exit 1;;
  esac
}

_sm_clone()  { gitx -C "$workDir" clone $(gitx_cache_option) --recurse-submodules -j"$jobsCount" "$@" 2>&1 | _sm_out_filter; }
_sm_update()
{
  # io_trace ">>>> _sm_update -- $(print_vars workDir) ${*@Q}"
  gitx -C "$workDir" submodule update $(gitx_cache_option) --jobs "$jobsCount" "$@" 2>&1 | _sm_out_filter
  # io_trace "<<<< _sm_update -- $(print_vars workDir)"
}
_sm_sync()
{
  # io_trace_unsafe ">>>> _sm_sync -- $(print_vars workDir) ${*@Q}"
  gitx -C "$workDir" submodule sync "$@" 2>&1 | _sm_out_filter
  # io_trace_unsafe "<<<< _sm_sync -- $(print_vars workDir)"
}
_sm_syncupd()
{
  # io_trace ">>>> _sm_syncupd -- $(print_vars workDir) ${*@Q}"
  gitx -C "$workDir" submodule sync -- "$@" 2>&1 | _sm_out_filter
  gitx -C "$workDir" submodule update $(gitx_cache_option) --jobs "$jobsCount" --init -- "$@" 2>&1 | _sm_out_filter
  gitx -C "$workDir" submodule sync -- "$@" 2>&1 | _sm_out_filter
  # io_trace "<<<< _sm_syncupd -- $(print_vars workDir)"
}
_sm_add()    { gitx -C "$workDir" submodule add $(gitx_cache_option) "$@"; }

_sm_out_filter()
{
  local line indent error
  [[ -z $moduleTracePrefix ]] || indent='  '
  while read -r line; do
    if [[ $error == true ]]; then
      io_message_unsafe "${indent}$line" "$moduleTracePrefix" ${Brown}
    else
      if [[ $line =~ ^((Cloning|Synchronizing)[^\']+)\'([^\']+)\'(.*) ]]; then
        line="${DarkGray}${BASH_REMATCH[1]}${VC}${BASH_REMATCH[3]}${DarkGray}${BASH_REMATCH[4]}"
        io_message_unsafe "${indent}$line" "$moduleTracePrefix"
      elif [[ $line =~ ^\[[0-9]+ ]]; then
        io_message_unsafe "${indent}$line" "$moduleTracePrefix" ${Brown}
      elif [[ $line =~ (error|fatal) ]]; then
        error=true
        io_message_unsafe "${indent}$line" "$moduleTracePrefix" ${Brown}
      fi
    fi
  done
}

sm_run "$@"