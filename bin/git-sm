#!/usr/bin/env bash

[[ -z $ZOUL_SYSTEM ]]      && . zoul-system
[[ -z $ZOUL_STDIO ]]       && . zoul-stdio
[[ -z $ZOUL_LOG ]]         && . zoul-log
[[ -z $ZOUL_GIT_CORE ]]    && . zoul-git-core

sm_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)     jobsCount=${1#-j};;
    clone)   subcommand=$1;;
    update)  subcommand=$1;;
    sync)    subcommand=$1;;
    syncupd) subcommand=$1;;
    add)     subcommand=$1;;
    -C)      shift; workDir="$1";;
    *)       args+=( "$1" );;
  esac; shift; done
}
sm_run()
{
  # io_trace "sm_run ${*@Q}"

  local jobsCount="8" subcommand workDir="$PWD" args=()
  sm_parse "$@" || return $?

  # ensure path is adapted for underlying system
  workDir="$(abspath "$workDir")"
  
  local IFS=$'\n'
  case "$subcommand" in
    clone)   git_sm_clone   "$workDir" "${args[@]}";;
    update)  git_sm_update  "$workDir" "${args[@]}";;
    syncupd) git_sm_syncupd "$workDir" "${args[@]}";;
    sync)    git_sm_sync    "$workDir" "${args[@]}";;
    add)     git_sm_add     "$workDir" "${args[@]}";;
    *)
      local verb='invalid'
      [[ -z $subcommand ]] && verb='missing'
      printf '%b\n' "${Red}$verb subcommand: use one of (${Gray}clone, update, sync or clone${Red})${NC}"; io_help $0; exit 1;;
  esac
}

sm_run "$@"