#! /bin/bash
# http://schacon.github.io/git/git.html
# https://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git/2658301

. zlib-core

repo_list_untracked()  { git ls-files --exclude-standard --others; }
repo_list_unstaged()   { git diff-files --name-only -r --ignore-submodules --; }
repo_list_uncommited() { git diff-index --cached --name-only -r --ignore-submodules HEAD --; }
repo_list_deleted()    { git ls-files --deleted; }

repo_require_clean_work_tree () {
    io_info >&2 "repo_require_clean_work_tree '$*'"
    # Update the index
    git update-index -q --ignore-submodules --refresh
    local err=0
    local advise=()

    # Disallow untracked changes in the working tree
    if ! test -z "$(git ls-files --exclude-standard --others)"; then
        io_error 'your work tree contains untracked changes.' "cannot $1"
        io_message >&2 "$(repo_list_untracked)" '' Red
        io_message >&2 "Please ignore or add them to the index." '' Yellow
        err=1
    fi

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --; then
        io_error 'you have unstaged changes.' "cannot $1"
        io_message >&2 "$(repo_list_unstaged)" '' Red
        io_message >&2 "Please commit or stash them." '' Yellow
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --; then
        io_error 'your index contains uncommitted changes.' "cannot $1"
        io_message >&2 "$(repo_list_uncommited)" '' Red
        io_message >&2 "Please commit or stash them." '' Yellow
        err=1
    fi

    return $err
}