#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CMD ]] && . zoul-git-cmd
ZOUL_GIT_CMD=true

[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]] && . zoul-git-config

cmd_register_module_paths()
{
  local path
  for path; do
    cmdModulePaths+=( "$(realpath "$path")" )
  done
}
cmd_check_subcommand()
{
  [[ -n $subcommand ]] && array_contains_element "$subcommand" "$@" && return 0
  io_error "missing subcommand: use one of (${VC}$(string_join ', ' "$@")${Red})\n"
  io_help $0
  exit 1
}
# usage:
#   local recursive=true command=wip subcommand=enter \
#         cmdModulePaths=(sm1 sm2) \
#         cmdScopes=( prod_scope config_scope cosm_scope)
#
#   cmd_visit_submodules
cmd_visit_modules()
{
  # io_trace "cmd_visit_modules -- ${*@Q} -- $(print_vars cmdModulePaths[@])"
  if [ ${#cmdModulePaths[@]} -gt 0 ]; then
    module_visit_submodules_async 'cmdModulePaths[@]' "${cmdScopes[@]}" _cmd_tree
  else
    _cmd_tree
  fi
}
cmd_visit_bundle()
{
  if ! _cmd_bundle_visited; then
    recursive=${1:-$recursive} module_visit "$bundleRoot" "${cmdScopes[@]}" _cmd_tree
  fi
}

_cmd_tree()
{
  # io_trace "_cmd_tree -- $(print_vars subcommand cmdModulePaths[@])"
  _cmd_prolog || return $?
  _cmd_visit_tree || return $?
  _cmd_epilog
}
_cmd_prolog()
{
  # io_trace "_cmd_prolog -- $(print_vars subcommand cmdModulePaths[@])"
  if [[ $(type -t "${command}_${subcommand}_prolog") == 'function' ]]; then
    ${command}_${subcommand}_prolog
  fi
}
_cmd_epilog()
{
  # io_trace "_cmd_epilog -- $(print_vars subcommand cmdModulePaths[@])"
  if [[ $(type -t "${command}_${subcommand}_epilog") == 'function' ]]; then
    ${command}_${subcommand}_epilog
  fi
}
_cmd_visit_tree()
{
  [[ $recursive == true ]] || return 0
  module_visit_submodules_async 'configSelectInclude[@]' "${cmdScopes[@]}" _cmd_tree
}
_cmd_bundle_visited()
{
  if [ ${#cmdModulePaths[@]} -gt 0 ]; then
    array_contains_element "$bundleRoot" "${cmdModulePaths[@]}"
  else
    module_is_bundle
  fi
}
