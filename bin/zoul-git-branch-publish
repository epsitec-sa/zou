#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish
ZOUL_GIT_BRANCH_PUBLISH=true

[[ -z $ZOUL_GIT_TAG ]]            && . zoul-git-tag
[[ -z $ZOUL_GIT_REPO ]]           && . zoul-git-repo
[[ -z $ZOUL_GIT_COMMIT ]]         && . zoul-git-commit
[[ -z $ZOUL_GIT_VBRANCH ]]        && . zoul-git-vbranch
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]   && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version

# Publish a development branch (obsolete)
#
# usage:
#   local vnext vbranch
#   branch_publish $branch $forceDev $allowDuplicateTags $prerelPrefix
#
# in:
#  $1:sku
#  $2:forceDev
#  $3:allowDuplicateTags
#  $4:prerelPrefix   -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#                    -- if prerelease prefix == 'reuse' then move previous vtag
# out:
#   vnext    -- the vtag at which the dev branch has been published
branch_publish()
{
  io_warning "branch_publish is deprecated, use branch_set_publish instead" "$moduleTracePrefix"
  
  local sku=$1 forceDev=${2:-false} allowDuplicateTags=${3:-false} prerelPrefix=$4
  local branch vtag htag publishStatus
  branch_set_select_auto "$sku" "$forceDev" false false "$allowDuplicateTags"

  local vnext=$vtag
  case $publishStatus in
  unpublishable)
    io_error   "Branch '$branch' cannot be published (no vbranch associated)" "$moduleTracePrefix"
    return 1;;
  published)
    io_message "Already published at ${Brown}$vtag" "$moduleTracePrefix" LightBlue;;
  ffPublish)
    branch_merge "$vtag" "$moduleBranch" \
      && io_message "Already published at ${Brown}$vnext${LightBlue} (${Brown}fast-forward${LightBlue})" "$moduleTracePrefix" LightBlue \
      || { io_error "Fast-forward publish of branch '$branch' failed" "$moduleTracePrefix"; return 1; };;
  notPublished)
    branch_set_publish "$branch" "$vbranch" "$vtag" "$htag" "$prerelPrefix" \
      && io_success "Published branch '$branch' at ${Brown}$vnext" "$moduleTracePrefix" \
      || { io_error "Publish of branch '$branch' failed" "$moduleTracePrefix"; return 1; };;
  *)
    io_error "Fatal: publishStatus '$publishStatus' not implemented" "$moduleTracePrefix"
    exit 1;;
  esac
}
# Publish a development branch
#
# usage:
#  local branch vbranch vtag htag publishStatus vnext
#  branch_set_select_auto $sku $forceDev false false $allowDuplicateTags
#  branch_set_publish $branch $vbranch $vtag $htag $prerelPrefix"
# in:
#  $1:branch        -- branch to publish
#  $2:vbranch       -- vbranch
#  $3:vtag          -- previous vtag
#  $4:htag          -- base vtag for vnext computation
#  $5:prerelPrefix  -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#                      [[ prerelPrefix == reuse ]] && tag_move vtag branch
# out:
#  vnext
branch_set_publish()
{
  unset vnext

  local branch=$1 vbranch=$2 vtag=$3 htag=$4 prerelPrefix=$5 obranch
  
  [[ -z $branch ]]  && { io_error "Argument 'branch' not specified." "$moduleTracePrefix"; return 1; }
  [[ -z $vbranch ]] && { io_error "Argument 'vbranch' not specified." "$moduleTracePrefix"; return 1; }
  ! branch_ensure_local $branch && { io_error "Branch '$branch' does not exist." "$moduleTracePrefix"; return 1; }
  ! branch_ensure_local $vbranch && { io_error "Branch '$vbranch' does not exist." "$moduleTracePrefix"; return 1; }
  ! branch_is_current $branch && obranch=$(branch_current)

  # ZOU_TRACE=true io_trace "branch_set_publish 1 -- $(print_vars branch vbranch vtag htag prerelPrefix obranch)"

  # synchonize submodules to avoid merge conflicts
  commit_sync_submodules $branch $vbranch

  # synchronize branches
  if branch_is_merged $branch $vbranch; then
    branch_merge_ff $vbranch $branch &>/dev/null
  else
    branch_merge_core $branch $vbranch '-Xtheirs'
  fi

  if [[ $prerelPrefix == 'reuse' ]]; then
    # reuse previous vtag if it's not a vnode
    if vtag_is_vnode $vtag; then
      vtag_set_increment $htag || return 1
      unset prerelPrefix
    else
      vnext=$vtag
    fi
  else
    # compute next vtag
    vtag_set_increment $htag $prerelPrefix || return 1
  fi

  # ZOU_TRACE=true io_trace "branch_set_publish 2 -- $(print_vars branch vbranch vtag htag prerelPrefix obranch vnext)"

  if [[ $prerelPrefix == 'reuse' ]]; then
    _branch_set_publish_epilog
    tag_move "$vtag" "$branch"
  else
    # update technical version
    _branch_set_publish_epilog 'version_update'
    # create vtag
    local comment="publish branch '$branch' as '$vnext'"
    git tag -a -m "zou-flow: $comment" "$vnext" "$vbranch"
  fi
}
_branch_set_publish_epilog()
{
  # io_trace "_branch_publish_commit_and_merge ${*@Q}"
  local updater=$1 vcommit
  # update technical version - modify resources files
  [[ -n $obranch ]] && git checkout $branch &>/dev/null
  # update resource files
  [[ -n $updater ]] && vcommit=( $($updater $vnext) ) || vcommit=($vnext)
  # commit dev and merge into prod
  version_commit_files "${vcommit[@]}" $(repo_list_unstaged_clean_submodules) \
  && branch_merge $branch $vbranch '-Xtheirs'
  [[ -n $obranch ]] && git checkout $obranch &>/dev/null
  # be sure dev == prod
  branch_merge $vbranch $branch
}
