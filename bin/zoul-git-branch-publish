#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish
ZOUL_GIT_BRANCH_PUBLISH=true

[[ -z $ZOUL_GIT_TAG ]]            && . zoul-git-tag
[[ -z $ZOUL_GIT_REPO ]]           && . zoul-git-repo
[[ -z $ZOUL_GIT_VBRANCH ]]        && . zoul-git-vbranch
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]   && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version

# Publish a development branch (obsolete)
#
# usage:
#   local vnext vbranch
#   branch_publish $lbranch $forceDev $allowDuplicateTags $prerelPrefix
#
# in:
#  $1:sku
#  $2:forceDev
#  $3:allowDuplicateTags
#  $4:prerelPrefix   -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#                    -- if prerelease prefix == 'reuse' then move previous vtag
# out:
#   vnext    -- the vtag at which the dev branch has been published
branch_publish()
{
  io_warning "branch_publish is deprecated, use branch_set_publish instead" "$moduleTracePrefix"
  
  local sku=$1 forceDev=${2:-false} allowDuplicateTags=${3:-false} prerelPrefix=$4
  local lbranch vtag htag publishStatus
  branch_set_select_auto "$sku" "$forceDev" false 'auto' "$allowDuplicateTags"

  local vnext=$vtag
  case $publishStatus in
  unpublishable)
    io_error   "Branch '$lbranch' cannot be published (no vbranch associated)" "$moduleTracePrefix"
    return 1;;
  published)
    io_message "Already published at ${Brown}$vtag" "$moduleTracePrefix" LightBlue;;
  ffPublish)
    branch_merge "$vtag" "$moduleBranch" \
      && io_message "Already published at ${Brown}$vnext${LightBlue} (${Brown}fast-forward${LightBlue})" "$moduleTracePrefix" LightBlue \
      || { io_error "Fast-forward publish of branch '$lbranch' failed" "$moduleTracePrefix"; return 1; };;
  notPublished)
    branch_set_publish "$lbranch" "$vbranch" "$vtag" "$htag" "$prerelPrefix" \
      && io_success "Published branch '$lbranch' at ${Brown}$vnext" "$moduleTracePrefix" \
      || { io_error "Publish of branch '$lbranch' failed" "$moduleTracePrefix"; return 1; };;
  *)
    io_error "Fatal: publishStatus '$publishStatus' not implemented" "$moduleTracePrefix"
    exit 1;;
  esac
}
# Compute next version
#
# usage:
#  local prerelPrefix='reuse' vnext
#  branch_set_vnext $vtag $htag $noIncrement
# in:
#  prerelPrefix     -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#  $1:vtag          -- previous vtag
#  $2:htag          -- base vtag for vnext computation
#  $3:noIncrement   -- use htag
# out:
#  prerelPrefix     -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#  vnext
branch_set_vnext()
{
  local vtag=$1 htag=$2 noIncrement=$3

  if [[ $prerelPrefix == 'reuse' ]]; then
    # reuse previous vtag if it's not a vnode
    if vtag_is_vnode $vtag; then
      unset prerelPrefix
      _branch_set_vnext_core
    else
      vnext=$vtag
    fi
  else
    _branch_set_vnext_core
  fi
}
_branch_set_vnext_core()
{
  if [[ $noIncrement == true ]]; then
    if vtag_is_vnode $htag; then
      vtag_set_increment "$htag" "$prerelPrefix" || return 1
    else
      vnext=$htag
    fi
  else
    vtag_set_increment "$htag" "$prerelPrefix" || return 1
  fi
}
# Publish a development branch
#
# usage:
#  local lbranch vbranch vtag htag publishStatus vnext
#  branch_set_select_auto $sku $forceDev false auto $allowDuplicateTags
#  branch_set_publish $lbranch $vbranch $vtag $htag $prerelPrefix"
# in:
#  $1:lbranch       -- branch to publish (local name)
#  $2:vbranch       -- vbranch
#  $3:vtag          -- previous vtag
#  $4:htag          -- base vtag for vnext computation
#  $5:prerelPrefix  -- prerelease prefix (alpha, beta, rc, rtm, reuse)
#                      [[ prerelPrefix == reuse ]] && tag_move vtag branch
#  $6:noIncrement   -- use htag
# out:
#  vnext
branch_set_publish()
{
  unset vnext

  local lbranch=$1 vbranch=$2 vtag=$3 htag=$4 prerelPrefix=$5 noIncrement=$6
  
  [[ -z $lbranch ]] && { io_error "Argument 'lbranch' not specified." "$moduleTracePrefix"; return 1; }
  [[ -z $vbranch ]] && { io_error "Argument 'vbranch' not specified." "$moduleTracePrefix"; return 1; }
  ! branch_ensure_local $lbranch && { io_error "Branch '$lbranch' does not exist." "$moduleTracePrefix"; return 1; }

  # restore deleted vbranch
  branch_ensure_local_vbranch "$vbranch" "$vtag"
  # io_trace "branch_set_publish 1 -- $(print_vars lbranch vbranch vtag htag prerelPrefix obranch)"
  branch_set_vnext "$vtag" "$htag" "$noIncrement" # -> prerelPrefix vnext
  # io_trace "branch_set_publish 2 -- $(print_vars lbranch vbranch vtag htag prerelPrefix obranch vnext)"

  if [[ $prerelPrefix == 'reuse' ]]; then
    _branch_set_publish_epilog
    tag_move "$vtag" "$lbranch"
    # io_trace "branch_set_publish 3 -- $(print_vars lbranch vbranch vtag htag prerelPrefix obranch vnext)"
  else
    # update technical version
    _branch_set_publish_epilog 'version_update'
    # create vtag
    local comment="publish lbranch '$lbranch' as '$vnext'"
    git tag -a -m "zou-flow: $comment" "$vnext" "$vbranch"
    # io_trace "branch_set_publish 4 -- $(print_vars lbranch vbranch vtag htag prerelPrefix obranch vnext)"
  fi
}
_branch_set_publish_epilog()
{
  # io_trace "_branch_publish_commit_and_merge ${*@Q}"
  local updater=$1 vcommit
  # update technical version - modify resources files
  [[ -n $updater ]] && vcommit=( $($updater $vnext) ) || vcommit=($vnext)
  # commit resources and clean submodules in dev branch
  version_commit_files "${vcommit[@]}" $(repo_list_unstaged_clean_submodules)
  branch_merge_sync $lbranch $vbranch '-Xtheirs'
}
