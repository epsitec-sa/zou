#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish
ZOUL_GIT_BRANCH_PUBLISH=true

[[ -z $ZOUL_GIT_TAG ]]            && . zoul-git-tag
[[ -z $ZOUL_GIT_REPO ]]           && . zoul-git-repo
[[ -z $ZOUL_GIT_COMMIT ]]         && . zoul-git-commit
[[ -z $ZOUL_GIT_VBRANCH ]]        && . zoul-git-vbranch
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]   && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version


branch_get_vbranch_name()
{
  local ltag=$(vtag_describe $1)
  vtag_get_vbranch_name $ltag
}
# Publish a development branch
# inputs:
#  $1 : branch to publish
#  $2 : prerelease prefix (alpha, beta, rc, rtm, reuse)
#       if prerelease prefix == 'reuse' then move previous vtag
#  $3 : vtable root folder
#       if vtable root folder is specified, create a vtable
# return the vtag at which the dev branch has been published
branch_publish()
{
  local branch=$1 prerelPrefix=$2 obranch
  local moduleId=$(repo_module_id)
  
  if ! repo_require_clean_work_tree 'cannot publish'; then
    return $?
  fi

  if [[ -z $branch ]]; then
    branch=$(branch_current)
  elif [[ $(git rev-parse $branch) != $(git rev-parse HEAD) ]]; then
    obranch=$(branch_current)
  fi

  if ! branch_is_local "$branch"; then
    # detached head
    local vtags=( $(vtag_vtags_at $branch | grep -v '-@$') )
    if [ ${#vtags[@]} -ne 0 ]; then
      io_info "Published detached head '$branch' at '${vtags[0]}'" "[$moduleId]"
    else
      io_warning "Detached head '$branch' cannot be published" "[$moduleId]"
    fi
  else
    local vbranch=$(branch_get_vbranch_name $branch)
    if [[ -z $vbranch ]]; then
      io_warning "Branch '$branch' is not associated with a vbranch" "[$moduleId]"
      return 2
    fi

    if ! branch_ensure_local $vbranch; then
      io_warning "The vbranch '$vbranch' does not exist" "[$moduleId]"
      return 2
    fi

    # synchonize submodules to avoid merge conflicts
    commit_sync_submodules $branch $vbranch

    # synchronize branches
    if branch_is_merged $branch $vbranch; then
      branch_merge_ff $vbranch $branch &>/dev/null
    else
      branch_merge_core $branch $vbranch '-Xtheirs'
    fi

    local vtag ec=0

    if [[ $prerelPrefix == 'reuse' ]]; then
      # reuse previous vtag if it's not a vnode
      vtag=$(vbranch_prev_vtag $vbranch) || ec=$?
      if [[ -z $vtag ]] || vtag_is_vnode $vtag; then
        vtag=$(vbranch_next_vtag $vbranch) || ec=$?
        unset prerelPrefix
      fi
    else
      # compute next vtag
      vtag=$(vbranch_next_vtag $vbranch $prerelPrefix) || ec=$?
    fi

    [[ $ec -ne 0 && $ec -ne 3 ]] && return 4

    if [[ $prerelPrefix == 'reuse' || $ec -eq 3 ]]; then
      _branch_publish_commit_and_merge "$obranch" "$branch" "$vbranch" "$vtag"
      # move previous vtag if asked
      tag_move "$vtag" "$branch"
    else
      # update technical version
      _branch_publish_commit_and_merge "$obranch" "$branch" "$vbranch" "$vtag" 'version_update'
      # create vtag
      local comment="publish branch '$branch' as '$vtag'"
      git tag -a -m "zou-flow: $comment" $vtag $vbranch
    fi

    if [ $ec -eq 3 ]; then
      echo "$vtag"
    else
      io_info "Published branch '$branch' at '$vtag'" "[$(repo_module_id)]"
      echo "$vtag" "$vbranch"
    fi
  fi
}

_branch_publish_commit_and_merge()
{
  # io_message "_branch_publish_commit_and_merge ${*@Q}" "[$(repo_module_id)]"
  local obranch=$1 branch=$2 vbranch=$3 vtag=$4 updater=$5 vcommit
  # update technical version - modify resources files
  [[ -n $obranch ]] && git checkout $branch &>/dev/null
  # update resource files
  [[ -n $updater ]] && vcommit=( $($updater $vtag) ) || vcommit=($vtag)
  # commit dev and merge into prod
  version_commit_files "${vcommit[@]}" $(repo_list_unstaged_clean_submodules) \
  && branch_merge $branch $vbranch '-Xtheirs'
  [[ -n $obranch ]] && git checkout $obranch &>/dev/null
  # be sure dev == prod
  branch_merge $vbranch $branch
}
