#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_COSM ]] && . zoul-git-cosm
ZOUL_GIT_COSM=true

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module

# global options
#   noSkuFilter
#   noSelectFilter
#   showSubmoduleMessage
#   commitSubmodules
#   commitDirtySubmodules

headChangedEvent+=( _cosm_on_head_changed )
headNameChangedEvent+=( _cosm_on_head_name_changed )
checkoutNoChangeEvent+=( _cosm_on_checkout_no_change )
submoduleChangedEvent+=( _cosm_on_submodule_changed )
branchSyncEvent+=( _cosm_on_sync )

# usage:
#   module_run config_scope cosm_scope $*
cosm_scope()
{
  # setup cosm context
  local unstagedCleanSubmodules unstagedDirtySubmodules \
        showSubmoduleMessage=true cosmScopeInitialized=true
  
  cosm_reset_scope

  # execute next russian doll
  $1 "${@:2}"
}
cosm_has_unstaged_submodules()
{
  [ ${#unstagedCleanSubmodules[@]} -gt 0 ] || [ ${#unstagedDirtySubmodules[@]} -gt 0 ]
}
cosm_has_unstaged_clean_submodules()
{
  [ ${#unstagedCleanSubmodules[@]} -gt 0 ]
}
cosm_reset_scope()
{
  [[ $cosmScopeInitialized == true ]] || return 0
  unstagedCleanSubmodules=()
  unstagedDirtySubmodules=()
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  repo_split_unstaged_submodules "$moduleRoot"

  _cosm_trace
}
_cosm_trace()
{
  return 0

  io_lock_enter
  io_trace_unsafe "cosm_reset_scope -- $(print_vars unstagedCleanSubmodules[@])"
  io_trace_unsafe "cosm_reset_scope -- $(print_vars unstagedDirtySubmodules[@])"
  io_lock_exit
}

################
# EVENT HANDLERS
################

_cosm_on_submodule_changed()
{
  cosm_reset_scope
}
_cosm_on_head_changed()
{
  cosm_reset_scope

  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  _cosm_sync_submodules
  _cosm_discard_inactive_submodules
  _cosm_update_external_submodules
}
_cosm_on_head_name_changed()
{
  _cosm_update_external_submodules
}
_cosm_on_checkout_no_change()
{
  _cosm_update_external_submodules
}
_cosm_on_sync()
{
  if [[ $3 =~ ^\< ]]; then
    # io_trace "_cosm_on_sync ${*@Q}"
    _cosm_on_head_changed "$@"
  fi
}

#####################
# URL SYNCHRONIZATION
#####################

_cosm_sync_submodules()
{
  # io_trace "_cosm_sync_submodules $(print_vars configSkuInclude[@])"
  if [ ${#configSkuInclude[@]} -ne 0 ]; then
    visit_async 'configSkuInclude[@]' 'repo_sync_submodule'
  fi
}

########
# UPDATE
########

# Update active submodules that are excluded from select
_cosm_update_external_submodules()
{
  # io_trace "_cosm_update_external_submodules $(print_vars configSelectExclude[@])"
  if [ ${#configSelectExclude[@]} -ne 0 ]; then
    visit_async 'configSelectExclude[@]' 'repo_update_submodule'
  fi
}
cosm_update_active_submodules()
{
  local toUpdate=( $(array_remove_array 'moduleSubmodulePaths[@]' 'configSkuExclude[@]') )
  # io_trace "@@@ cosm_update_active_submodules -- $(print_vars toUpdate[@]) PWD=$PWD"
  if [ ${#toUpdate[@]} -ne 0 ]; then
    visit_async 'toUpdate[@]' '_cosm_update_submodule' "$@"
  fi
}
_cosm_update_submodule()
{
  # io_trace "@@@ _cosm_update_submodule ${*@Q} -- PWD=$PWD"
  [[ -f "$1/.git" || -d "$1/.git" ]] && return 0
  repo_update_submodule "$@"
}

#########
# DISCARD
#########

_cosm_discard_inactive_submodules()
{
  # io_trace "_cosm_discard_inactive_submodules -- $(print_vars configSkuExclude[@])"
  if [ ${#configSkuExclude[@]} -ne 0 ]; then
    _cosm_discard_submodules 'configSkuExclude[@]'
  fi
}
cosm_discard_unstaged_submodules()
{
  # discard unstaged clean submodules which are excluded from SKU
  local discard=( "${unstagedCleanSubmodules[@]}" "${unstagedDirtySubmodules[@]}" )
  # io_trace "cosm_discard_unstaged_submodules -- $(print_vars discard[@])"
  if [ ${#discard[@]} -ne 0 ]; then
    visit_async 'discard[@]' 'repo_discard_submodule' || ec=$?
    unstagedCleanSubmodules=()
    unstagedDirtySubmodules=()
  fi
  return $ec
}
_cosm_discard_submodules()
{
  # discard unstaged clean submodules which are excluded from SKU
  local discard=( $(array_intersect_array 'unstagedCleanSubmodules[@]' "$1") ) ec=0
  # io_trace "_cosm_discard_submodules -- $(print_vars unstagedCleanSubmodules[@] $1 discard[@])"
  if [ ${#discard[@]} -ne 0 ]; then
    visit_async 'discard[@]' 'repo_discard_submodule' || ec=$?
    unstagedCleanSubmodules=( $(array_remove_array 'unstagedCleanSubmodules[@]' 'discard[@]') )
  fi
  return $ec
}

########
# COMMIT
########

cosm_commit_unstaged_clean_external_submodules()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  local toCommit=( $(array_intersect_array 'unstagedCleanSubmodules[@]' 'configSelectExclude[@]') )
  # io_trace "cosm_commit_unstaged_clean_external_submodules $(print_vars toCommit[@])"
  _cosm_commit_submodules "${toCommit[@]}"
}
cosm_commit_unstaged_clean_submodules()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  local toCommit=( $(array_remove_array 'unstagedCleanSubmodules[@]' 'configSkuExclude[@]') )
  # io_trace "cosm_commit_unstaged_clean_submodules $(print_vars toCommit[@])"
  _cosm_commit_submodules "${toCommit[@]}"
}
_cosm_commit_unstaged_submodules()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  local unstaged toCommit
  unstaged=( "${unstagedCleanSubmodules[@]}" "${unstagedDirtySubmodules[@]}" )
  toCommit=( $(array_remove_array 'unstaged[@]' 'configSkuExclude[@]') )
  # io_trace "_cosm_commit_unstaged_submodules $(print_vars toCommit[@])"
  _cosm_commit_submodules "${toCommit[@]}"
}
_cosm_commit_submodules()
{
  repo_commit_submodules "$moduleRoot" "$@"
}

cosm_has_submodules_to_commit()
{
  [[ -n $(array_remove_array 'unstagedCleanSubmodules[@]' 'configSkuExclude[@]') ]]
}
# Process unstaged submodules
#   - update unselected submodules
#   - discard excluded submodules
#   - commit clean submodules
#   - optionnally commit dirty submodules
# exemple:
#   commitDirtySubmodules=true
#   cosm_scope cosm_node
cosm_process_unstaged_submodules()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  [[ $commitSubmodules == true ]] || return 0

  # io_trace "cosm_process_unstaged_submodules -- $(print_vars unstagedCleanSubmodules[@] unstagedDirtySubmodules[@])"

  if [[ $commitDirtySubmodules == true ]]; then
    _cosm_commit_unstaged_submodules
  else
    cosm_commit_unstaged_clean_submodules
  fi
}
