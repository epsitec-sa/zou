#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_COSM ]] && . zoul-git-cosm
ZOUL_GIT_COSM=true

[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module

headChangedEvent+=( _cosm_on_head_changed )
submoduleChangedEvent+=( _cosm_on_submodule_changed )
branchSyncEvent+=( _cosm_on_sync )

# usage:
#   module_run config_scope cosm_scope $*
cosm_scope()
{
  # setup cosm context
  local unstagedCleanIncludedSubmodules unstagedDirtyIncludedSubmodules \
        unstagedCleanSubmodules unstagedDirtySubmodules \
        cosmScopeInitialized=true
  
  cosm_reset_scope

  # execute next russian doll
  $1 "${@:2}"
}
cosm_has_unstaged_submodules()
{
  [ ${#unstagedCleanIncludedSubmodules[@]} -gt 0 ] || [ ${#unstagedDirtyIncludedSubmodules[@]} -gt 0 ]
}
cosm_has_unstaged_clean_submodules()
{
  # io_trace "cosm_has_unstaged_clean_submodules -- $(print_vars unstagedCleanIncludedSubmodules[@])"
  [ ${#unstagedCleanIncludedSubmodules[@]} -gt 0 ]
}
cosm_has_unstaged_dirty_submodules()
{
  [ ${#unstagedDirtyIncludedSubmodules[@]} -gt 0 ]
}

cosm_reset_scope()
{
  [[ $cosmScopeInitialized == true ]] || return 0
  unstagedCleanSubmodules=()
  unstagedDirtySubmodules=()
  unstagedCleanIncludedSubmodules=()
  unstagedDirtyIncludedSubmodules=()
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  repo_split_unstaged_submodules "$moduleRoot"
  unstagedCleanIncludedSubmodules=( $(array_remove_array 'unstagedCleanSubmodules[@]' 'configSkuExclude[@]') )
  unstagedDirtyIncludedSubmodules=( $(array_remove_array 'unstagedDirtySubmodules[@]' 'configSkuExclude[@]') )

  _cosm_trace
}
_cosm_trace()
{
  [[ $zouTraceScope == true ]] || return 0

  io_lock_enter
  io_trace_unsafe "cosm_reset_scope -- $(print_vars unstagedCleanSubmodules[@])"
  io_trace_unsafe "cosm_reset_scope -- $(print_vars unstagedDirtySubmodules[@])"
  io_trace_unsafe "cosm_reset_scope -- $(print_vars unstagedCleanIncludedSubmodules[@])"
  io_trace_unsafe "cosm_reset_scope -- $(print_vars unstagedDirtyIncludedSubmodules[@])"
  io_lock_exit
}

################
# EVENT HANDLERS
################

_cosm_on_submodule_changed()
{
  cosm_reset_scope
}
_cosm_on_head_changed()
{
  cosm_reset_scope

  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  _cosm_sync_submodules
  _cosm_update_external_submodules
}
_cosm_on_sync()
{
  if [[ $3 =~ ^\< ]]; then
    # io_trace "_cosm_on_sync ${*@Q}"
    _cosm_on_head_changed "$@"
  fi
}

#####################
# URL SYNCHRONIZATION
#####################

_cosm_sync_submodules()
{
  # io_trace "_cosm_sync_submodules $(print_vars configSkuInclude[@])"
  [[ ${#configSkuInclude[@]} -eq 0 ]] || echo "${configSkuInclude[@]}" \
  | xargs -d $'\n' --no-run-if-empty git sm sync -C "${moduleRoot}" --
}

########
# UPDATE
########

# Update active submodules that are excluded from select
_cosm_update_external_submodules()
{
  # io_trace "_cosm_update_external_submodules $(print_vars configSelectExclude[@])"
  [[ ${#configSelectExclude[@]} -eq 0 ]] || echo "${configSelectExclude[@]}" \
  | xargs -d $'\n' --no-run-if-empty git sm update -C "${moduleRoot}" --init --
}

#########
# DISCARD
#########

cosm_discard_unstaged_submodules()
{
  # discard unstaged clean submodules which are excluded from SKU
  local discard=( "${unstagedCleanIncludedSubmodules[@]}" "${unstagedDirtyIncludedSubmodules[@]}" )
  # io_trace "cosm_discard_unstaged_submodules -- $(print_vars discard[@])"
  [[ ${#discard[@]} -eq 0 ]] || echo "${discard[@]}" \
  | xargs -d $'\n' --no-run-if-empty git sm update -C "${moduleRoot}" --
  unstagedCleanIncludedSubmodules=()
  unstagedDirtyIncludedSubmodules=()
}

########
# COMMIT
########

cosm_commit_unstaged_submodules()
{
  # recursively commit unstaged clean submodules
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0

  local commitAll=$1 clean
  if [[ $commitAll == true ]]; then
    clean=( ${unstagedCleanSubmodules[@]} )
  else
    clean=( ${unstagedCleanIncludedSubmodules[@]} )
  fi
  # io_trace "cosm_commit_unstaged_submodules $(print_vars commitAll clean[@])"
  repo_commit_submodules "$moduleRoot" "${clean[@]}"
}
cosm_commit_unstaged_external_submodules()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && return 0
  
  local commitAll=$1 clean
  if [[ $commitAll == true ]]; then
    clean=( ${unstagedCleanSubmodules[@]} )
  else
    clean=( ${unstagedCleanIncludedSubmodules[@]} )
  fi

  clean=( $(array_intersect_array 'clean[@]' 'configSelectExclude[@]') )
  # io_trace "cosm_commit_unstaged_external_submodules $(print_vars commitAll clean[@])"
  repo_commit_submodules "$moduleRoot" "${clean[@]}"
}
