#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG_SKU ]] && . zoul-git-config-sku
ZOUL_GIT_CONFIG_SKU=true

[[ -z $ZOUL_GIT_REPO ]]          && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

# configure SKU submodules
# modify .zou-flow configuration file
#
# By default all submodules are included
#
# [sku "sku/sal/dev"]
#   exclude = compta
#   exclude = fact
#   exclude = banking
#   exclude = sync-client
#   exclude = sync-server

config_sku_exclude()
{
  local path=$1 branch=$2 configFile=$3
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  local rePath=$(regex_whole "$path")
  git config --file "$configFile" --get-all "sku.exclude" "$rePath" >/dev/null \
  || git config --file "$configFile" --add "sku.exclude" "$path"

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: exclude submodule '$path' from SKU '$branch'" -- "$configFile" &>/dev/null
}
config_sku_exclude_all()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  config_sku_exclude_many "$branch" "$configFile" $(repo_list_submodule_paths)
}
config_sku_exclude_many()
{
  echo config_sku_exclude_many ${*@Q}
  local branch=$1 configFile=$2 path rePath; shift 2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  for path in "$@"; do
    rePath=$(regex_whole "$path")
    git config --file "$configFile" --get-all "sku.exclude" "$rePath" >/dev/null \
    || git config --file "$configFile" --add "sku.exclude" "$path"
  done

  git update-index --add -- "$configFile" &>/dev/null && \
  git commit -m "zou-flow: exclude submodules '$(string_join ', ' $@)' from SKU '$branch'" -- "$configFile" &>/dev/null
}
config_sku_include()
{
  local path=$1 branch=$2 configFile=$3
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  local rePath=$(regex_escape "$path")
  git config --file "$configFile" --unset-all "sku.exclude" "$rePath"

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: include submodule '$path' in SKU '$branch'" -- "$configFile" &>/dev/null
}
config_sku_include_all()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  git config --file "$configFile" --remove-section "sku" &>/dev/null

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: include all submodules in SKU '$branch'" -- "$configFile" &>/dev/null
}
config_sku_include_many()
{
  local branch=$1 configFile=$2 path rePath; shift 2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  for path in $@; do
    rePath=$(regex_whole "$path")
    git config --file "$configFile" --unset-all "sku.exclude" "$rePath"
  done

  git update-index --add -- "$configFile" &>/dev/null && \
  git commit -m "zou-flow: include submodules '$(string_join ', ' $@)' in SKU '$branch'" -- "$configFile" &>/dev/null
}
config_sku_is_included() { ! config_sku_is_excluded "$@"; }
config_sku_is_excluded()
{
  local path=$1 branch=$2 configFile=$3
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  local rePath=$(regex_whole "$path")
  git config --file "$configFile" --get-all "sku.exclude" "$rePath" >/dev/null
}
config_sku_list_excluded()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  git config --file "$configFile" --get-all "sku.exclude" || true
}
config_sku_list_included()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  local sku=( $(repo_list_submodule_paths) )
  local excluded=( $(config_sku_list_excluded "$@") )
  array_remove_array sku[@] excluded[@]
}
config_sku_status()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  io_message "'$branch'" "SKU"
  for path in $(config_sku_list_included "$@" | sort); do
    io_message "   $path" ''
  done
  for path in $(config_sku_list_excluded "$@" | sort); do
    io_message " x $path" ''
  done
}
