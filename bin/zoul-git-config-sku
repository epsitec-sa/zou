#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG_SKU ]] && . zoul-git-config-sku
ZOUL_GIT_CONFIG_SKU=true

[[ -z $ZOUL_GIT_REPO ]]          && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

# configure SKU submodules
# modify .zou-flow configuration file
#
# By default all submodules are included
#
# [sku "sku/sal/dev"]
#   exclude = compta
#   exclude = fact
#   exclude = banking
#   exclude = sync-client
#   exclude = sync-server

config_sku_exclude()
{
  local path=$1
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  local rePath=$(wildcard_to_regex_match_whole "$path")
  git config --file "$moduleConfigFile" --get-all "sku.exclude" "$rePath" >/dev/null \
  || git config --file "$moduleConfigFile" --add "sku.exclude" "$path"

  git update-index --add -- "$moduleConfigFile" &>/dev/null \
  && git commit -m "zou-flow: exclude submodule '$path' from SKU '$moduleBranch'" -- "$moduleConfigFile" &>/dev/null
}
config_sku_exclude_all()
{
  config_sku_exclude_many $(repo_list_submodule_paths)
}
config_sku_exclude_many()
{
  local path rePath
  for path in "$@"; do
    rePath=$(wildcard_to_regex_match_whole "$path")
    git config --file "$moduleConfigFile" --get-all "sku.exclude" "$rePath" >/dev/null \
    || git config --file "$moduleConfigFile" --add "sku.exclude" "$path"
  done

  git update-index --add -- "$moduleConfigFile" &>/dev/null && \
  git commit -m "zou-flow: exclude submodules '$(string_join ', ' $@)' from SKU '$moduleBranch'" -- "$moduleConfigFile" &>/dev/null
}
config_sku_include()
{
  local path=$1
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  local rePath=$(wildcard_to_regex "$path")
  git config --file "$moduleConfigFile" --unset-all "sku.exclude" "$rePath"

  git update-index --add -- "$moduleConfigFile" &>/dev/null \
  && git commit -m "zou-flow: include submodule '$path' in SKU '$moduleBranch'" -- "$moduleConfigFile" &>/dev/null
}
config_sku_include_all()
{
  git config --file "$moduleConfigFile" --remove-section "sku" &>/dev/null

  git update-index --add -- "$moduleConfigFile" &>/dev/null \
  && git commit -m "zou-flow: include all submodules in SKU '$moduleBranch'" -- "$moduleConfigFile" &>/dev/null
}
config_sku_include_many()
{
  local path rePath
  for path in $@; do
    rePath=$(wildcard_to_regex_match_whole "$path")
    git config --file "$moduleConfigFile" --unset-all "sku.exclude" "$rePath"
  done

  git update-index --add -- "$moduleConfigFile" &>/dev/null && \
  git commit -m "zou-flow: include submodules '$(string_join ', ' $@)' in SKU '$moduleBranch'" -- "$moduleConfigFile" &>/dev/null
}
config_sku_is_included() { ! config_sku_is_excluded "$@"; }
config_sku_is_excluded()
{
  local path=$1
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  local rePath=$(wildcard_to_regex_match_whole "$path")
  git config --file "$moduleConfigFile" --get-all "sku.exclude" "$rePath" >/dev/null
}
config_sku_list_excluded()
{
  git config --file "$moduleConfigFile" --get-all "sku.exclude" || true
}
config_sku_list_included()
{
  local submodules
  [[ -n $1 ]] && submodules=( "${!1}" ) || submodules=( $(repo_list_submodule_paths) )
  local skuExclude
  [[ -n $2 ]] && skuExclude=( "${!2}" ) || skuExclude=( $(config_sku_list_excluded) )
  array_remove_array submodules[@] skuExclude[@]
}
config_sku_status()
{
  for path in $(config_sku_list_included | sort); do
    io_message "  $path" "$moduleTracePrefix" Green
  done
  for path in $(config_sku_list_excluded | sort); do
    io_message "x $path" "$moduleTracePrefix" Purple
  done
}
