#!/usr/bin/env bash

[[ -z $ZOUL_GIT_CMD ]]           && . zoul-git-cmd
[[ -z $ZOUL_GIT_PROD ]]          && . zoul-git-prod
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]  && . zoul-git-branch-merge

dev_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -v*)            dev_parse_default_version "$1";;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -f|--force)     forceRelease=true;;
    --minor)        incrementKind='minor';;
    --major)        incrementKind='major';;
    --alpha)        prerelPrefix='alpha';;
    --beta)         prerelPrefix='beta';;
    --rc)           prerelPrefix='rc';;
    --rtm)          prerelPrefix='rtm';;
    --vcommit)      vcommit=true;;
    --nomsg)        noMessage='true';;
    --nofetch)      noFetch='true';;
    attach)         subcommand=$1;;
    enter)          subcommand=$1;;
    release)        subcommand=$1;;
    vupdate)        subcommand=$1;;
    --)             shift; break;;
    -*) io_error "unknown option ${VC}$1${Red}\n"; io_help $0; exit 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_subcommand 'attach' 'enter' 'release' 'vupdate'
  cmd_check_args "${args[@]}"
  
  devModulePaths=( "$@" )
  # io_trace "dev_parse -- $(print_vars recursive subcommand devModulePaths[@])"
}
dev_parse_default_version()
{
  local version=${1#-v}
  if [[ $version =~ ^[0-9]+\.[0-9]+$ ]]; then
    defaultVersion=$version
  else
    io_error "wrong version format ${VC}$version${Red} - should be <major>.<minor>"
    exit 1
  fi
}
dev_run()
{
  # parse command line
  local jobsCount recursive command='dev' subcommand \
        cmdScopes=( prod_scope config_scope cosm_scope ) \
        noSkuFilter incrementKind defaultVersion='0.1' \
        forceRelease prerelPrefix vcommit devModulePaths=() \
        noMessage noFetch cliArgs="$@"

  dev_parse "$@" || return $?
  [[ $noMessage == 'true' ]] || dev_startup_message

  bundle_scope dev_command
}
dev_startup_message()
{
  case $subcommand in
    attach)  startupMessage="Attaching to development, please wait...";;
    enter)   startupMessage="Entering development, please wait...";;
    release)
      local what="$incrementKind"
      [ -z "$what" ] && what='patch'
      startupMessage="Releasing development as ${Brown}$what${White}, please wait...";;
    vupdate) startupMessage="Updating version, please wait...";;
  esac

}
dev_command()
{
  [ ${#devModulePaths[@]} -eq 0 ] && devModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${devModulePaths[@]}"
  case $subcommand in
    attach|enter) cmd_register_module_paths false "$bundleRoot";;
    release)      [[ $noFetch == 'true' ]] || branchFetchAll='true';;
  esac

  cmd_visit_modules
}

########
# ATTACH
########

dev_attach_prolog()   { module_dev_attach true || io_trace_error 'dev_attach_prolog'; }
dev_attach_finally()  { branch_show_status; }
dev_attach_xprolog()  { module_dev_attach true || io_trace_error 'dev_attach_xprolog'; }
dev_attach_xfinally() { branch_show_status; }

#######
# ENTER
#######

dev_enter_prolog()
{
  dev_checkout true  || io_trace_error 'dev_enter_prolog'
}
dev_enter_epilog()
{
  cosm_discard_unstaged_clean_external_submodules
}
dev_enter_finally() { branch_show_status; }
dev_enter_xepilog()
{
  cosm_discard_unstaged_clean_external_submodules
  mio_message 'External' ${DarkGray}
}
dev_enter_xfinally() { branch_show_status; }

#########
# RELEASE
#########

dev_release_root_scope()
{
  # avoid reentrency
  if [[ $devReleaseRootScopeInitialized != true ]]; then
    local devReleaseRootScopeInitialized=true
    local anyNeedsPush=false
    # io_trace "dev_release_root_scope ${*@Q} -- $(print_vars anyNeedsPush)"
  fi

  # execute next russian doll
  $1 "${@:2}"
}
dev_release_prolog()
{
   dev_checkout true  || io_trace_error 'dev_release_prolog';
}
dev_release_epilog()
{
  # release only modules in dev mode
  _dev_check_in_strict_dev_mode || return 1
  _dev_check_synchronized || return 1

  # a submodule can create a vbranch in the bundle without refreshing the prod scope (run in a subshell)
  # io_trace "dev_release_epilog -1- $(print_vars forceRelease incrementKind moduleDevBranchPath prodBranchPath)"
  module_is_bundle && _cmd_is_recursive && prod_reset_scope
  if [[ $forceRelease == true ]] || [[ -n $incrementKind ]] || cosm_has_unstaged_clean_submodules || ! ref_equals "$moduleDevBranchPath" "$prodBranchPath"; then
    # io_trace "dev_release_epilog -2- $(print_vars forceRelease incrementKind moduleDevBranchPath prodBranchPath releaseStatus)"

    _dev_ensure_patch_is_published
    # [[ $forceRelease == 'true' ]] || _dev_check_releasable || return $?
    
    dev_checkout false "$moduleDevBranch"
    local prevProdBranch="$prodBranch"
    prod_ensure_vbranch "$defaultVersion" "$incrementKind"
    if [[ $forceRelease == true && -z $incrementKind ]] && ref_equals "$moduleDevBranchPath" "$prodBranchPath"; then
      local vbranch vtag delta graftPoint vnext releaseVTag
      vtag_set_describe "$moduleDevBranch" # -> vbranch vtag delta
      # io_trace "dev_release_epilog -3- $(print_vars defaultVersion incrementKind vbranch vtag delta)"
      if ref_equals "$prodBranchPath" "$vtag" && ! vtag_is_vnode "$vtag"; then
        _prod_increment_release_version_core "$prerelPrefix"
        # io_trace "dev_release_epilog -4- $(print_vars defaultVersion incrementKind vbranch graftPoint vtag vnext releaseVTag)"
        mio_warning "Forcing a new release -> ${VC}$releaseVTag"
        git_commit '--allow-empty' "force new release -> $releaseVTag" &>>"$stdallRedir"
      else
        mio_warning "No need to force a new release"
      fi
    fi
    # io_trace "dev_release_epilog -5- $(print_vars forceRelease incrementKind moduleDevBranchPath prodBranchPath releaseStatus)"
    cosm_commit_unstaged_submodules true
    branch_merge "$moduleDevBranchPath" "$prodBranchPath" '-Xtheirs' \
    && branch_merge_ff "$prodBranchPath" "$moduleDevBranchPath" \
    || io_trace_error 'dev_release_epilog'

    # handles the case where the initial prod branch was created inside prod_ensure_vbranch
    if [[ -z $prevProdBranch && -n $prodBranch ]]; then
      branch_sync_all
    else
      anyNeedsPush=true
    fi
  else
    mio_message "Already released" ${LightBlue}
  fi
  branch_show_status
}
dev_release_finally()
{
  [[ $noMessage == 'true' ]] || _dev_synchronize_message
}

dev_release_xfinally() { branch_show_status; }

_dev_ensure_patch_is_published()
{
    # we cannot create a minor or major branch if actual branch is not released
    if [[ -n $incrementKind ]] && [[ $releaseStatus == 'unreleased' ]]; then
      mio_warning "Releasing current ${VC}patch${Brown} before creating ${VC}$incrementKind${Brown} branch..."
      git-prod release --nomsg --nofetch -
      prod_reset_scope
    fi
    return 0
}
_dev_check_releasable()
{
    # we cannot create a minor or major branch if actual branch is not released
    if [[ -n $incrementKind ]] && [[ $releaseStatus == 'unreleased' ]]; then
      io_lock_enter
      mio_error_unsafe "ERROR: cannot create a new ${VC}$incrementKind${Red} production branch while current one (${VC}$prodBranch${Red}) is not yet published"
      io_error_unsafe  "       release ${VC}$moduleDevBranch${Red} as a ${VC}patch${Red} with the ${VC}git dev release${Red} command" "$moduleTracePrefix"
      io_error_unsafe  "       or publish ${VC}$prodBranch${Red} with ${VC}git prod release -${Red} and restart the ${VC}git dev $cliArgs${Red} command" "$moduleTracePrefix"
      io_lock_exit
      return 1
    fi
    return 0
}

#########
# VUPDATE
#########

dev_vupdate_epilog()
{
  _dev_check_in_dev_mode || return 1
  _dev_check_synchronized || return 1

  dev_checkout false "$moduleDevBranch"

  local vbranch graftPoint vtag vnext
  prod_set_vbranch "$defaultVersion" "$incrementKind" # -> vbranch graftPoint
  # io_trace "dev_vupdate_epilog -1- -- $(print_vars defaultVersion incrementKind vbranch)"

  prod_increment_update_version "$vbranch" "$prerelPrefix" "$vcommit" # -> vtag vnext
  # io_trace "dev_vupdate_epilog -2- -- $(print_vars vtag vnext)"
}
dev_vupdate_finally() { branch_show_status; }

#########
# HELPERS
#########

_dev_synchronize_message()
{
  # io_trace "_dev_synchronize_message -1- -- $(print_vars moduleId anyNeedsPush)"
  if cmd_is_top_level && [[ $anyNeedsPush == true ]]; then
    local recursiveOption=''
    local moduleRef="$moduleId"
    if [[ -n $incrementKind ]] && module_is_principal; then
      moduleRef="$bundleId"
      recursiveOption=' -r'
    else
      module_has_submodules && recursiveOption=' -r'
    fi
    io_warning "WARNING: don't forget to synchronize ${VC}${moduleRef}${Brown} with ${VC}git sync${recursiveOption}${Brown}" "$moduleTracePrefix"
  fi
  return 0
}
_dev_check_in_strict_dev_mode()
{
  module_in_strict_dev_mode && return 0
  io_error "ERROR: please switch to ${VC}$(wip_to_ref $moduleDevBranch)${Red} with ${VC}git dev enter${Brown}" "$moduleTracePrefix"
  return 1
}
_dev_check_in_dev_mode()
{
  module_in_dev_mode && return 0
  io_error "ERROR: please switch to ${VC}${moduleDevBranch}${Red} with ${VC}git dev enter${Brown}" "$moduleTracePrefix"
  return 1
}
_dev_check_synchronized()
{
  branch_any_needs_pull || return 0
  local recursiveOption=''; module_has_submodules && recursiveOption=' -r'
  io_error "ERROR: please synchronize ${VC}${moduleId}${Red} with ${VC}git sync${recursiveOption} [-p]${Red} before releasing ${VC}$(wip_to_ref $moduleDevBranch)${Red}" "$moduleTracePrefix"
  return 1
}

dev_run  "$@"
