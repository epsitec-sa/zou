#!/bin/bash

[[ -z $ZOUL_GIT_CMD ]]           && . zoul-git-cmd
[[ -z $ZOUL_GIT_PROD ]]          && . zoul-git-prod
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]  && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

dev_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    --vnext)        vnext=true;;
    enter)          subcommand=$1;;
    exit|finish)    subcommand=$1;;
    --)             shift; break;;
    -*) io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)  io_error "invalid argument ${VC}$1${Red}, use ${VC}--${Red} to specify modules paths\n"; io_help $0; return 1;;
  esac; shift; done

  cmd_check_subcommand 'enter' 'exit' 'finish'
  cmd_register_module_paths "$@"
  # io_trace "dev_parse -- $(print_vars recursive subcommand cmdModulePaths[@])"
}
dev_run()
{
  # parse command line
  local jobsCount recursive command='dev' subcommand cmdModulePaths=() \
        cmdScopes=( prod_scope config_scope cosm_scope ) \
        vnext

  dev_parse "$@" || return $?
  
  case $subcommand in
    enter)  startupMessage="Entering DEV mode, please wait...";;
    exit)   startupMessage="Exiting DEV mode, please wait...";;
    finish) startupMessage="Finishing DEV, please wait...";;
  esac

  module_run "${cmdScopes[@]}" dev_command
}
dev_command()
{
  # io_trace "dev_command -- $(print_vars subcommand cmdModulePaths[@])"
  cmd_visit_modules || return $?

  # always visit bundle for enter command
  if [[ $subcommand =~ enter ]]; then
    cmd_visit_bundle false
  fi
}
dev_enter_epilog() { dev_checkout true; }

dev_exit_prolog()  { recursive=true; }
dev_exit_epilog()  { prod_checkout "$vnext" true; }

dev_finish_prolog()  { recursive=true; }
dev_finish_prolog()
{
  if [[ -z $prodBranch ]]; then
    mio_error "No vbranch found ${DarkGray}-${Cyan} create a vbranch with: ${VC}git vbranch $(ref_rename $devBranch ${DarkGray}'MAJOR.MINOR'${VC}) $devBranch"
    return 1
  fi
  dev_checkout true
}
dev_finish_epilog()
{
  local commitSubmodules=true showSubmoduleMessage=true
  cosm_process_unstaged_submodules

  branch_merge "$moduleHead" "$prodBranchPath" \
  && prod_checkout "$vnext" true
}

dev_run  "$@"
