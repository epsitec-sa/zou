#!/bin/bash

[[ -z $ZOUL_GIT_CMD ]]           && . zoul-git-cmd
[[ -z $ZOUL_GIT_PROD ]]          && . zoul-git-prod
[[ -z $ZOUL_GIT_COSM ]]          && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]  && . zoul-git-branch-merge

dev_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -v*)            dev_parse_default_version "$1";;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -f|--force)     forceRelease=true;;
    --minor)        incrementKind='minor';;
    --major)        incrementKind='major';;
    --alpha)        prerelPrefix='alpha';;
    --beta)         prerelPrefix='beta';;
    --rc)           prerelPrefix='rc';;
    --rtm)          prerelPrefix='rtm';;
    --vcommit)      vcommit=true;;
    attach)         subcommand=$1;;
    enter)          subcommand=$1;;
    release)        subcommand=$1;;
    vupdate)        subcommand=$1;;
    --)             shift; break;;
    -*) io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_subcommand 'enter' 'release' 'attach' 'vupdate'
  cmd_check_args "${args[@]}"
  
  devModulePaths=( "$@" )
  # io_trace "dev_parse -- $(print_vars recursive subcommand devModulePaths[@])"
}
dev_parse_default_version()
{
  local version=${1#-v}
  if [[ $version =~ ^[0-9]+\.[0-9]+$ ]]; then
    defaultVersion=$version
  else
    io_error "wrong version format ${VC}$version${Red} - should be <major>.<minor>"
    exit 1
  fi
}
dev_run()
{
  # parse command line
  local jobsCount recursive command='dev' subcommand \
        cmdScopes=( prod_scope config_scope cosm_scope ) \
        noSkuFilter incrementKind defaultVersion='0.1' \
        forceRelease prerelPrefix vcommit devModulePaths=()

  dev_parse "$@" || return $?
  
  case $subcommand in
    attach)  startupMessage="Attaching to development, please wait...";;
    enter)   startupMessage="Entering development, please wait...";;
    release) startupMessage="Releasing development, please wait...";;
    vupdate) startupMessage="Updating version, please wait...";;
  esac

  bundle_scope dev_command
}
dev_command()
{
  [ ${#devModulePaths[@]} -eq 0 ] && devModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${devModulePaths[@]}"
  case $subcommand in
    attach|enter) cmd_register_module_paths false "$bundleRoot";;
  esac

  cmd_visit_modules
}

########
# ATTACH
########

dev_attach_prolog() { module_dev_attach true || io_trace_error 'dev_attach_prolog'; }
dev_attach_epilog() { branch_show_status     || io_trace_error 'dev_attach_epilog'; }

#######
# ENTER
#######

dev_enter_prolog() { dev_checkout true  || io_trace_error 'dev_enter_prolog'; }
dev_enter_epilog() { branch_show_status || io_trace_error 'dev_enter_epilog'; }

#########
# RELEASE
#########

dev_release_epilog()
{
  # release only modules in dev mode
  _dev_check_in_strict_dev_mode || return 0

  # a submodule can create a vbranch in the bundle without refreshing the prod scope (run in a subshell)
  # io_trace "dev_release_epilog -1- $(print_vars forceRelease incrementKind moduleDevBranchPath prodBranchPath)"
  module_is_bundle && _cmd_is_recursive && prod_reset_scope
  if [[ $forceRelease == true ]] || [[ -n $incrementKind ]] || cosm_has_unstaged_clean_submodules || ! ref_equals "$moduleDevBranchPath" "$prodBranchPath"; then
    # io_trace "dev_release_epilog -2- $(print_vars forceRelease incrementKind moduleDevBranchPath prodBranchPath)"
    dev_checkout false "$moduleDevBranch"
    prod_ensure_vbranch "$defaultVersion" "$incrementKind"
    cosm_commit_unstaged_clean_submodules
    if [[ $forceRelease == true && -z $incrementKind ]] && ref_equals "$moduleDevBranchPath" "$prodBranchPath"; then
      local vbranch vtag delta graftPoint vnext releaseVTag
      vtag_set_describe "$moduleDevBranch" # -> vbranch vtag delta
      # io_trace "dev_release_epilog -3- $(print_vars defaultVersion incrementKind vbranch vtag delta)"
      if ref_equals "$prodBranchPath" "$vtag" && ! vtag_is_vnode "$vtag"; then
        _prod_increment_release_version_core "$prerelPrefix"
        # io_trace "dev_release_epilog -4- $(print_vars defaultVersion incrementKind vbranch graftPoint vtag vnext releaseVTag)"
        mio_warning "Forcing a new release -> ${VC}$releaseVTag"
        git_commit "force new release -> $releaseVTag" &>/dev/null
      else
        mio_warning "No need to force a new release"
      fi
    fi
    branch_merge "$moduleDevBranchPath" "$prodBranchPath" '-Xtheirs' \
    && branch_merge_ff "$prodBranchPath" "$moduleDevBranchPath" \
    || io_trace_error 'dev_release_epilog'
  elif cosm_has_unstaged_dirty_submodules; then
    mio_error "error : ${VC}$moduleId${Red} still contains dirty submodules"
    for sm in "${unstagedDirtySubmodules[@]}"; do
      mio_message "  it seems that the head of ${VC}$sm${LightCyan} is a lost commit"
    done
    branch_show_status
  else
    mio_message "Already released" ${LightBlue}
  fi
}
_dev_check_in_strict_dev_mode()
{
  module_in_strict_dev_mode && return 0
  _dev_switch_to_dev_message
  return 1
}

#########
# VUPDATE
#########

dev_vupdate_epilog()
{
  _dev_check_in_dev_mode || return 0
  dev_checkout false "$moduleDevBranch"

  local vbranch graftPoint vtag vnext
  prod_set_vbranch "$defaultVersion" "$incrementKind" # -> vbranch graftPoint
  # io_trace "dev_vupdate_epilog -1- -- $(print_vars defaultVersion incrementKind vbranch)"

  prod_increment_update_version "$vbranch" "$prerelPrefix" "$vcommit" # -> vtag vnext
  # io_trace "dev_vupdate_epilog -2- -- $(print_vars vtag vnext)"

  branch_show_status
}
_dev_check_in_dev_mode()
{
  module_in_dev_mode && return 0
  _dev_switch_to_dev_message
  return 1
}

#########
# HELPERS
#########

_dev_switch_to_dev_message()
{
  mio_warning "Use ${VC}git dev enter${Brown} to switch to development"
}

dev_run  "$@"
