#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_VTAG_GROUPING ]] && . zoul-git-vtag-grouping
ZOUL_GIT_VTAG_GROUPING=true

[[ -z $ZOUL_CORE ]]     && . zoul-core
[[ -z $ZOUL_GIT_CORE ]] && . zoul-git-core
[[ -z $ZOUL_GIT_VTAG ]] && . zoul-git-vtag

vtag_group_by_version()
{
  declare -A lookup
  local vtag vbranch
  for vtag in $(gitx tag -l --sort=-v:refname 2>"$stderrRedir"); do
    # skip other tags
    # ref_is_other $vtag && continue
    # skip non semver tags
    ! vtag_is_semver $vtag && continue
    vbranch="${BASH_REMATCH[1]}${BASH_REMATCH[2]}.${BASH_REMATCH[3]}"
    if [ -z "${lookup[$vbranch]}" ]; then
      lookup[$vbranch]=$vtag
    else
      lookup[$vbranch]="${lookup[$vbranch]} $vtag"
    fi
    # io_trace "vtag_group_by_version $(print_vars vbranch vtag)"
  done
  [ ${#lookup[@]} -eq 0 ] && echo 'declare -A lookup=()' || declare -p lookup
}
vtag_group_by_date()
{
  declare -A vtagGrouping
  _vtag_visit_by_date _vtag_group_by_date_visitor _vtag_group_by_date_filter
  [ ${#vtagGrouping[@]} -eq 0 ] && echo 'declare -A vtagGrouping=()' || declare -p vtagGrouping
}
vtag_list_by_date()
{
  _vtag_visit_by_date _vtag_list_by_date_visitor
}

_vtag_list_by_date_visitor()
{
  (( $# > 1 )) && echo $(string_join '=' "$@") || echo $1
}
_vtag_visit_by_date()
{
  local visitor=$1 filter=$2 line atoms vtags item lines
  IFS=$'\n' lines=( $(gitx log --date-order --tags --simplify-by-decoration --pretty=format:'%d') ); IFS=$OIFS
  for line in "${lines[@]}"; do
    # look only for lines with a tag label
    [[ $line =~ tag: ]] || continue
    # remove parentheses
    [[ $line =~ \((.*)\) ]] && {
      line=${BASH_REMATCH[1]}
      # remove space between tag label and tag value ?
      line=${line//tag: /tag:}
      atoms=( ${line//, / } )
      vtags=()
      for item in "${atoms[@]}"; do
        [[ $item =~ ^tag:(.*) ]] && {
          item=${BASH_REMATCH[1]}
          if [[ -n $filter ]]; then
            $filter $item && vtags+=( $item )
          else
            vtags+=( $item )
          fi
        }
      done
      $visitor "${vtags[@]}"
    }
  done
}
# out:
#   vtagGrouping
_vtag_group_by_date_visitor()
{
  # assume caller has a vtagGrouping lookup defined
  local vtag vbranch
  if [ $# -eq 1 ]; then
    vtag=$1
    vbranch=$(_vtag_get_vbranch_name $vtag)
    if [ -z "${vtagGrouping[$vbranch]}" ]; then
      vtagGrouping[$vbranch]=$vtag
    else
      vtagGrouping[$vbranch]="${vtagGrouping[$vbranch]} $vtag"
    fi
  else
    declare -A vlookup
    for vtag in "$@"; do
      vbranch=$(_vtag_get_vbranch_name $vtag)
      if [ -z "${vlookup[$vbranch]}" ]; then
        vlookup[$vbranch]=$vtag
      else
        vlookup[$vbranch]="${vlookup[$vbranch]} $vtag"
      fi
    done
    # merge groupings
    for vbranch in ${!vlookup[@]}; do
      vtag=$(string_join '=' ${vlookup[$vbranch]})
      if [ -z "${vtagGrouping[$vbranch]}" ]; then
        vtagGrouping[$vbranch]=$vtag
      else
        vtagGrouping[$vbranch]="${vtagGrouping[$vbranch]} $vtag"
      fi
    done
  fi
}
_vtag_group_by_date_filter()
{
  ! vtag_is_semver $1 && return 1
  # ref_is_other $1 && return 1
  return 0
}
_vtag_get_vbranch_name ()
{
  [[ $1 =~ ^(.*/)?v([0-9]+\.[0-9]+)(\.|-) ]] && echo ${BASH_REMATCH[1]}${BASH_REMATCH[2]} || return 1
}
