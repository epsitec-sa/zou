#! /bin/bash

. zlib-git-vtag

while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help) zou-help $0; exit 0;;
  --debug) debug=true;;
  -*) io_error "unknown option: $1"; exit 1;;
  *) rev=$1;;
esac; shift; done

# io_debug debug

test_vtag_compare_prerel()
{
  io_info test_vtag_compare_prerel

  #prerelease
  vtag_compare_prerel;                 assert_equals   0 $? 01
  vtag_compare_prerel -alpha2;         assert_equals 255 $? 02
  vtag_compare_prerel ""      -alpha1; assert_equals   1 $? 03
  vtag_compare_prerel -alpha2 -alpha3; assert_equals 255 $? 04
  vtag_compare_prerel -alpha2 -alpha2; assert_equals   0 $? 05
  vtag_compare_prerel -alpha2 -alpha1; assert_equals   1 $? 06
}
test_vtag_compare()
{
  io_info vtag_compare
  # major
  vtag_compare v1.0.0 v2.0.0; assert_equals 255 $? 01
  vtag_compare v1.0.0 v1.0.0; assert_equals   0 $? 02
  vtag_compare v1.0.0 v0.0.0; assert_equals   1 $? 03
  # mi
  vtag_compare v0.1.0 v0.2.0; assert_equals 255 $? 04
  vtag_compare v0.1.0 v0.1.0; assert_equals   0 $? 05
  vtag_compare v0.1.0 v0.0.0; assert_equals   1 $? 06
  # pa
  vtag_compare v0.0.1 v0.0.2; assert_equals 255 $? 07
  vtag_compare v0.0.1 v0.0.1; assert_equals   0 $? 08
  vtag_compare v0.0.1 v0.0.0; assert_equals   1 $? 09
  #prerelease
  vtag_compare v0.0.0-alpha2 v0.0.0-alpha3; assert_equals 255 $? 10
  vtag_compare v0.0.0-alpha2 v0.0.0-alpha2; assert_equals   0 $? 11
  vtag_compare v0.0.0-alpha2 v0.0.0-alpha1; assert_equals   1 $? 12

  vtag_compare v0.0.0-alpha10 v0.0.0-alpha2; assert_equals 1 $? 13

  vtag_compare v0.0.0-alpha1 v0.0.0; assert_equals 255 $? 14
  vtag_compare v0.0.0 v0.0.0-alpha1; assert_equals 1   $? 15

  #meta
  vtag_compare v0.0.0+meta2 v0.0.0+meta3; assert_equals 255 $? 16
  vtag_compare v0.0.0+meta2 v0.0.0+meta2; assert_equals   0 $? 17
  vtag_compare v0.0.0+meta2 v0.0.0+meta1; assert_equals   1 $? 18

  vtag_compare v0.0.0 v0.0.0+meta; assert_equals 255 $? 19
  vtag_compare v0.0.0+meta v0.0.0; assert_equals   1 $? 20
}
test_vtag_increment()
{
  io_info vtag_increment
  local vtags='0.0.0 v1.0-@ v1.0.0 v1.0.0-alpha1 v1.0.0-beta2 v1.0.0-rc3 v1.0.0-wrong'

  for v in $vtags; do
      v1=$(vtag_increment $v)
      [[ -n $v1 ]] && io_success "$v -> $v1"
  done
  for v in $vtags; do
      v1=$(vtag_increment $v alpha)
      [[ -n $v1 ]] && io_success "$v -> $v1"
  done
}
test_vtag_try_increment()
{
  io_info vtag_try_increment
  cd /s/devel/zou-dev/zou.mock
  for v in $(git tag); do
      v1=$(vtag_try_increment $v alpha)
      [[ -n $v1 ]] && io_success "$v -> $v1"
  done
  cd - >/dev/null
}
test_vtag_check()
{
  io_info vtag_check
  cd /s/devel/zou-dev/zou.mock
  for v in $(git vtags); do
      vtag_check $v
  done
  cd - >/dev/null
}

test_vtag_compare_prerel
test_vtag_compare
# test_vtag_check
# test_vtag_increment
# test_vtag_try_increment