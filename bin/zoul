#!/bin/bash

# General references
# https://www.davidpashley.com/articles/writing-robust-shell-scripts/

# Use '. zoul' to (re)load zoul-* libraries

while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help)
    echo "zoul [<options>] - Load zou libraries.

      -h|--help            display help
      -z|--zou-vars        display zou variables
      --debug              display debug info"
    exit 0;;
  --) shift; zoulArgs+=($@); break;;
  -z|--zou-vars) showZouVars=true;;
  --debug)       debug=true;;
  -*) echo "unknown option: $1" >&2; exit 1;;
  *) zoulArgs+=($1);;
esac; shift; done

unset ZOUL_SYSTEM
unset ZOUL_CORE
unset ZOUL_LOCK
unset ZOUL_CONFIG
unset ZOUL_PROCESS
unset ZOUL_GIT_CORE
unset ZOUL_GIT_STOW
unset ZOUL_GIT_REPO
unset ZOUL_GIT_CMD
unset ZOUL_GIT_REF
unset ZOUL_GIT_TAG
unset ZOUL_GIT_VTAG
unset ZOUL_GIT_VTAG_GROUPING
unset ZOUL_GIT_VTABLE
unset ZOUL_GIT_VBRANCH
unset ZOUL_GIT_BUNDLE
unset ZOUL_GIT_MODULE
unset ZOUL_GIT_COSM
unset ZOUL_GIT_PROD
unset ZOUL_GIT_CONFIG
unset ZOUL_GIT_CONFIG_SELECT
unset ZOUL_GIT_CONFIG_SKU
unset ZOUL_GIT_CONFIG_VERSION
unset ZOUL_GIT_BRANCH_CORE
unset ZOUL_GIT_BRANCH_MERGE
unset ZOUL_GIT_BRANCH_SYNC
unset ZOUL_GIT_SANDBOX

[[ -z $ZOUL_SYSTEM ]]             && . zoul-system
[[ -z $ZOUL_CORE ]]               && . zoul-core
[[ -z $ZOUL_LOCK ]]               && . zoul-lock
[[ -z $ZOUL_CONFIG ]]             && . zoul-config
[[ -z $ZOUL_PROCESS ]]            && . zoul-process
[[ -z $ZOUL_GIT_CORE ]]           && . zoul-git-core
[[ -z $ZOUL_GIT_STOW ]]           && . zoul-git-stow
[[ -z $ZOUL_GIT_REPO ]]           && . zoul-git-repo
[[ -z $ZOUL_GIT_CMD ]]            && . zoul-git-cmd
[[ -z $ZOUL_GIT_REF ]]            && . zoul-git-ref
[[ -z $ZOUL_GIT_TAG ]]            && . zoul-git-tag
[[ -z $ZOUL_GIT_VTAG ]]           && . zoul-git-vtag
[[ -z $ZOUL_GIT_VTAG_GROUPING ]]  && . zoul-git-vtag-grouping
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_VBRANCH ]]        && . zoul-git-vbranch
[[ -z $ZOUL_GIT_BUNDLE ]]         && . zoul-git-bundle
[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_COSM ]]           && . zoul-git-cosm
[[ -z $ZOUL_GIT_PROD ]]           && . zoul-git-prod
[[ -z $ZOUL_GIT_CONFIG ]]         && . zoul-git-config
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select
[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version
[[ -z $ZOUL_GIT_BRANCH_CORE ]]    && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_MERGE ]]   && . zoul-git-branch-merge
[[ -z $ZOUL_GIT_BRANCH_SYNC ]]    && . zoul-git-branch-sync
[[ -z $ZOUL_GIT_SANDBOX ]]        && . zoul-git-sandbox

if [[ $showZouVars == true ]]; then
  for zouVar in $(compgen -v | grep -Ei '^(zou|io)'); do
    declare -p $zouVar
  done
fi

# banana()
# {
#   echo 'banana to stdout'
#   echo >&2 'banana to stderr'
#   return 2
# }
zoul_eval()
{
  [ $# -eq 0 ] && return 0
  local zoulStdOut zoulStdErr zoulRetCode zoulRetLabel zoulMessage
  eval "$(declare_exec zoulStdOut zoulStdErr zoulRetCode "$@")"
  if [[ $zoulRetCode -eq 0 ]]; then
    zoulRetLabel=${Green}$zoulRetCode
  else
    zoulRetLabel=${Red}$zoulRetCode
  fi
  zoulMessage="${White}$* ${NC}-> ($zoulRetLabel${NC})"

  _zoul_eval_message "$zoulStdOut" ${Green}
  _zoul_eval_message "$zoulStdErr" ${Red}
  printf '%b\n' "$zoulMessage${NC}"
}
_zoul_eval_message()
{
  [[ -z "$1" ]] && return 0
  local IFS=$'\n' line lines
  lines=("$1")
  for line in ${lines[@]}; do
    zoulMessage="$zoulMessage\n  ${NC}-> ${2}$line"
  done
  return ${#lines[@]}
}

zoul_eval "${zoulArgs[@]}"
