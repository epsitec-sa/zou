#!/usr/bin/env bash

[[ -z $ZOUL_GIT_CMD ]]         && . zoul-git-cmd
[[ -z $ZOUL_GIT_MODULE ]]      && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]      && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]        && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

oreset_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)                 jobsCount=${1#-j};;
    -r|--recursive)      recursive=true;;
    -a|--all)            noSkuFilter=true;;
    -f|--force)          forceReset=true;;
    -p|--prune_branches) pruneBranches=true;;
    --)                  shift; break;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_args "${args[@]}"
  
  oresetModulePaths=( "$@" )
}
oreset_run()
{
  # parse command line
  local jobsCount recursive noSkuFilter command='oreset' subcommand='do' \
        cmdScopes=( config_scope cosm_scope ) oresetModulePaths=() \
        forceReset pruneBranches

  oreset_parse "$@" || return $?
  
  startupMessage="Resetting, please wait..."

  bundle_scope oreset_command
}
oreset_command()
{
  # io_trace "oreset_command -- $(print_vars oresetModulePaths[@])"

  [ ${#oresetModulePaths[@]} -eq 0 ] && oresetModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${oresetModulePaths[@]}"

  cmd_visit_modules
  wait
}
oreset_do_prolog()
{
  branch_oreset_all "$forceReset" "$pruneBranches"
}
oreset_do_epilog()
{
  cosm_discard_unstaged_submodules
}
oreset_do_xprolog()
{
  oreset_do_prolog
}
oreset_do_xepilog()
{
  oreset_do_epilog
}

oreset_run "$@"
