#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_CONFIG ]] && . zoul-config
ZOUL_CONFIG=true

[[ -z $ZOUL_CORE ]] && . zoul-core

config_setup()
{
  config_git_tools

  # remove obsolete value
  gitx config --global --unset 'zou.initialized'

  # zou-flow semantic versioning
  gitx config --global --remove-section versionsort &>>"$stdallRedir"
  gitx config --global --add versionsort.suffix -@
  gitx config --global --add versionsort.suffix -alpha
  gitx config --global --add versionsort.suffix -beta
  gitx config --global --add versionsort.suffix -rc

  # do not push tags pointing at un-pushed commits automatically
  gitx config --global --unset push.followTags

  # update zou aliases
  local alias
  for alias in hotfix zh sb sbx sbw csku csel cver cpub smaster spull sclean oprune publish select attach vbranch config-sku; do
    gitx config --global --unset-all alias.$alias
  done
  gitx config --global alias.hotfix 'wip --hotfix'
  gitx config --global alias.zh 'zou-help'
  gitx config --global alias.sb 'sandbox'
  gitx config --global alias.sbx 'sandbox --reset --sm --skus --vr'
  gitx config --global alias.sbw 'sandbox --work'
  gitx config --global alias.csku 'sku config'
  gitx config --global alias.csel 'config-select'
  gitx config --global alias.cver 'config-version'
  gitx config --global alias.smaster 'sku enter master --dev'
  gitx config --global alias.spull 'sync -r -p'
  gitx config --global alias.supdate 'submodule update --init --recursive'
  gitx config --global alias.sclean 'cleanex -r'
  gitx config --global alias.oprune 'fetch origin --prune'
  gitx config --global alias.publish '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit prod release\e[0;31m instead\e[0m'"'"''
  gitx config --global alias.select '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit (wip|dev|prod) enter\e[0;31m instead\e[0m'"'"''
  gitx config --global alias.attach '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit dev attach\e[0;31m instead\e[0m'"'"''
  gitx config --global alias.config-sku '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit sku config\e[0;31m instead\e[0m'"'"''
}
config_git_tools()
{
  # configure credential manager and Beyond Compare 4 for WSL2 and Windows
  local drive
  [ $zouWsl -eq 0 ] && drive='/mnt/c'
  [ $zouWin -eq 0 ] && drive='C:'
  if [[ -n "$drive" ]]; then
    # credential manager
    local credentialManagerPath="$drive/Program Files/Git/mingw64/libexec/git-core/git-credential-manager.exe"
    if [[ -f "$credentialManagerPath" ]]; then
      [[ -z $(git config --global --get credential.helper) ]] && gitx config --global credential.helper "$(printf '%q' "$credentialManagerPath")"
    fi
    # bc4 tools
    local bc4Path="$drive/Program Files/Beyond Compare 4/BComp.exe"
    if [[ -f "$bc4Path" ]]; then
      # bc4 merge tool
      if [[ -z $(git config --global --get mergetool.bc4) ]]; then
        local cmd; printf -v cmd '%q %s %s %s %s' "$bc4Path" '"$LOCAL"' '"$REMOTE"' '"$BASE"' '"$MERGED"'
        gitx config --global mergetool.bc4.cmd "$cmd"
        gitx config --global mergetool.bc4.trustExitCode 'true'
      fi
      # bc4 diff tool
      if [[ -z $(git config --global --get difftool.bc4) ]]; then
        local cmd; printf -v cmd '%q %s %s' "$bc4Path" '"$LOCAL"' '"$REMOTE"'
        gitx config --global difftool.bc4.cmd "$cmd"
        gitx config --global difftool.bc4.prompt false
      fi
      [[ -z $(git config --global --get merge.tool) ]] && gitx config --global merge.tool bc4
      [[ -z $(git config --global --get diff.tool) ]]  && gitx config --global diff.tool bc4
    fi
  fi
}
config_migrate_registered_bundles()
{
  # reset registered bundles
  [ -f "$zouConfigFile" ] && rm "$zouConfigFile"

  local kv kvs key value
  IFS=$'\n' kvs=( $(gitx config --global --get-regexp '^zou\..*\.path$' 2>>"$stderrRedir") ); IFS=$OIFS
  for kv in "${kvs[@]}"; do
    [[ $kv =~ ^([^\ ]+)[[:blank:]]+(.*)$ ]]
    key=${BASH_REMATCH[1]}
    value=${BASH_REMATCH[2]}
    # io_trace "config_migrate_registered_bundles -- $(print_vars key value)"
    if gitx config --global --unset "$key" "$value" &>>"$stdallRedir"; then
      if ! gitx config --file "$zouConfigFile" --get-regexp "$key" "$value" >/dev/null; then
        gitx config --file "$zouConfigFile" --add "$key" "$value"
        cd "$value"
        gitx config --local --unset zou.bundle.registered &>>"$stdallRedir"
        cd - >/dev/null
      fi
    fi
  done
}