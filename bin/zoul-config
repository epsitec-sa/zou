#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_CONFIG ]] && . zoul-config
ZOUL_CONFIG=true

[[ -z $ZOUL_CORE ]] && . zoul-core

config_setup()
{
  config_git_tools

  # remove obsolete value
  gitx config --global --unset 'zou.initialized'

  # zou-flow semantic versioning
  gitx config --global --remove-section versionsort &>>"$stdallRedir"
  gitx config --global --add versionsort.suffix -@
  gitx config --global --add versionsort.suffix -alpha
  gitx config --global --add versionsort.suffix -beta
  gitx config --global --add versionsort.suffix -rc

  # do not push tags pointing at un-pushed commits automatically
  gitx config --global --unset push.followTags

  # update zou aliases
  local alias
  for alias in hotfix zh sb sbx sbw csku csel cver cpub smaster spull sclean oprune publish select attach vbranch config-sku; do
    gitx config --global --unset-all alias.$alias
  done
  gitx config --global alias.hotfix 'wip --hotfix'
  gitx config --global alias.zh 'zou-help'
  gitx config --global alias.sb 'sandbox'
  gitx config --global alias.sbx 'sandbox --reset --sm --skus --vr'
  gitx config --global alias.sbw 'sandbox --work'
  gitx config --global alias.csku 'sku config'
  gitx config --global alias.csel 'config-select'
  gitx config --global alias.cver 'config-version'
  gitx config --global alias.smaster 'sku enter master --dev'
  gitx config --global alias.spull 'sync -r -p'
  gitx config --global alias.supdate 'submodule update --init --recursive'
  gitx config --global alias.sclean 'cleanex -r'
  gitx config --global alias.ipub 'sku info -r -u'
  gitx config --global alias.oprune 'fetch origin --prune'
  gitx config --global alias.smartlog "log --graph --pretty=format:'commit: %C(bold red)%h%Creset %C(red)<%H>%Creset %C(bold magenta)%d %Creset%ndate: %C(bold yellow)%cd %Creset%C(yellow)%cr%Creset%nauthor: %C(bold blue)%an%Creset %C(blue)<%ae>%Creset%n%C(cyan)%s%n%Creset'"
  gitx config --global alias.logline "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
  gitx config --global alias.select '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit (wip|dev|prod) enter\e[0;31m instead\e[0m'"'"''
  gitx config --global alias.attach '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit dev attach\e[0;31m instead\e[0m'"'"''
  gitx config --global alias.config-sku '!printf '"'"'%b\n'"'"' '"'"'\e[0;31mThis command is deprecated, use \e[0;37mgit sku config\e[0;31m instead\e[0m'"'"''
}
config_git_tools()
{
  # configure credential manager and Beyond Compare 4 for WSL2 and Windows
  local drive
  [ $zouWsl -eq 0 ] && drive='/mnt/c'
  [ $zouWin -eq 0 ] && drive='C:'
  if [[ -n "$drive" ]]; then
    # credential manager
    local credentialManagerPath="$drive/Program Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe"
    # io_trace "config_git_tools -- $(print_vars credentialManagerPath)"
    if [[ -f "$credentialManagerPath" ]]; then
      local actualCredentialManagerPath="$(git config --global --get credential.helper)"
      if [[ -z $actualCredentialManagerPath || $actualCredentialManagerPath =~ git-credential-manager ]]; then
        actualCredentialManagerPath="$(printf '%q' "$credentialManagerPath")"
        gitx config --global credential.helper "$actualCredentialManagerPath"
      fi
      # avoid the git credential manager trying to guess which git server is hiding behind the repository URL
      if [[ $actualCredentialManagerPath =~ git-credential-manager ]]; then
        gitx config --global credential.git.epsitec.ch.provider generic
      else
        gitx config --global --unset credential.git.epsitec.ch.provider
      fi
    fi
    # bc4 tools
    local bc4Path="$drive/Program Files/Beyond Compare 4/BComp.exe"
    if [[ -f "$bc4Path" ]]; then
      # bc4 merge tool
      if [[ -z $(git config --global --get mergetool.bc4) ]]; then
        local cmd; printf -v cmd '%q %s %s %s %s' "$bc4Path" '"$LOCAL"' '"$REMOTE"' '"$BASE"' '"$MERGED"'
        gitx config --global mergetool.bc4.cmd "$cmd"
        gitx config --global mergetool.bc4.trustExitCode 'true'
      fi
      # bc4 diff tool
      if [[ -z $(git config --global --get difftool.bc4) ]]; then
        local cmd; printf -v cmd '%q %s %s' "$bc4Path" '"$LOCAL"' '"$REMOTE"'
        gitx config --global difftool.bc4.cmd "$cmd"
        gitx config --global difftool.bc4.prompt false
      fi
      [[ -z $(git config --global --get merge.tool) ]] && gitx config --global merge.tool bc4
      [[ -z $(git config --global --get diff.tool) ]]  && gitx config --global diff.tool bc4
    fi
  fi
  # avoid file mode changes in Fork on the WSL side
  [ $zouWin -eq 0 ] && git config --global core.filemode false
}
