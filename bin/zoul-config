#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_CONFIG ]] && . zoul-config
ZOUL_CONFIG=true

[[ -z $ZOUL_CORE ]] && . zoul-core

config_setup()
{
  # remove obsolete value
  git config --global --unset 'zou.initialized'

  # zou-flow semantic versioning
  git config --global --remove-section versionsort &>/dev/null
  git config --global --add versionsort.suffix -@
  git config --global --add versionsort.suffix -alpha
  git config --global --add versionsort.suffix -beta
  git config --global --add versionsort.suffix -rc

  # push tags pointing at un-pushed commits
  git config --global push.followTags true

  # update zou aliases
  local alias
  for alias in csku csel cver cpub smaster spull sclean oprune; do
    git config --global --unset-all alias.$alias
  done
  git config --global --add alias.csku 'config-sku'
  git config --global --add alias.csel 'config-select'
  git config --global --add alias.cver 'config-version'
  git config --global --add alias.smaster 'git-select --dev master'
  git config --global --add alias.spull 'git-sync --nopush'
  git config --global --add alias.sclean 'git-cleanex'
  git config --global --add alias.oprune 'fetch origin --prune'
}
config_migrate_registered_bundles()
{
  local IFS=$'\n' kv key value
  for kv in $(git config --global --get-regexp '^zou\..*\.path$' 2>/dev/null); do
    [[ $kv =~ ^([^\ ]+)[[:blank:]]+(.*)$ ]]
    key=${BASH_REMATCH[1]}
    value=${BASH_REMATCH[2]}
    # io_trace "config_upgrade_registered_bundles -- $(print_vars key value)"
    if git config --global --unset "$key" "$value" &>/dev/null; then
      if ! git config --file "$zou_configFile" --get-regexp "$key" "$value" >/dev/null; then
        git config --file "$zou_configFile" --add "$key" "$value"
        cd "$value"
        git config --local --unset zou.bundle.registered &>/dev/null
        cd - >/dev/null
      fi
    fi
  done
}