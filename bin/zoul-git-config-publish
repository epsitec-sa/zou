#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG_PUBLISH ]] && . zoul-git-config-publish
ZOUL_GIT_CONFIG_PUBLISH=true

[[ -z $ZOUL_GIT_REPO ]]          && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

config_publish_disable()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_ensure_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  git config --file "$configFile" "publish.$branch.disable" 'true'

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: disable publish for branch '$branch'" -- "$configFile" &>/dev/null 
}
config_publish_enable()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_ensure_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  git config --file "$configFile" --remove-section "publish.$branch" &>/dev/null

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: enable publish for branch '$branch'" -- "$configFile" &>/dev/null
}
config_publish_is_disabled()
{
  local branch=$1 configFile=$2 disabled
  [[ -z $branch ]] && branch=$(branch_ensure_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  disabled=$(git config --file "$configFile" --get "publish.$branch.disable") || return 1
  [[ $disabled == true ]] && return 0 || return 1
}
config_publish_is_enabled() { ! config_publish_is_disabled "$@"; }
config_publish_status()
{
  local branch=$1 configFile=$2
  [[ -z $branch ]] && branch=$(branch_ensure_current)
  [[ -z $configFile ]] && configFile=$(repo_zouflow_path)
  config_publish_is_disabled "$@" \
  && io_message 'publish disabled' "[$branch]" \
  || io_message 'publish enabled' "[$branch]"
}