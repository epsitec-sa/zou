#!/bin/bash

[[ -z $ZOUL_CORE ]]       && . zoul-core
[[ -z $ZOUL_GIT_REPO ]]   && . zoul-git-repo
[[ -z $ZOUL_GIT_BUNDLE ]] && . zoul-git-bundle
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

bundle_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; bundlePaths+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -u|--unregister) unregister=true;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  bundlePaths+=( "$(realpath $1)" )
  esac; shift; done
}
bundle_run()
{
  local unregister bundlePaths=()
  bundle_parse "$@"
  
  [ ${#bundlePaths[@]} -eq 0 ] && bundlePaths+=("$(repo_bundle_root)")
  if [[ $unregister == true ]]; then
    bundle_visit_async 'bundlePaths[@]' _bundle_unregister
  else
    bundle_visit_async 'bundlePaths[@]' _bundle_register
  fi

  local bundleRegisteredPaths
  bundle_set_registered_paths
  if [ ${#bundleRegisteredPaths[@]} -eq 0 ]; then
    io_warning "No bundle registered."
  else
    bundle_visit_async 'bundleRegisteredPaths[@]' _bundle_status
  fi
}
_bundle_register()
{
  local url=$(git config remote.origin.url)
  bundle_register "$url" "$bundleRoot"
}
_bundle_unregister()
{
  local url=$(git config remote.origin.url)
  bundle_unregister "$url" "$bundleRoot"
}
_bundle_status()
{
  io_info "${LightBlue}$bundleUrl${Cyan} -> ${Brown}$bundleRoot${Cyan}" "$bundleTracePrefix"
}

bundle_run "$@"

