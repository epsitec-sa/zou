#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select

for_parse()
{
  local forCommand=() 
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; forCommand+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -q|--quiet)         quiet=true;;
    -e|--stop-on-error) stopOnError=true;;
    -a|--all)           noSkuFilter=true;;
    -p|--deep)          noSelectFilter=true;;
    -s|--sm-only)       smOnly=true;;
    -b|--bottom-up)     bottomUp=true;;
    -t|--ancestors)     visitAncestors=true;;
    -j*)                jobsCount=${1#-j};;
    --stp)              unset useLongModuleTracePrefix;;
    -v:m)               showVisitModuleMessage=true;;
    -*) io_error "unknown option '$1'"; return 1;;
    *) forCommand+=("$1");;
  esac; shift; done

  zou_command="${forCommand[@]}"
}
for_run()
{
  # parse command line
  local jobsCount quiet stopOnError \
        noSkuFilter noSelectFilter \
        smOnly bottomUp visitAncestors \
        useLongModuleTracePrefix=true \
        showVisitModuleMessage \
        zou_command

  for_parse "$@" || return $?
  module_run for_main
}
for_main()
{
  local ec=0
  if [[ $smOnly == true ]]; then
    for_submodules || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  else
    for_tree || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
    if [[ $visitAncestors == true ]]; then
      for_ancestors || ec=$?
      [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
    fi
  fi
  return $ec
}
for_tree()
{
  # trace_method for_tree "$global_variable_names"
  local ec=0

  if [[ $bottomUp != true ]]; then
    for_command || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  fi

  for_submodules || ec=$?
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec

  if [[ $bottomUp == true ]]; then
    for_command || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  fi
  # io_warning "<<<< for_tree ${*@Q}" "$moduleTracePrefix"
  return $ec
}
for_submodules() { module_visit_submodules_async for_submodules_enumerator for_tree; }
for_ancestors()  { module_visit_submodules repo_ancestor_roots for_command; }
for_command()    { eval "$zou_command"; }

for_submodules_enumerator()
{
  local include exclude
  if [[ $noSkuFilter == true ]]; then
    include=( $(repo_list_submodule_paths) )
  else
    include=( $(config_sku_list_included) )
  fi
  if [[ $noSelectFilter == true ]]; then
    exclude=()
  else
    exclude=( $(config_select_list_excluded) )
  fi
  array_remove_array 'include[@]' 'exclude[@]'
}

for_run "$@"
