#! /bin/bash

. zlib-core

sm_opts=()
fe_opts=() 
args=()

while [[ "$#" > 0 ]]; do case "$1" in
  --)                   shift; args+=("$@"); break;;
  -h|--help)            zou-help $0; exit 0;;
  -l|--work-dir-last)   work_dir_last=true;;
  -s|--sm-only)         sm_only=true;;
  -q|--quiet)           sm_opts+=('--quiet');;
  -r|--recursive)       recursive=true;;
  -e|--stop-on-error)   stop_on_error=true;;
  -1|--level1-only)     level1_only=true;;
  *)                    args+=("$1");;
esac; shift; done

[[ $level1_only == true ]] && {
  [[ $recursive == true ]] && {
    io_warning '--recursive option is not compatible with -1'
    unset recursive;
  }
  sm_only=true;
}
[[ $recursive == true ]] && fe_opts+=('--recursive')

command="${args[@]}"
[[ $stop_on_error == true ]] || command="($command || true)"

run_in_working_dir()
{
  path=$(basename `pwd`)
  [[ "${sm_opts[@]}" =~ "--quiet" ]] || echo Entering $path
  eval "$command"
}

[[ $sm_only != true && $work_dir_last != true ]] && (run_in_working_dir || exit 1)

exit_code=0
git submodule "${sm_opts[@]}" foreach "${fe_opts[@]}" "$command" 2>&1 | sed -u '/^fatal:/q' | grep --line-buffered -v '^fatal:' && exit_code=1
(( $exit_code != 0 )) && [[ $stop_on_error == true ]] && exit $exit_code

[[ $sm_only != true && $work_dir_last == true ]] && run_in_working_dir