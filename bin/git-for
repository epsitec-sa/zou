#!/bin/bash

. zoul-git-repo

export INSIDE_FOR=true

sm_opts=()
fe_opts=() 
args=()

while [[ "$#" > 0 ]]; do case "$1" in
  --)                   shift; args+=("$@"); break;;
  -h|--help)            zou-help $0; exit 0;;
  -q|--quiet)           sm_opts+=('--quiet');;
  -r|--recursive)       FOR_RECURSIVE=true;;
  -s|--sm-only)         FOR_SUBMODULE_ONLY=true;;
  -e|--stop-on-error)   FOR_STOP_ON_ERROR=true;;
  -l|--root-last)       FOR_ROOT_LAST=true;;
  *)                    args+=("$1");;
esac; shift; done

[[ $FOR_RECURSIVE == true ]] && fe_opts+=('--recursive')

export FOR_RECURSIVE
export FOR_SUBMODULE_ONLY
export FOR_STOP_ON_ERROR
export FOR_ROOT_LAST

zou_command="${args[@]}"
[[ $FOR_STOP_ON_ERROR == true ]] || zou_command="($zou_command || true)"
export zou_command

run_inside_root()
{
  local FOR_INSIDE_ROOT=true
  local path=$(repo_module_id)
  [[ "${sm_opts[@]}" =~ "--quiet" ]] || echo Entering "'$(repo_module_root_relative_to_path)'"
  eval "$zou_command"
}

[[ $FOR_SUBMODULE_ONLY != true && $FOR_ROOT_LAST != true ]] && { run_inside_root || exit 1; }

exit_code=0
(
  IFS='' # IFS will be restored on subshell exit
  while read line; do
    echo "$line" | grep --line-buffered -v '^fatal:'
    exit_code=$?
  done < <(git submodule "${sm_opts[@]}" foreach "${fe_opts[@]}" "{ FOR_INSIDE_SUBMODULE=true; $zou_command 2>&1; }" | sed -u '/^fatal:/q')
)

(( $exit_code != 0 )) && [[ $FOR_STOP_ON_ERROR == true ]] && exit $exit_code

[[ $FOR_SUBMODULE_ONLY != true && $FOR_ROOT_LAST == true ]] && run_inside_root