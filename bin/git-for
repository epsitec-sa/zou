#!/usr/bin/env bash

[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]] && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]   && . zoul-git-cosm

for_parse()
{
  local forCommand=() 
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; forCommand+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -e|--stop-on-error) stopOnError=true;;
    -a|--all)           noSkuFilter=true;;
    -p|--deep)          noSelectFilter=true;;
    -s|--sm-only)       smOnly=true;;
    -b|--bottom-up)     bottomUp=true;;
    -t|--ancestors)     visitAncestors=true;;
    -j*)                jobsCount=${1#-j};;
    -v:0)               useLongModuleTracePrefix='';;
    -v:m)               showVisitModuleMessage=true;;
    --scope)            forScopes+=( $2 ); shift;;
    -*) io_error "unknown option '$1'"; return 1;;
    *) forCommand+=("$1");;
  esac; shift; done

  zouCommand="${forCommand[@]}"
}
for_run()
{
  # parse command line
  local jobsCount stopOnError \
        noSkuFilter noSelectFilter \
        smOnly bottomUp visitAncestors \
        zouCommand \
        forScopes=( config_scope )

  for_parse "$@" || return $?
  module_run "${forScopes[@]}" for_main
}
for_main()
{
  local ec=0
  if [[ $smOnly == true ]]; then
    for_submodules || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  else
    for_tree || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
    if [[ $visitAncestors == true ]]; then
      for_ancestors || ec=$?
      [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
    fi
  fi
  return $ec
}
for_tree()
{
  # mio_warning ">>>> for_tree ${*@Q}"
  local ec=0

  if [[ $bottomUp != true ]]; then
    for_command || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  fi

  for_submodules || ec=$?
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec

  if [[ $bottomUp == true ]]; then
    for_command || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  fi
  # mio_warning "<<<< for_tree ${*@Q}"
  return $ec
}
for_submodules() { module_visit_submodules_async for_submodules_enumerator "${forScopes[@]}" for_tree; }
for_ancestors()  { module_visit_submodules repo_ancestor_roots "${forScopes[@]}" for_command; }
for_command()    { eval "$zouCommand"; }

for_submodules_enumerator()
{
  # io_trace "for_submodules_enumerator -- $(print_vars configSkuInclude[@] configSelectExclude[@])"
  array_remove_array 'configSkuInclude[@]' 'configSelectExclude[@]'
}

for_run "$@"
