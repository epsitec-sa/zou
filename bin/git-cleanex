#!/usr/bin/env bash

[[ -z $ZOUL_GIT_CMD ]]    && . zoul-git-cmd
[[ -z $ZOUL_GIT_REPO ]]   && . zoul-git-repo

cleanex_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -d|--dsm-only)  dsmOnly=true;;
    -f|--force)     force=true;;
    --)             shift; break;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_args "${args[@]}"
  
  cleanexModulePaths=( "$@" )
}
cleanex_run()
{
  local jobsCount recursive noSkuFilter command='cleanex' subcommand='do' \
        cmdScopes=( config_scope ) cleanexModulePaths=() \
        dsmOnly force

  cleanex_parse "$@" || return $?

  if [[ $dsmOnly == true ]]; then
    startupMessage="Removing dangling submodules, please wait..."
  else
    startupMessage="Cleaning, please wait..."
  fi


  bundle_scope cleanex_command
}
cleanex_command()
{
  # io_trace "stow_command -- $(print_vars stowModulePaths[@])"

  [ ${#cleanexModulePaths[@]} -eq 0 ] && cleanexModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${cleanexModulePaths[@]}"

  cmd_visit_modules
}
cleanex_do_prolog()
{
  if [[ $dsmOnly == true ]]; then
    repo_remove_dangling_submodules_async
    return 0
  fi

  if [[ $force == true ]]; then
    repo_remove_dangling_submodules_async
  else
    repo_require_clean_work_tree 'Cannot clean' || return 0
  fi

  if [ -d node_modules ]; then
    mio_info 'Removing node modules...'
    rm -rf node_modules
  fi

  local line
  mio_info 'Removing ignored files...'
  io_buffered_eval 'git clean -xdf -e packages'
  gitx checkout . &>"$stdallRedir"
}

cleanex_run "$@"
