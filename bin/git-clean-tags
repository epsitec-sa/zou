#!/bin/bash

# clean tags (apply zou-flow):
# 1. delete root tags that are already in other folder
# 2. move non semver root tags to other folder
# 3. move big patch root tags to other folder (v12.5.16460)
# 4. remove leading zeros to prerelease version (v1.2.3-rc01 -> v1.2.3-rc1 )
# 5. remove other folder's redondant tags
#    group tags pointing to the same commit hash
#      create a lookup table with the commit hash as key and the commit tags (space separated) as value.

[[ -z $ZOUL_CORE ]]       && . zoul-core
[[ -z $ZOUL_GIT_TAG ]]    && . zoul-git-tag
[[ -z $ZOUL_GIT_VTAG ]]   && . zoul-git-vtag
[[ -z $ZOUL_GIT_CORE ]]   && . zoul-git-core
[[ -z $ZOUL_GIT_REPO ]]   && . zoul-git-repo
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

clean_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -*) io_error "unknown option: $1"; return 1;;
  esac; shift; done
}
clean_run()
{
  clean_parse "$@" || return $?
  
  module_run clean_main
}
clean_main()
{
  tag_delete_root_in_other
  tag_move_non_semver_and_big_patch_to_other
  tag_remove_prerelease_leading_zero
  tag_remove_other_redondant
}

tag_delete_root_in_other()
{
  local tag rtag
  for tag in $(git tag); do
    if [[ $tag =~ ^other/(.*)$ ]]; then
      rtag=${BASH_REMATCH[1]}
      tag_exists $rtag && tag_delete $rtag
    fi
  done
}
tag_move_non_semver_and_big_patch_to_other()
{
  local tag patch
  for tag in $(git tag); do
    vtag_is_other $tag && continue;
    if vtag_is_semver $tag; then
      patch=${BASH_REMATCH[5]}
      [[ -z $patch ]] && continue
      (( $patch < 1000 )) && continue
    fi
    tag_move $tag "other/$tag"
  done
}
tag_remove_other_redondant()
{
  declare -A lookup
  local tag h
  for tag in $(git tag); do
    h=$(git_get_commit $tag)
    if [ -z "${lookup[$h]}" ]; then
      lookup[$h]=$tag
    else
      lookup[$h]="${lookup[$h]} $tag"
    fi
  done

  local remove=() k r
  for k in ${!lookup[@]}; do
    r=( ${lookup[$k]} )
    if [[ ${#r[@]} > 1 ]]; then
      for tag in "${r[@]}"; do
        [[ $tag =~ ^other/.* ]] && remove+=( $tag )
      done
    fi
  done

  if [ ${#remove[@]} -ne 0 ]; then
    for tag in ${remove[@]}; do
      tag_delete $tag
    done
  fi
}
tag_remove_prerelease_leading_zero()
{
  local tag0 tag1 pv0 pv1
  for tag0 in $(git tag -l --sort=v:refname); do
    vtag_is_other $tag0 && continue;
    if vtag_is_semver $tag0; then
      pv0=${BASH_REMATCH[8]}
      [[ -z $pv0 ]] && continue
      pv1=$((10#$pv0))  # remove leading zeros
      [[ $pv0 == $pv1 ]] && continue
      tag1="${BASH_REMATCH[1]}v${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.${BASH_REMATCH[5]}${BASH_REMATCH[7]}$pv1${BASH_REMATCH[9]}"
      # echo "$tag0 -> $tag1"
      if tag_exists "$tag1"; then
        tag_delete "$tag0"
      else
        tag_move "$tag0" "$tag1"
      fi
    fi
  done
}

clean_run "$@"
