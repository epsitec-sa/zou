#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_CONFIG_SELECT ]] && . zoul-git-config-select
ZOUL_GIT_CONFIG_SELECT=true

[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# WARNING: we work with submodule paths relative to bundle, not with submodule IDs

# make submodules internal or external
# modify .zou-flow configuration file
#
# submodule level 0: all internal by default
#
# [select]
#   exclude = fact
#   exclude = compta
#
# submodule level > 0: all external by default
#
# [select]
#   include = sm1
#   include = sm2
#

config_select_include()
{
  # io_trace "config_select_include ${*@Q}"
  case $# in
    0) config_select_include_all;;
    1) config_select_include_single "$1";;
    *) config_select_include_many "$@"
  esac
}
config_select_exclude()
{
  # io_trace "config_sku_exclude ${*@Q}"
  case $# in
    0) config_select_exclude_all;;
    1) config_select_exclude_single "$1";;
    *) config_select_exclude_many "$@"
  esac
}

config_select_include_single()
{
  # make submodule internal

  local path=$1 rePath configFile="$(_config_select_file_path)"
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  _config_select_check_path "$path" || return 1
  rePath=$(wildcard_to_regex_match_whole "$path")
  if _config_select_level0; then
    # remove path from excluded list
    gitx config --file "$configFile" --unset-all "select.exclude" "$rePath" &>"$stdallRedir"
  else
    # add path to included list
    gitx config --file "$configFile" --get-all "select.include" "$rePath" &>"$stdallRedir" \
    || gitx config --file "$configFile" --add "select.include" "$path" &>"$stdallRedir"
  fi

  gitx update-index --add -- "$configFile" &>"$stdallRedir" \
  && git_commit "make submodule '$path' internal" "$configFile"
}
config_select_exclude_single()
{
  # make submodule external

  local path=$1 rePath configFile="$(_config_select_file_path)"
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  _config_select_check_path "$path" || return 1
  rePath=$(wildcard_to_regex_match_whole "$path")
  if _config_select_level0; then
    # add path to excluded list
    gitx config --file "$configFile" --get-all "select.exclude" "$rePath"  &>"$stdallRedir" \
    || gitx config --file "$configFile" --add "select.exclude" "$path" &>"$stdallRedir"
  else
    # remove path from included list
    gitx config --file "$configFile" --unset-all "select.include" "$rePath" &>"$stdallRedir"
  fi

  gitx update-index --add -- "$configFile" &>"$stdallRedir" \
  && git_commit "make submodule '$path' external" "$configFile"
}

config_select_include_many()
{
  # make submodules internal

  local path rePath configFile="$(_config_select_file_path)"
  for path in $@; do
    _config_select_check_path "$path" || return 1
    rePath=$(wildcard_to_regex_match_whole "$path")
    if _config_select_level0; then
      # remove path from excluded list
      gitx config --file "$configFile" --unset-all "select.exclude" "$rePath" &>"$stdallRedir"
    else
      # add path to included list
      gitx config --file "$configFile" --get-all "select.include" "$rePath" &>"$stdallRedir" \
      || gitx config --file "$configFile" --add "select.include" "$path" &>"$stdallRedir"
    fi
  done

  gitx update-index --add -- "$configFile" &>"$stdallRedir" && \
  git_commit "make submodules '$(string_join ', ' $@)' internal" "$configFile"
}
config_select_exclude_many()
{
  # make submodules external

  local path rePath configFile="$(_config_select_file_path)"
  for path in $@; do
    _config_select_check_path "$path" || return 1
    rePath=$(wildcard_to_regex_match_whole "$path")
    if _config_select_level0; then
      # add path to excluded list
      gitx config --file "$configFile" --get-all "select.exclude" "$rePath"  &>"$stdallRedir" \
      || gitx config --file "$configFile" --add "select.exclude" "$path" &>"$stdallRedir"
    else
      # remove path from included list
      gitx config --file "$configFile" --unset-all "select.include" "$rePath" &>"$stdallRedir"
    fi
  done

  gitx update-index --add -- "$configFile" &>"$stdallRedir" \
  && git_commit "make submodules '$(string_join ', ' $@)' external" "$configFile"
}

config_select_include_all()
{
  # make all submodules internal

  local configFile="$(_config_select_file_path)"
  if _config_select_level0; then
    # remove excluded list (full section)
    gitx config --file "$configFile" --remove-section "select" &>"$stdallRedir"

    gitx update-index --add -- "$configFile" &>"$stdallRedir" \
    && git_commit 'make all submodules internal' "$configFile"
  else
    # add all submodules to included list
    config_select_include_many $(repo_list_submodule_paths)
  fi
}
config_select_exclude_all()
{
  # make all submodules external

  local configFile="$(_config_select_file_path)"
  if _config_select_level0; then
    config_select_exclude_many $(repo_list_submodule_paths)
  else
    gitx config --file "$configFile" --remove-section "select" &>"$stdallRedir"

    gitx update-index --add -- "$configFile" &>"$stdallRedir" \
    && git_commit 'make all submodules external' "$configFile"
  fi
}

config_select_update()
{
  # remove unexisting sub-modules from internal or external list
  local smpaths existing configFile="$(_config_select_file_path)" path smpaths s
  [ ${#existing[@]} -eq 0 ] && existing=( $(repo_list_submodule_paths) )

  if _config_select_level0; then
    # update excluded list
    smpaths=( $(gitx config --file "$configFile" --get-all "select.exclude" 2>"$stderrRedir") )
  else
    # update included list
    smpaths=( $(gitx config --file "$configFile" --get-all "select.include" 2>"$stderrRedir") )
  fi
    [ ${#smpaths[@]} -eq 0 ] && return 0
  
  existing=( "${moduleSubmodulePaths[@]}" )
  [ ${#existing[@]} -eq 0 ] && existing=( $(repo_list_submodule_paths) )
  # io_trace "config_select_update -1- $(print_vars smpaths[@] existing[@])"

  smpaths=($(array_remove_array 'smpaths[@]' 'existing[@]'))
  [ ${#smpaths[@]} -eq 0 ] && return 0
  # io_trace "config_select_update -2- $(print_vars smpaths[@] existing[@])"
  [ ${#smpaths[@]} -gt 1 ] && s='s'
  smlist=$(string_join ', ' "${smpaths[@]}")
  io_message "Unconfiguring ${VC}$smlist" "$moduleTracePrefix"

  if _config_select_level0; then
    # update excluded list
    for path in "${smpaths[@]}"; do
      # io_trace "config_select_update -3- $(print_vars path)"
      gitx config --file "$configFile" --unset-all "select.exclude" "$path" &>"$stdallRedir" || io_trace_error 'config_select_update -3-'
    done
  else
    # update included list
    for path in "${smpaths[@]}"; do
      # io_trace "config_select_update -3- $(print_vars path)"
      gitx config --file "$configFile" --unset-all "select.include" "$path" &>"$stdallRedir" || io_trace_error 'config_select_update -3-'
    done
  fi
  
  gitx update-index --add -- "$configFile" &>"$stdallRedir" && \
  git_commit "unconfigure submodule$s '$smlist'" "$configFile"
}

config_select_is_excluded() { ! config_select_is_included "$@"; }
config_select_is_included()
{
  local path=$1 p
  [[ -z $path ]] && path=$(repo_path_relative_to_module_root)
  for p in $(config_select_list_included); do
     [[ $p == $path ]] && return 0
  done
  return 1
}
config_select_list_included()
{
  local configFile="$(_config_select_file_path)" submodules excluded
  if _config_select_level0; then
    [[ -n $1 ]] && submodules=( "${!1}" ) || submodules=( $(repo_list_submodule_paths) )
    excluded=( $(gitx config --file "$configFile" --get-all "select.exclude" 2>"$stderrRedir") )
    array_remove_array submodules[@] excluded[@]
  else
    gitx config --file "$configFile" --get-all "select.include" 2>"$stderrRedir" || true
  fi
}
config_select_list_excluded()
{
  local configFile="$(_config_select_file_path)" submodules included
  if _config_select_level0; then
    gitx config --file "$configFile" --get-all "select.exclude" &>"$stdallRedir" || true
  else
    [[ -n $1 ]] && submodules=( "${!1}" ) || submodules=( $(repo_list_submodule_paths) )
    included=( $(gitx config --file "$configFile" --get-all "select.include" 2>"$stderrRedir") )
    array_remove_array submodules[@] included[@]
  fi
}
config_select_status()
{
  # io_trace "config_select_status ${*@Q}"
  
  local mode=$1
  io_lock_enter
  if [[ -z $mode || $mode == 'include' ]]; then
    for path in $(config_select_list_included | sort); do
      mio_success_unsafe "  $path"
    done
  fi
  if [[ -z $mode || $mode == 'exclude' ]]; then
    for path in $(config_select_list_excluded | sort); do
      mio_message_unsafe "x $path" ${Purple}
    done
  fi
  io_lock_exit
}

# submodules level  0 are internal by default
# submodules level >0 are external by default
_config_select_level0()     { (( $(repo_module_level "$@") == 0 )); }
_config_select_file_path()  { [[ -n $moduleConfigFile ]] && echo "$moduleConfigFile" || echo "$PWD/.zou-flow"; }
_config_select_check_path() { [ -d "$1" ] || { io_error "Submodule ${VC}$1${Red} does not exist" "$moduleTracePrefix"; return 1; }; }
