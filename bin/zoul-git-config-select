#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_SCONFIG ]] && . zoul-git-sconfig
ZOUL_GIT_SCONFIG=true

[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

#################################################################
# UNDER CONSTRUCTION
#################################################################

# configure select submodules
# modify .zou-flow configuration file
#
# bundle: all included
# submodule level 1: all excluded
#
# [select "sku/sal/dev"]
#   include = sm1
#   include = sm2

_config_select_default_verb() { repo_is_root && echo 'include' || echo 'exclude'; }
_config_select_anti_verb()    { [[ $1 == 'exclude' ]] && echo 'include' || echo 'exclude'; }

config_select_include()
{
  local path branch configFile
  path=${1:-$(repo_path_relative_to_module)} || return 1
  branch=${2:-$(branch_ensure_current)} || return 1
  configFile=${3:-$(repo_zouflow_path)} || return 1
  local rePath=$(regex_escape "$path")
  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'include' ]]; then
    git config --file "$configFile" --unset-all "select.$branch.exclude" "$rePath"
  else
    git config --file "$configFile" --get-all "select.$branch.include" "$rePath" >/dev/null \
    || git config --file "$configFile" --add "select.$branch.include" "$path"
  fi

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: enable select for submodule '$path' on branch '$branch'" -- "$configFile" &>/dev/null
}
config_select_include_all()
{
  local branch configFile
  branch=${1:-$(branch_ensure_current)} || return 1
  configFile=${2:-$(repo_zouflow_path)} || return 1
  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'include' ]]; then
    git config --file "$configFile" --remove-section "select.$branch" &>/dev/null

    git update-index --add -- "$configFile" &>/dev/null \
    && git commit -m "zou-flow: enable select for all submodules on branch '$branch'" -- "$configFile" &>/dev/null
  else
    config_select_include_many paths[@] "$branch" "$configFile" $(repo_list_submodules)
  fi
}
config_select_include_many()
{
  local branch configFile path rePath
  branch=${1:-$(branch_ensure_current)} || return 1; shift
  configFile=${1:-$(repo_zouflow_path)} || return 1; shift

  local defaultVerb=$(_config_select_default_verb)
  local antiVerb=$(_config_select_anti_verb $defaultVerb)
  for path in $@; do
    rePath=$(regex_escape "$path")
    git config --file "$configFile" --unset-all "select.$branch.$antiVerb" "$rePath"
  done

  git update-index --add -- "$configFile" &>/dev/null && \
  git commit -m "zou-flow: enable select for submodules '$(string_join ', ' $@)' on branch '$branch'" -- "$configFile" &>/dev/null
}
config_select_exclude()
{
  local path branch configFile
  path=${1:-$(repo_path_relative_to_module)} || return 1
  branch=${2:-$(branch_ensure_current)} || return 1
  configFile=${3:-$(repo_zouflow_path)} || return 1
  local rePath=$(regex_escape "$path")
  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'exclude' ]]; then
    git config --file "$configFile" --unset-all "select.$branch.include" "$rePath"
  else
    git config --file "$configFile" --get-all "select.$branch.exclude" "$rePath" >/dev/null \
    || git config --file "$configFile" --add "select.$branch.exclude" "$path"
  fi

  git update-index --add -- "$configFile" &>/dev/null \
  && git commit -m "zou-flow: disable select for submodule '$path' on branch '$branch'" -- "$configFile" &>/dev/null
}
config_select_exclude_all()
{
  local branch configFile
  branch=${1:-$(branch_ensure_current)} || return 1
  configFile=${2:-$(repo_zouflow_path)} || return 1
  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'exclude' ]]; then
    git config --file "$configFile" --remove-section "select.$branch" &>/dev/null

    git update-index --add -- "$configFile" &>/dev/null \
    && git commit -m "zou-flow: disable select for all submodules on branch '$branch'" -- "$configFile" &>/dev/null
  else
    config_select_exclude_many "$branch" "$configFile" $(repo_list_submodules)
  fi
}
config_select_exclude_many()
{
  local branch configFile path rePath
  branch=${1:-$(branch_ensure_current)} || return 1; shift
  configFile=${1:-$(repo_zouflow_path)} || return 1; shift

  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'exclude' ]]; then
    for path in $@; do
      rePath=$(regex_escape "$path")
      git config --file "$configFile" --unset-all "select.$branch.include" "$rePath"
    done
  else
    for path in $@; do
      rePath=$(regex_escape "$path")
      git config --file "$configFile" --get-all "select.$branch.exclude" "$rePath" >/dev/null \
      || git config --file "$configFile" --add "select.$branch.exclude" "$path"
    done
  fi

  git update-index --add -- "$configFile" &>/dev/null && \
  git commit -m "zou-flow: disable select for submodules '$(string_join ', ' $@)' on branch '$branch'" -- "$configFile" &>/dev/null
}
config_select_is_excluded() { ! config_select_is_included "$@"; }
config_select_is_included()
{
  local path branch configFile
  path=${1:-$(repo_path_relative_to_module)} || return 1
  branch=${2:-$(branch_ensure_current)} || return 1
  configFile=${3:-$(repo_zouflow_path)} || return 1
  local rePath=$(regex_escape "$path")
  git config --file "$configFile" --get-all "select.$branch.include" "$rePath" >/dev/null
}
config_select_list_included()
{
  local branch configFile
  branch=${1:-$(branch_ensure_current)} || return 1
  configFile=${2:-$(repo_zouflow_path)} || return 1
  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'exclude' ]]; then
    git config --file "$configFile" --get-all "select.$branch.include"
  else
    local submodules=( $(repo_list_submodules) )
    local excluded=( $(git config --file "$configFile" --get-all "select.$branch.exclude") )
    array_remove_array submodules[@] excluded[@]
  fi
}
config_select_list_excluded()
{
  local branch configFile
  branch=${1:-$(branch_ensure_current)} || return 1
  configFile=${2:-$(repo_zouflow_path)} || return 1
  local defaultVerb=$(_config_select_default_verb)
  if [[ $defaultVerb == 'include' ]]; then
    git config --file "$configFile" --get-all "select.$branch.exclude"
  else
    local submodules=( $(repo_list_submodules) )
    local included=( $(git config --file "$configFile" --get-all "select.$branch.include") )
    array_remove_array submodules[@] excluded[@]
  fi
}
config_select_status()
{
  local branch configFile
  branch=${1:-$(branch_ensure_current)} || return 1
  configFile=${2:-$(repo_zouflow_path)} || return 1
  io_message "'$branch'" "select"
  for path in $(config_select_list_included "$@" | sort); do
    io_message "   $path" ''
  done
  for path in $(config_select_list_excluded "$@" | sort); do
    io_message " x $path" ''
  done
}
