#!/bin/bash

[[ -z $ZOUL_GIT_REPO ]]        && . zoul-git-repo
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core
[[ -z $ZOUL_GIT_MODULE ]]      && . zoul-git-module

vstatus_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    .)              recursive='';;
    --alpha)        prerelPrefix='alpha';;
    --beta)         prerelPrefix='beta';;
    --rc)           prerelPrefix='rc';;
    --rtm)          prerelPrefix='rtm';;
    --debug)        debug=true;;
    -*)             forOpts+=($1);;
    *) ref=$1;;
  esac; shift; done
}
vstatus_run()
{
  local prerelPrefix forOpts=() ref recursive=true
  vstatus_parse "$@" || return $?

  module_run vstatus_main "$ref"
}
vstatus_main()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && recursive=''

  if [[ $recursive == true ]]; then
    . git-for "${forOpts[@]}" -- vstatus_node "$@"
  else
    module_run vstatus_node "$@"
  fi
}
vstatus_node()
{
  local ref=$(git_symbolic_ref "${1:-HEAD}") verbose
  [[ -z $recursive ]] && verbose=true
  # io_trace "vstatus_node ${*@Q} -- $(print_vars ref verbose)"
  if ! ref_exists "$ref"; then
    ref=$(branch_realize $ref)
    if [ $? -gt 1 ]; then
      mio_error "Branch '$1' does not exist"
      return 1
    fi
  fi
  local vbranch vtag delta alias ntag tags
  vtag_set_describe "$ref"
  if [[ -z $vtag ]]; then
    mio_error "Version tag not found"
    return 1
  fi

  # get the highest vtag on vbranch
  vtag=$(vtag_highest $vbranch)

  # Already released at   v12.1.1 -- next version = v12.1.2
  # 123 commit[s] ahead of v12.1.1 -- next version = v12.1.2
  ntag=$(vtag_increment "$vtag" "$prerelPrefix")
  if [ $delta -eq 0 ]; then
    mio_message "Already released   at ${VC}$(string_pad_right 8 $vtag)${LightBlue} -- next version = ${VC}$(string_pad_right 8 $ntag)" ${LightBlue}
  else
    # mio_info "Active branch is ${VC}$(string_pad_left 3 $delta)${Cyan} commit[s] ahead of tag ${VC}$(string_pad_right 8 $vtag)${Cyan} -- next version = ${VC}$(string_pad_right 8 $ntag)"
    mio_info "${VC}$(string_pad_left 3 $delta)${Cyan} commit[s] ahead of ${VC}$(string_pad_right 8 $vtag)${Cyan} -- next version = ${VC}$(string_pad_right 8 $ntag)"
  fi
  return 0
}

vstatus_run "$@"
