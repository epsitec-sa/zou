#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_LOCK ]] && . zoul-lock
ZOUL_LOCK=true

[[ -z $ZOUL_BOOT ]] && . zoul-boot
[[ -z $ZOUL_TRAP ]] && . zoul-trap

lock()
{
  local gate="$1" fd
  exec {fd}>"$gate"
  shift
  (
    "$zouSbinDir/flock" $fd || exit 1
    $*
  )
  exec {fd}>&-
}
lock_wait()
{
  local gate="$1" delay="$2" fd
  exec {fd}>"$gate"
  shift 2
  (
    "$zouSbinDir/flock" -w "$delay" $fd || exit 1
    $*
  )
  exec {fd}>&-
}

# flock is not distributed with git-bash
# MSYS2 has a version of flock but it creates a conflict with cygwin.dll
# use atomic mkdir

lock_init()
{
  local gate=${1:-$(mktemp)}
  # Remove gate when the script finishes, or when it receives a signal
  trap_add "rm \"$gate\"" 0
  echo $gate
}
# in:
#   $1:lock  -- lock=$(lock_init)
#   $2:delay -- loop delay
#   $3:count -- timeout = count * delay (default to infinite)
# return code:
#   0: if lock acquired
#   1: if timeout
lock_enter()
{
  if [[ -z $3 ]]; then
    while ! mkdir "$1" &>/dev/null; do
      sleep ${2:-0.1}
    done
    return 0
  else
    for (( c=1; c<=$3; c++ )); do
      mkdir "$1" &>/dev/null && return 0
      sleep ${2:-0.1}
    done
    return 1
  fi
}
lock_exit()
{
  rm -rf "$1"
}
lock_enter_trace()
{
  local count=0
  while ! mkdir "$1" &>/dev/null; do
    (( count += 1 ))
    sleep ${2:-0}
  done
  echo "lock_enter[$count] $1 -- $moduleId"
}
lock_exit_trace()
{
  echo "lock_exit $1 -- $moduleId"
  rm -rf "$1"
}
