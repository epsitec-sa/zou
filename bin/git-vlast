#!/usr/bin/env bash

[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
[[ -z $ZOUL_GIT_PROD ]]   && . zoul-git-prod

vlast_parse()
{
  local arg
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help)    zou-help $0; exit 0;;
    -v|--verbose) verbose='true';;
    --url*) clone='true'; arg="${1:5}"; url="${arg//=}";;
    --wrk*) clone='true'; arg="${1:5}"; wrkDir="${arg//=}";;
    --sku*) clone='true'; arg="${1:5}"; skuSpec="${arg//=}";;
    -*)     io_error "unknown option ${VC}$1${Red}\n"; io_help $0; return 1;;
    *)      wrkDir="$1";;
  esac; shift; done

  # io_trace "vlast_parse -- $(print_vars verbose url wrkDir sku clone)"
  return 0
}
vlast_run()
{
  local clone url wrkDir skuSpec noSkuFilter='true' \
        verbose synchronized quiet

  vlast_parse "$@" || return $?
  [[ -z "$verbose" ]] && . zoul-quiet

  [[ $clone == 'true' ]] && vlast_sync "$url" "$wrkDir"

  module_run prod_scope vlast_command
}

vlast_command()
{
  local sku
  branch_set_bestmatch_sku "$skuSpec"
  vlast_checkout "$sku" "$skuMode"
  echo $prodVTag
}

# out:
#   synchronized
vlast_sync()
{
  local url="$1" wrkDir="$2"
  # io_trace "vlast_sync -1- $(print_vars url wrkDir sku)"
  [[ -z "$url" && -z "$wrkDir" ]] && return 0
  if [[ -n "$url" ]]; then
    if [[ -z "$wrkDir" ]]; then
      wrkDir=${url##*/}
      wrkDir=${wrkDir%.git};
    fi
  fi
  # io_trace "vlast_sync -2- $(print_vars noSkuFilter wrkDir url)"
  if [ -d "$wrkDir" ]; then
    if [ -d "$wrkDir/.git" ]; then
      cd "$wrkDir"
      if [[ -n "$url" ]]; then
        local currentUrl=$(git_url_from_path)
        if [[ "$url" != "$currentUrl" ]]; then
          printf "%b\n" "${Red}error : the specified URL ${VC}$url${Red} is wrong."
          printf "%b\n" "${Brown}  The correct one is ${VC}$currentUrl${Brown}."
          printf "%b\n" "${Brown}  Ther is no need to specify an URL when the given directory exists."
          exit 1
        fi
      fi
      branch_fetch_all_quiet
      synchronized='true'
    else
      printf "%b\n" "${Red}error : the path ${VC}$wrkDir${Red} should point to a git working directory (containing a '.git' folder)"
      exit 1
    fi
  elif [[ -z "$url" ]]; then
    printf "%b\n" "${Red}error : the path ${VC}$wrkDir${Red} does not exist and the ${VC}URL${Red} is missing."
    exit 1
  else
    git_clone "$PWD" "$url" "$wrkDir"
    cd "$wrkDir" &>/dev/null || exit 1
  fi
}
vlast_checkout()
{
  local sku="$1"
  [[ $synchronized == 'true' && -z "$sku" ]] && return 0
  # io_trace "vlast_checkout -1- $(print_vars synchronized sku)"
  sku_checkout "$sku"
}

vlast_run "$@"