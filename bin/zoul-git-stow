#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_STOW ]] && . zoul-git-stow
ZOUL_GIT_STOW=true

[[ -z $ZOUL_GIT_STOW_CORE ]]   && . zoul-git-stow-core
[[ -z $ZOUL_GIT_TAG ]]         && . zoul-git-tag
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core

# global settings
#   stowArchiveDelay -- refs with timespan bigger than stowArchiveDelay will be archived

# in:
#  branches=$@      -- branch list
# out:
#  stowArchiveDelay -- archive delay in days (default to 10 years)
stow_set_archive_delay()
{
  # archive delay = max(3650, youngest prod branch timespan)
  local branch rbranch dtProd=0xFFFF
  stowArchiveDelay=3650

  for branch; do
    # keep only semver branches
    [[ $branch =~ ^(.*/)?[0-9]+\.[0-9]+$ ]] || continue
    rbranch=$(branch_realize "$branch")
    [ $? -gt 1 ] && continue
    dt=$(ref_timespan "$rbranch") || continue
    (( dt = dt / 86400 )) # time in days
    (( dt < dtProd )) && dtProd=$dt
  done
  (( dtProd > stowArchiveDelay )) && stowArchiveDelay=$(( dtProd + 7 ))
}
# in:
#  branches=$@ -- branch list
# return code:
#  1 if any branch delete fails
stow_remove_classified_branches()
{
  local refPath stowFolder stowType branch branch1 branch2 rbranch ec=0

  # group by namespace
  declare -A archiveMap
  declare -A otherMap
  declare -A activeMap
  declare -A rbranchMap
  for branch; do
    stow_set_info "$branch" # -> refPath stowFolder stowType
    case ${stowType%.*} in
    archive) archiveMap[$refPath]=$branch;;
    other)   otherMap[$refPath]=$branch;;
    active)  activeMap[$refPath]=$branch;;
    esac
    rbranchMap[$branch]=$(branch_realize "$branch")
  done
  # delete archive branchs in other and active namespaces
  for refPath in ${!archiveMap[@]}; do
    branch1=${archiveMap[$refPath]}
    branch2=${otherMap[$refPath]}
    if [[ -n $branch2 ]] && ref_equals ${rbranchMap[$branch1]} ${rbranchMap[$branch2]}; then
      branch_delete $branch2 || ec=$?
      unset otherMap[$refPath]
    fi
    branch2=${activeMap[$refPath]}
    if [[ -n $branch2 ]] && ref_equals ${rbranchMap[$branch1]} ${rbranchMap[$branch2]}; then
      branch_delete $branch2 || ec=$?
      unset activeMap[$refPath]
    fi
  done
  # delete other branchs in active namespace
  for refPath in ${!otherMap[@]}; do
    branch1=${otherMap[$refPath]}
    branch2=${activeMap[$refPath]}
    if [[ -n $branch2 ]] && ref_equals ${rbranchMap[$branch1]} ${rbranchMap[$branch2]}; then
      branch_delete $branch2 || ec=$?
      unset activeMap[$refPath]
    fi
  done
}
# in:
#  branches=$@ -- branch list
# return code:
#  1 if any branch delete fails
stow_remove_promoted_vbranches()
{
  local stowType stowFolder refPath refType refStowType stowPath \
        version branch branches vbranch rbranch vbranches hash folder ec=0

  declare -A hashMap
  for branch; do
    [[ $branch =~ ^(.*/)?([0-9]+\.[0-9]+) ]] || continue
    version=${BASH_REMATCH[2]}
    rbranch=$(branch_realize $branch)
    hash=$(git rev-parse "$rbranch^{} 2>/dev/null")
    hashMap[$hash]="${hashMap[$hash]} "$branch""
  done

  # detect vbranches with same version pointing at same commit
  for hash in ${!hashMap[@]}; do
    branches=( ${hashMap[$hash]} )
    if [ ${#branches[@]} -gt 1 ]; then
      # group branches by version
      unset vbranchMap
      declare -A vbranchMap
      for branch in ${branches[@]}; do
        if [[ $branch =~ ^(.*/)?([0-9]+\.[0-9]+) ]]; then
          version=${BASH_REMATCH[2]}
          vbranchMap[$version]="${vbranchMap[$version]} "$branch""
        fi
      done
      for version in ${!vbranchMap[@]}; do
        vbranches=( ${vbranchMap[$version]} )
        if [ ${#vbranches[@]} -gt 1 ]; then
          # mio_info "Branches (${VC}$(string_join ', ' ${vbranches[@]})${Cyan}) are pointing at the same commit (${VC}${hash:0:7}${Cyan})"
          # group vbranches branches by folder
          unset fbranchMap
          declare -A fbranchMap
          for vbranch in ${vbranches[@]}; do
            stow_set_info "$vbranch"
            [[ $refPath =~ ^(.*/)? ]] && folder=${BASH_REMATCH[1]:-/}
            fbranchMap[$folder]="${fbranchMap[$folder]} "$vbranch""
          done
          # io_trace "branch_delete 1 -- $(declare -p fbranchMap)"
          for folder in ${!fbranchMap[@]}; do
            [[ $folder =~ ^sku/ ]] && unset fbranchMap[$folder]
          done
          # io_trace "branch_delete 2 -- $(declare -p fbranchMap)"
          for folder in ${!fbranchMap[@]}; do
            vbranches=( ${fbranchMap[$folder]} )
            for vbranch in ${vbranches[@]}; do
              branch_delete "$vbranch"
            done
          done
        fi
      done
    fi
  done
  return $ec
}
# in:
#  branches=$@      -- branch list
#  stowArchiveDelay -- archive delay
# return code:
#  1 if any branch move fails
stow_classify_branches()
{
  local stowType stowFolder refPath refType refStowType stowPath branch ec=0

  for branch; do
    stow_set_info "$branch"         # -> stowType stowFolder refPath
    stow_set_branch_info            # -> refType refStowType refPath
    stow_set_folder "$refStowType"  # -> stowPath
    # io_trace "stow_classify_branches -- $(print_vars branch stowFolder refPath stowType refStowType refType stowPath)"
    branch_move "$branch" "$stowPath" || ec=1
  done
  return $ec
}

stow_remove_classified_tags()
{
  local refPath stowFolder stowType tag tag1 tag2 tagsToDelete=() ec=0

  # group by namespace
  declare -A archiveMap
  declare -A otherMap
  declare -A twinMap
  declare -A activeMap
  for tag; do
    stow_set_info "$tag" # -> refPath stowFolder stowType
    case ${stowType%.*} in
    archive) archiveMap[$refPath]=$tag;;
    other)   otherMap[$refPath]=$tag;;
    twin)    twinMap[$refPath]=$tag;;
    active)  activeMap[$refPath]=$tag;;
    esac
  done
  # delete archive tags in other twin and active namespaces
  for refPath in ${!archiveMap[@]}; do
    tag1=${archiveMap[$refPath]}
    tag2=${otherMap[$refPath]}
    if [[ -n $tag2 ]] && ref_equals $tag1 $tag2; then
      tagsToDelete+=($tag2)
      unset otherMap[$refPath]
    fi
    tag2=${twinMap[$refPath]}
    if [[ -n $tag2 ]] && ref_equals $tag1 $tag2; then
      tagsToDelete+=($tag2)
      unset twinMap[$refPath]
    fi
    tag2=${activeMap[$refPath]}
    if [[ -n $tag2 ]] && ref_equals $tag1 $tag2; then
      tagsToDelete+=($tag2)
      unset activeMap[$refPath]
    fi
  done
  # delete other tags in twin and active namespace
  for refPath in ${!otherMap[@]}; do
    tag1=${otherMap[$refPath]}
    tag2=${twinMap[$refPath]}
    if [[ -n $tag2 ]] && ref_equals $tag1 $tag2; then
      tagsToDelete+=($tag2)
      unset twinMap[$refPath]
    fi
    tag2=${activeMap[$refPath]}
    if [[ -n $tag2 ]] && ref_equals $tag1 $tag2; then
      tagsToDelete+=($tag2)
      unset activeMap[$refPath]
    fi
  done
  # delete active tags in twin namespace
  for refPath in ${!activeMap[@]}; do
    tag1=${activeMap[$refPath]}
    tag2=${twinMap[$refPath]}
    if [[ -n $tag2 ]] && ref_equals $tag1 $tag2; then
      tagsToDelete+=($tag2)
      unset twinMap[$refPath]
    fi
  done
  tag_delete_tags "${tagsToDelete[@]}" || ec=$?
}
# in:
#  tags=$@ -- tag list
# return code:
#  1 if any tag delete fails
stow_remove_promoted_vtags()
{
  local stowType stowFolder refPath refType refStowType stowPath \
        version tag tags vtag vtags hash folder tagsToDelete=() ec=0 IFS=' '

  declare -A hashMap
  for tag; do
    [[ $tag =~ ^(.*/)?v([0-9]+\.[0-9]+(\.[0-9]+|-@)) ]] || continue
    version=${BASH_REMATCH[2]}
    hash=$(git rev-parse "$tag^{} 2>/dev/null")
    hashMap[$hash]="${hashMap[$hash]} "$tag""
  done

  # detect vtags with same version pointing at same commit
  for hash in ${!hashMap[@]}; do
    tags=( ${hashMap[$hash]} )
    if [ ${#tags[@]} -gt 1 ]; then
      # group tags by version
      # io_trace "stow_remove_promoted_vtags 1 -- $(print_vars tags[@])"
      unset vtagMap
      declare -A vtagMap
      for tag in ${tags[@]}; do
        if [[ $tag =~ ^(.*/)?v([0-9]+\.[0-9]+(\.[0-9]+|-@)) ]]; then
          version=${BASH_REMATCH[2]}
          vtagMap[$version]="${vtagMap[$version]} "$tag""
        fi
      done
      # io_trace "stow_remove_promoted_vtags 2 -- $(declare -p vtagMap)"
      for version in ${!vtagMap[@]}; do
        vtags=( ${vtagMap[$version]} )
        if [ ${#vtags[@]} -gt 1 ]; then
          # mio_info "Tags (${VC}$(string_join ', ' ${vtags[@]})${Cyan}) are pointing at the same commit (${VC}${hash:0:7}${Cyan})"
          # group vtags tags by folder
          unset ftagMap
          declare -A ftagMap
          for vtag in ${vtags[@]}; do
            stow_set_info "$vtag"
            [[ $refPath =~ ^(.*/)? ]] && folder=${BASH_REMATCH[1]:-/}
            ftagMap[$folder]="${ftagMap[$folder]} "$vtag""
          done
          # io_trace "tag_delete 1 -- $(declare -p ftagMap)"
          for folder in ${!ftagMap[@]}; do
            [[ $folder =~ ^sku/ ]] && unset ftagMap[$folder]
          done
          # io_trace "tag_delete 2 -- $(declare -p ftagMap)"
          for folder in ${!ftagMap[@]}; do
            vtags=( ${ftagMap[$folder]} )
            for vtag in ${vtags[@]}; do
              tagsToDelete+=($vtag)
            done
          done
        fi
      done
    fi
  done
  tag_delete_tags "${tagsToDelete[@]}" || ec=$?
  return $ec
}
# in:
#  tags=$@ -- tag list
# return code:
#  1 if any tag move fails
stow_classify_tags()
{
  local stowType stowFolder refPath refType refStowType stowPath tag ec=0

  for tag; do
    stow_set_info "$tag"            # -> stowType stowFolder refPath
    stow_set_tag_info               # -> refType refStowType refPath
    stow_set_folder "$refStowType"  # -> stowPath
    # io_trace "stow_classify_tags -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    tag_move "$tag" "$stowPath" || ec=1
  done
  return $ec
}
stow_promote_vtags()
{
  local branches=(${!1}) stowType stowFolder refPath refType refStowType \
        version vtag vtag2 vtagFolder \
        vbranch vbranchFolder vbranchFolders \
        vbranchPair vbranchPairs ec=0 IFS=' '
  shift

  # group vbranchFolder:vbranch pair by version
  declare -A vbranchMap
  declare -A rvbranchMap
  for vbranch in "${branches[@]}"; do
    if [[ $vbranch =~ ^(.*/)?([0-9]+\.[0-9]+) ]]; then
      vbranchFolder=${BASH_REMATCH[1]:-/}
      version=${BASH_REMATCH[2]}
      rvbranchMap[$vbranch]=$(branch_realize "$vbranch")
      vbranchMap[$version]="${vbranchMap[$version]} "$vbranchFolder:$vbranch""
      # io_trace "stow_promote_vtags 1 -- vbranchMap[$version]=${vbranchMap[$version]}"
    fi
  done
  # group vtags by version and by hash
  declare -A vtagMap
  for vtag; do
    if [[ $vtag =~ ^(.*/)?(v?([0-9]+\.[0-9]+).*)$ ]]; then
      version=${BASH_REMATCH[3]}
      vtagMap[$version]="${vtagMap[$version]} "$vtag""
    fi
  done
  for version in "${!vtagMap[@]}"; do
    # # FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY FOR TEST ONLY
    # [[ $version =~ 11\.8 ]] || continue

    vbranchPairs=( ${vbranchMap[$version]} )
    [ ${#vbranchPairs[@]} -eq 0 ] && continue
    # io_trace "stow_promote_vtags 2 -- $(print_vars version vbranchPairs[@])"
    for vtag in ${vtagMap[$version]}; do
      stow_set_info "$vtag"
      stow_set_tag_info

      # skip already stowed vtag (having a vbranch with same folder)
      _stow_check_stowed && continue

      # remove non descendant vbranches
      local vbranchTagPairs=()
      for vbranchPair in ${vbranchPairs[@]}; do
        vbranch=${vbranchPair#*:}
        # skip vbranch with suffix (ex: 1.9-og)
        # [[ $vbranch =~ ^(.*/)?[0-9]+\.[0-9]+$ ]] || continue
        # io_trace "stow_promote_vtags 3 -- $(print_vars vtag vbranch vbranchPair)"
        _stow_check_ancestry && vbranchTagPairs+=("$vbranchPair") || ec=1
      done
      # if [ ${#vbranchTagPairs[@]} -eq 0 ]; then
      #   for vbranchPair in ${vbranchPairs[@]}; do
      #     vbranch=${vbranchPair#*:}
      #     # keep only branch with suffix
      #     [[ $vbranch =~ ^(.*/)?[0-9]+\.[0-9]+$ ]] && continue
      #     io_trace "stow_promote_vtags 3 -- $(print_vars vtag vbranch vbranchPair)"
      #     _stow_check_ancestry && vbranchTagPairs+=("$vbranchPair") || ec=1
      #   done
      # fi

      if [ ${#vbranchTagPairs[@]} -eq 0 ]; then
        # display warnings
        for vbranchPair in ${vbranchPairs[@]}; do
          vbranch=${vbranchPair#*:}
          _stow_show_ancestry_warnings
        done
        continue
      fi

      # io_trace "stow_promote_vtags 4 -- $(print_vars vtag vbranchTagPairs[@])"

      [[ $vtag =~ ^(.*/)?(.*)$ ]] # split to folder / name
      vtagFolder=${BASH_REMATCH[1]:-/}
      vtagName=${BASH_REMATCH[2]}

      vbranchFolders=( ${vbranchTagPairs[@]%:*} )
      # io_trace "stow_promote_vtags 5 -- $(print_vars vtagFolder vtagName vbranchFolders[@])"
      # only one branch for this vtag
      if [ ${#vbranchFolders[@]} -eq 1 ]; then
        vbranchFolder=${vbranchFolders[0]}
        if [[ $vbranchFolder != $vtagFolder ]]; then
          vtag2="${vbranchFolder#/}$vtagName"
          # io_trace "stow_promote_vtags 6 -- $(print_vars vtag vtagFolder vbranchFolder vtag2)"
          stow_set_info "$vtag2"          # -> stowType stowFolder refPath
          stow_set_tag_info "$vtag"       # -> refType refStowType refPath
          stow_set_folder "$refStowType"  # -> stowPath
          # io_trace "tag_move -- $(print_vars vtag stowPath)"
          tag_move "$vtag" "$stowPath" || ec=1
        fi
      # more than one branch for this vtag
      # already stowed if any vbranch folder equals vtag folder
      elif ! array_contains_element "$vtagFolder" "${vbranchFolders[@]}"; then
        unset vbranchFolder
        local deltaMin=0xFFFF
        for vbranchPair in "${vbranchTagPairs[@]}"; do
          vbranch=${rvbranchMap[${vbranchPair#*:}]}
          delta=$(( $(git rev-list --count "$vtag".."$vbranch" 2>/dev/null) ))
          (( delta == deltaMin )) && break
          if (( delta < deltaMin )); then
            deltaMin=$delta
            vbranchFolder=${vbranchPair%:*}
            # io_trace "stow_promote_vtags 4 -- tag_resolve $(print_vars vtag vbranch deltaMin vbranchFolder)"
          fi
        done
        if [[ -n $vbranchFolder ]]; then
          vtag2="${vbranchFolder#/}$vtagName"
          # io_trace "stow_promote_vtags 5 -- $(print_vars vtag vtagFolder vbranchFolder vtag2)"
          stow_set_info "$vtag2"          # -> stowType stowFolder refPath
          stow_set_tag_info "$vtag"       # -> refType refStowType refPath
          stow_set_folder "$refStowType"  # -> stowPath
          tag_move "$vtag" "$stowPath" || ec=1
        fi
      fi
    done
  done
  return $ec
}
_stow_check_stowed()
{
  local vbranchFolder vtagFolder
  for vbranchPair in ${vbranchPairs[@]}; do
    vbranchFolder=${vbranchPair%:*}
    [[ $refPath =~ ^(.*/)? ]] && vtagFolder=${BASH_REMATCH[1]}
    # io_trace "_stow_check_stowed -- $(print_vars vtag vtagFolder vbranchFolder)"
    [[ $vtagFolder == ${vbranchFolder#/} ]] && return 0
  done
  return 1
}
# in-scope:
#   vtag        -- current vtag
#   vbranch     -- current vbranch
#   rvbranchMap -- realized vbranch map ([vbranch]=rvbranch)
_stow_check_ancestry()
{
  git merge-base --is-ancestor "$vtag" "${rvbranchMap[$vbranch]}" &>/dev/null
}
_stow_show_ancestry_warnings()
{
  # vtag is not an ancestor of vbranch
  if git merge-base --is-ancestor "${rvbranchMap[$vbranch]}" "$vtag" &>/dev/null; then
    if _stow_promoted_versions_equals; then
      mio_info "Branch ${VC}$vbranch${Cyan} could be fast forwarded to tag ${VC}$vtag${Cyan}"
    # else
    #   mio_info "Tag ${VC}$vtag${Cyan} is not on vbranch ${VC}$vbranch${Cyan}"
    fi
  else
    mio_info "Tag ${VC}$vtag${Cyan} is not on vbranch ${VC}$vbranch${Cyan}"
    # mio_info "Tag ${VC}$vtag${Cyan} is not on any vbranch"
  fi
}
# in-scope:
#   vtag        -- current vtag
#   vbranch     -- current vbranch
#   stowType stowFolder refPath refType refStowType -- vtag info
_stow_promoted_versions_equals()
{
  local ptagVer pbranchVer
  # parse vtag ref path
  [[ $refPath =~ ^(.*/)?v([0-9]+\.[0-9]+) ]]
  ptagVer=${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  # get branch refPath ()
  local stowType stowFolder refPath
  stow_set_info "$vbranch"
  # parse vbranch ref path
  [[ $refPath =~ ^(.*/)?([0-9]+\.[0-9]+) ]]
  pbranchVer=${BASH_REMATCH[1]}${BASH_REMATCH[2]}
  [[ $ptagVer == $pbranchVer ]] && return 0
  # io_trace "_stow_promoted_versions_equals -- $(print_vars vtag vbranch ptagVer pbranchVer)"
  # return 1
}
stow_orphans()
{
  local branches=(${!1}) vbranch version vtag vbranches IFS=' '
  shift

  # group vbranch by version
  declare -A vbranchMap
  for vbranch in "${branches[@]}"; do
    if [[ $vbranch =~ ^(.*/)?([0-9]+\.[0-9]+) ]]; then
      version=${BASH_REMATCH[2]}
      vbranchMap[$version]="${vbranchMap[$version]} "$vbranch""
      # io_trace "stow_orphans 1 -- vbranchMap[$version]=${vbranchMap[$version]}"
    fi
  done
  # group vtags by version
  declare -A vtagMap
  for vtag; do
    if [[ $vtag =~ ^(.*/)?(v?([0-9]+\.[0-9]+).*)$ ]]; then
      version=${BASH_REMATCH[3]}
      vtagMap[$version]="${vtagMap[$version]} "$vtag""
    fi
  done
  for version in "${!vtagMap[@]}"; do
    vbranches=( ${vbranchMap[$version]} )
    if [ ${#vbranches[@]} -eq 0 ]; then
      _stow_orphan_tags ${vtagMap[$version]}
    else
      _stow_adopt_tags ${vtagMap[$version]}
    fi
  done
}
_stow_orphan_tags()
{
  local refPath stowFolder stowType refType refStowType stowPath tag ec=0

  for tag; do
    stow_set_info "$tag"                          # -> refPath stowFolder stowType
    stow_is_orphan && continue
    stow_set_tag_info                             # -> refPath refType refStowType
    # io_trace "_stow_orphan_tags 1 -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    refStowType=${refStowType/active./other.}
    refStowType=${refStowType/.*/.orphan}
    stow_set_folder "$refStowType"                # -> stowPath
    # io_trace "_stow_orphan_tags 2 -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    tag_move "$tag" "$stowPath" || ec=1
  done
  return $ec
}
_stow_adopt_tags()
{
  local refPath stowFolder stowType refType refStowType stowPath tag ec=0

  for tag; do
    stow_set_info "$tag"                          # -> refPath stowFolder stowType
    ! stow_is_orphan && continue
    stow_set_tag_info                             # -> refPath refType refStowType
    # io_trace "_stow_adopt_tags 1 -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    refStowType=${refStowType/other./active.}
    refStowType=${refStowType/.orphan/.root}
    stow_set_folder "$refStowType"                # -> stowPath
    # io_trace "_stow_adopt_tags 2 -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    tag_move "$tag" "$stowPath" || ec=1
  done
  return $ec
}
stow_archive_tags()
{
  local refPath stowFolder stowType refType refStowType stowPath tag ec=0

  for tag; do
    stow_set_info "$tag"                          # -> refPath stowFolder stowType
    stow_set_tag_info                             # -> refPath refType refStowType
    # io_trace "stow_archive_tags -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    refStowType=${refStowType/*./archive.}
    stow_set_folder "$refStowType"                # -> stowPath
    # io_trace "stow_archive_tags -- $(print_vars tag stowFolder refPath stowType refStowType refType stowPath)"
    tag_move "$tag" "$stowPath" || ec=1
  done
  return $ec
}
