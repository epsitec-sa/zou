#!/bin/bash


[[ -z $ZOUL_GIT_CONFIG_SKU ]]  && . zoul-git-config-sku
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

forOpts=()
cmdOpts=()
while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help) zou-help $0; exit 0;;
  -0|--level0)        level0=true;;
  -s|--sm-only)       smOnly=true;;
  -q|--quiet)         cmdOpts+=($1); quiet=true;;
  -e|--stop-on-error) cmdOpts+=($1); stopOnError=true;;
  -c|--clean)         cmdOpts+=($1); cleanLocalBranches=true;;
  -a|--all)           cmdOpts+=($1); all=true;;
  --_startup-dir)     cmdOpts+=($1 $2); startupDir=$(echo $2 | xargs echo); shift;;  # remove single quotes
  -*) echo "unknown option: $1" >&2; exit 1;;
esac; shift; done

process_error()
{
  local ec=$1
  [[ $ec -ne 0 && $stopOnError == true ]] && exit $ec || return 0
}
clean_local_branches()
{
  if [[ $cleanLocalBranches == true ]]; then
    for b in $(branch_list_local_can_delete); do
      local info=$(git branch -d "$b" 2>/dev/null)
      [[ -n $info ]] && io_warning "$info" "[$(repo_module_id)]"
    done
  fi
}
sync_submodules()
{
  local branch configFile include path mroot=$PWD
  branch=$(branch_current) || return $?
  configFile=$(repo_zouflow_path "$mroot") || return $?
  [[ $all == true ]] && include=( $(repo_list_submodule_paths) ) || include=( $(config_sku_list_included "$branch" "$configFile") )
  for path in $(array_sort include[@]); do
    cd "$mroot/$path"
    git sync ${cmdOpts[@]} || return $?
  done
}
sync_node()
{
  [[ $quiet == true ]] || echo Entering "'$(path_make_relative '.' "$startupDir")'"
  branch_sync_all && clean_local_branches || return $?
}
sync_tree()
{
  sync_node || process_error $?
  sync_submodules || process_error $?
}

if [[ $level0 == true && $smOnly == true ]]; then
  io_error "options '--level0' and '--sm-only' are incompatible."
  exit 1
elif [[ -z $startupDir ]]; then
(
  startupDir=$PWD
  cmdOpts+=(--_startup-dir "'$startupDir'") # single quote startup dir option value to avoid shell path expansion on Windows
  cd "$(repo_module_root)"
  if [[ $level0 == true ]]; then
    sync_node || process_error $?
  elif [[ $smOnly == true ]]; then
    sync_submodules || process_error $?
  else
    sync_tree
  fi
)
else
  sync_tree
fi
