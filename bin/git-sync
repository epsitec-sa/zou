#!/bin/bash


[[ -z $ZOUL_GIT_CONFIG_SKU ]]  && . zoul-git-config-sku
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

jobsCount=16
while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help) zou-help $0; exit 0;;
  -0|--level0)        level0=true;;
  -s|--sm-only)       smOnly=true;;
  -q|--quiet)         quiet=true;;
  -e|--stop-on-error) stopOnError=true;;
  -c|--clean)         cleanLocalBranches=true;;
  -a|--all)           all=true;;
  -j*)                jobsCount=${1#-j};;
  --dev)              hint='dev';;
  --prod)             hint='0.0';;
  -*) echo "unknown option: $1" >&2; exit 1;;
esac; shift; done

# global_variable_names='level0 smOnly quiet stopOnError cleanLocalBranches all hint startupDir'

process_error()
{
  local ec=$1
  [[ $ec -ne 0 && $stopOnError == true ]] && exit $ec || return 0
}
clean_local_branches()
{
  if [[ $cleanLocalBranches == true ]]; then
    for b in $(branch_list_local_can_delete); do
      local info=$(git branch -d "$b" 2>/dev/null)
      [[ -n $info ]] && io_warning "$info" "[$(repo_module_id)]"
    done
  fi
}
sync_submodules()
{
  local branch configFile include path mroot=$PWD
  branch=$(branch_current)
  configFile=$(repo_zouflow_path "$mroot") || return $?
  [[ $all == true ]] && include=( $(repo_list_submodule_paths) ) || include=( $(config_sku_list_included "$branch" "$configFile") )
  for path in $(array_sort include[@]); do
    (
      cd "$mroot/$path" || {
        io_error "cd $mroot+$path" "[$moduleId]"
        return 1
      }
      sync_tree || return $?
    ) &
    if (( $(wc -w <<<$(jobs -p)) % $jobsCount == 0 )); then wait; fi
  done
  wait
}
sync_node()
{
  [[ $quiet == true ]] || echo Entering "'$(path_make_relative '.' "$startupDir")'"
  local path moduleId=$(repo_module_id)
  # trace_method 'sync_node' moduleId "$global_variable_names"

  # synchronize all branches
  branch_sync_all "$hint" && clean_local_branches || return $?
  
  # discard clean submodules
  for path in $(string_sort $(repo_list_unstaged_clean_submodules)); do
    (
      git submodule update --recursive "$path" &>/dev/null
      io_warning "Discarded submodule '$path'" "[$moduleId]"
    ) &
    if (( $(wc -w <<<$(jobs -p)) % $jobsCount == 0 )); then wait; fi
  done
  wait
}
sync_tree()
{
  sync_node || process_error $?
  sync_submodules || process_error $?
}

if [[ $level0 == true && $smOnly == true ]]; then
  io_error "options '--level0' and '--sm-only' are incompatible."
  exit 1
else
  startupDir=$PWD
  cd "$(repo_module_root)"
  if [[ $level0 == true ]]; then
    sync_node || process_error $?
  elif [[ $smOnly == true ]]; then
    sync_submodules || process_error $?
  else
    sync_tree
  fi
fi
