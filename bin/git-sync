#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]      && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]      && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]        && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

sync_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -q|--quiet)         quiet=true;;
    -a|--all)           noSkuFilter=true;;
    .)                  unset recursive;;
    -c|--clean)         cleanLocalBranches=true;;
    -p|--pull)          syncNoPush=true;;
    -j*)                jobsCount=${1#-j};;
    -*) io_error "unknown option '$1'"; return 1;;
  esac; shift; done
}
sync_run()
{
  # parse command line
  local jobsCount quiet noSkuFilter cleanLocalBranches syncNoPush recursive=true
  sync_parse "$@" || return $?
  
  local showSubmoduleMessage=true \
        syncSelectExcludeIds=()
        syncScopes=( config_scope cosm_scope )

  [[ -z $quiet ]] && io_message "Synchronizing, please wait...\n"

  module_run "${syncScopes[@]}" sync_tree
}
sync_tree()
{
  sync_prolog
  [[ $recursive == true ]] && sync_submodules
  cosm_process_unstaged_submodules
}
sync_prolog()
{
  branch_sync_all
  sync_ensure_attached
  sync_clean_local_branches
}
sync_ensure_attached()
{
  ! array_contains_element "$moduleId" "${syncSelectExcludeIds[@]}" && branch_ensure_attached
  syncSelectExcludeIds+=( "${configSelectExcludeIds[@]}" )
}
sync_clean_local_branches()
{
  [[ $cleanLocalBranches == true ]] || return 0
  local branch
  for branch in $(branch_list_local_can_delete); do
    local info=$(git branch -D "$branch" 2>/dev/null)
    [[ -n $info ]] && io_warning "$info" "$moduleTracePrefix"
  done
}
sync_submodules()
{
  module_visit_submodules_async 'configSkuInclude[@]' "${syncScopes[@]}" 'sync_tree'
}

sync_run "$@"
