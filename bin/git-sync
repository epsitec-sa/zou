#!/usr/bin/env bash

[[ -z $ZOUL_GIT_CMD ]]         && . zoul-git-cmd
[[ -z $ZOUL_GIT_COSM ]]        && . zoul-git-cosm
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

sync_parse()
{
  local args=()
  while [[ "$#" -gt 0 ]]; do case "$1" in
    -h|--help) zou-help "$0"; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -g|--global)    visitBundles=true;;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -c|--clean)     clean=true;;
    -p|--pull)      syncNoPush=true;;
    --)             shift; break;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_args "${args[@]}"
  
  syncModulePaths=( "$@" )
  # io_trace "sync_parse -- $(print_vars recursive syncNoPush syncModulePaths[@])"
}
sync_run()
{
  # parse command line
  local jobsCount visitBundles recursive command='sync' subcommand='do' \
        cmdScopes=( config_scope cosm_scope ) syncModulePaths=() \
        clean syncNoPush

  sync_parse "$@" || return $?
  startupMessage="Synchronizing, please wait..."

  if [[ $visitBundles == 'true' ]]; then
    bundle_visit_all sync_command
  else
    bundle_scope sync_command
  fi
}
sync_command()
{
  # io_trace "sync_command -- $(print_vars syncModulePaths[@])"

  [ ${#syncModulePaths[@]} -eq 0 ] && syncModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${syncModulePaths[@]}"

  cmd_visit_modules
}

sync_do_finally()  { branch_show_status; }
sync_do_xfinally() { branch_show_status; }

sync_do_scope()
{
  # io_trace "sync_do_scope ${*@Q}"
  local branchSyncVisitInfo=()
  # execute next russian doll
  $1 "${@:2}"
}
sync_do_prolog()
{
  # io_trace ">>> sync_do_prolog ${*@Q} -1- PWD=$PWD"
  branch_sync_all "$clean"
  # io_trace "### sync_do_prolog -2- $(print_vars branchSyncVisitInfo[@]) PWD=$PWD"
  _sync_clean
  # io_trace "<<< sync_do_prolog -3- $(print_vars branchSyncVisitInfo[@]) PWD=$PWD"
}
sync_do_epilog()
{
  # io_trace ">>> sync_do_epilog ${*@Q} -- $(print_vars branchSyncVisitInfo[@]) PWD=$PWD"
  cosm_discard_unstaged_clean_external_submodules
  _sync_commit "${branchSyncVisitInfo[@]}"
  # io_trace "<<< sync_do_epilog ${*@Q} -- $(print_vars branchSyncVisitInfo[@]) PWD=$PWD"
}
sync_do_xprolog()
{
  syncNoPush=true
  sync_do_prolog
}
sync_do_xepilog()
{
  # io_trace ">>> sync_do_xepilog ${*@Q}"
  cosm_discard_unstaged_clean_external_submodules
}

_sync_commit()
{
  local r=$1 l=$2 i=$3 ec=0
  # io_trace ">>> _sync_commit ${*@Q} -- $(print_vars r l i) PWD=$PWD"
  if [[ $i == '' || $i =~ (\=|\>)$ ]]; then
    [ $ec -eq 0 ] || gitx push --follow-tags ${r%%/*} $l &>>"$stdallRedir"
  fi
}
_sync_clean()
{
  [[ $clean == 'true' ]] || return 0 
  repo_remove_dangling_submodules_async
  branch_clean_local
  return 0
}

sync_run "$@"
