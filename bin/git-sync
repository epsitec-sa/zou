#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]      && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]      && . zoul-git-config
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

branchMergedEvent+=( sync_on_merged )

sync_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -q|--quiet)         quiet=true;;
    -e|--stop-on-error) stopOnError=true;;
    -a|--all)           noSkuFilter=true;;
    -0|--root-only)     moduleRootOnly=true;;
    -s|--sm-only)       smOnly=true;;
    -c|--clean)         cleanLocalBranches=true;;
    -n|--no-push)       syncNoPush=true;;
    -j*)                jobsCount=${1#-j};;
    --dev)              attachHint='dev';;
    --prod)             attachHint='prod';;
    -*) io_error "unknown option '$1'"; return 1;;
  esac; shift; done

  if [[ $moduleRootOnly == true && $smOnly == true ]]; then
    io_error "options '--root-only' and '--sm-only' are incompatible."
    return 1
  fi
}
sync_run()
{
  # parse command line
  local jobsCount quiet stopOnError noSkuFilter moduleRootOnly smOnly cleanLocalBranches attachHint syncNoPush
  sync_parse "$@" || return $?
  
  local useLongModuleTracePrefix=true \
        showSubmoduleMessage=true \
        syncScopes=( config_scope )

  module_run "${syncScopes[@]}" sync_main
}
sync_main()
{
  local ec=0
  if [[ $moduleRootOnly == true ]]; then
    sync_node || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  elif [[ $smOnly == true ]]; then
    sync_submodules || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  else
    sync_tree || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  fi
  return $ec
}
sync_tree()
{
  sync_node || ec=$?
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
  sync_submodules || ec=$?
  [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
}
sync_node()
{
  local syncMergedCount=0
  branch_sync_all && sync_select && sync_clean_local_branches
}
sync_on_merged() (( syncMergedCount += 1 ))
sync_select()
{
  [ $syncMergedCount -eq 0 ] && return 0
  if [[ "$moduleRoot" == "$bundleRoot" || $attachHint == 'dev' ]]; then
    branch_select "$bundleRoot" "dev" true >/dev/null
  else
    branch_select_vtag $(branch_best_match "$bundleRoot") 'dev' true >/dev/null
  fi
}
sync_clean_local_branches()
{
  if [[ $cleanLocalBranches == true ]]; then
    local branch
    for branch in $(branch_list_local_can_delete); do
      local info=$(git branch -D "$branch" 2>/dev/null)
      [[ -n $info ]] && io_warning "$info" "$moduleTracePrefix"
    done
  fi
}
sync_submodules()
{
  module_visit_submodules_async 'configSkuInclude[@]' "${syncScopes[@]}" 'sync_tree'
}

sync_run "$@"
