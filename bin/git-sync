#!/bin/bash

[[ -z $ZOUL_GIT_CMD ]]         && . zoul-git-cmd
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

sync_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -c|--clean)     cleanLocalBranches=true;;
    -p|--pull)      syncNoPush=true;;
    --)             shift; break;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_args "${args[@]}"
  
  syncModulePaths=( "$@" )
  # io_trace "sync_parse -- $(print_vars noSkuFilter cleanLocalBranches syncNoPush syncModulePaths[@])"
}
sync_run()
{
  # parse command line
  local jobsCount recursive command='sync' subcommand='do' \
        cmdScopes=( config_scope ) syncModulePaths=() \
        noSkuFilter noSelectFilter=true cleanLocalBranches syncNoPush

  sync_parse "$@" || return $?
  
  startupMessage="Synchronizing, please wait..."

  module_run "${cmdScopes[@]}" sync_command
}
sync_command()
{
  # io_trace "sync_command -- $(print_vars syncModulePaths[@])"

  [ ${#syncModulePaths[@]} -eq 0 ] && syncModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${syncModulePaths[@]}"

  cmd_visit_modules
}

sync_do_prolog()
{
  branch_sync_all
  _sync_clean
  branch_show_status
}
_sync_clean()
{
  [[ $cleanLocalBranches == true ]] || return 0
  local branch
  for branch in $(branch_list_local_can_delete); do
    local info=$(git branch -D "$branch" 2>/dev/null)
    [[ -n $info ]] && mio_warning "$info"
  done
}

sync_run "$@"
