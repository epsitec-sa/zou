#!/bin/bash

# Defaults:
# - always recursive
# - abstract - create vtable
# - always publish current module
# - do not propagate down prerelPrefix
# - foreach submodule
#     if --merge
#     then { merge and publish } 
#     else { publish last vtag }
#
# Bundle invocation
# - override - always create vtable
#
# Submodule invocation
# - override - create vtable if --vtable && submodule count > 0

[[ -z $ZOUL_LOCK ]]               && . zoul-lock
[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]         && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]           && . zoul-git-cosm
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_CORE ]]    && . zoul-git-branch-core
[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select
[[ -z $ZOUL_GIT_BRANCH_SELECT ]]  && . zoul-git-branch-select
[[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish

publish_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)                  jobsCount=${1#-j};;
    .)                    unset recursive;;
    --dev)                publishDev=true;;
    -t|--vtable)          vtable=true;;
    -u|--reuse)           prerelPrefix='reuse';;
    --alpha)              prerelPrefix='alpha';;
    --beta)               prerelPrefix='beta';;
    --rc)                 prerelPrefix='rc';;
    --rtm)                prerelPrefix='rtm';;
    -*) io_error "unknown option '$1'"; return 1;;
    *) sku=$1;;
  esac; shift; done
}
publish_run()
{
  # parse command line
  local jobsCount sku vtable prerelPrefix publishDev recursive=true
  publish_parse "$@" || return $?

  local commitSubmodules=true \
        publishSelectExcludeIds=() \
        publishScopes=( config_scope cosm_scope )

  startupMessage="Publishing, please wait..."

  module_run "${publishScopes[@]}" publish_main
}
publish_main()
{
  local createVTable

  [[ -z $sku ]] && sku=$bundleBranch

  if [[ $vtable == true ]]; then
    createVTable=true
  elif repo_has_submodules "$startupRoot" && repo_is_bundle_root "$startupRoot"; then
    createVTable=true
  fi
  # trace_method publish_main createVTable

  local vtableGate vtableLookupPath
  [[ $createVTable == true ]] && {
    vtableGate=$(lock_init)
    vtableLookupPath="$(mktemp)"
    vtable_init "$startupRoot" "$vtableLookupPath"
  }
  publish_tree
}
publish_tree()
{
  # feed exclude list with moduleIds (modulePaths by default)
  publishSelectExcludeIds+=( "${configSelectExcludeIds[@]}" )

  if array_contains_element "$moduleId" "${publishSelectExcludeIds[@]}"; then
    publish_update_vtable
    return 0
  fi

  local branch vbranch vtag htag publishStatus

  publish_prolog || return $?
  [[ $recursive == true ]] && { publish_submodules || return $?; }
  publish_epilog
}
publish_prolog()
{
  local forceDev=false allowDuplicateTags=false
  [[ $publishDev == true || "$PWD" == "$startupRoot" ]] && forceDev=true
  [[ $moduleRoot == $bundleRoot ]] && allowDuplicateTags=true

  branch_set_select_auto "$sku" "$forceDev" false false "$allowDuplicateTags" || return $?

  if [[ $publishStatus == 'unpublishable' ]]; then
    io_error "Branch '$branch' cannot be published (no vbranch associated)" "$moduleTracePrefix"
    return 1
  fi
  # io_trace "publish_prolog -- $(print_vars branch vbranch vtag htag publishStatus)"
}
publish_submodules()
{
  local publishSubmodules=( $(array_sort configSkuInclude[@]) )
  module_visit_submodules_async 'publishSubmodules[@]' "${publishScopes[@]}" 'publish_tree'
}
publish_epilog()
{
  [ $publishStatus == 'published' ] && cosm_has_unstaged_submodules && publishStatus='notPublished'
  
  publish_publish || return $?
  publish_update_vtable
}

publish_publish()
{
  # io_trace "publish_publish 1 -- $(print_vars branch vbranch vtag htag prerelPrefix publishStatus)"
  local vnext=$vtag
  
  case $publishStatus in
  published)
    io_message "Already published at ${Brown}$vtag" "$moduleTracePrefix" LightBlue;;
  ffPublish)
    branch_merge "$vtag" "$moduleBranch" \
      && io_message "Already published at ${Brown}$vnext${LightBlue} (${Brown}fast-forward${LightBlue})" "$moduleTracePrefix" LightBlue \
      || { io_error "Fast-forward publish of branch '$branch' failed" "$moduleTracePrefix"; return 1; }
    publish_try_attach;;
  notPublished)
    branch_set_publish "$branch" "$vbranch" "$vtag" "$htag" "$prerelPrefix" \
      && io_success "Published branch '$branch' at ${Brown}$vnext" "$moduleTracePrefix" \
      || { io_error "Publish of branch '$branch' failed" "$moduleTracePrefix"; return 1; }
    publish_try_attach;;
  *)
    io_error "Fatal: publishStatus '$publishStatus' not implemented" "$moduleTracePrefix"
    exit 1;;
  esac
  # io_trace "publish_publish 1 -- $(print_vars branch vbranch vtag htag prerelPrefix publishStatus)"
}
publish_try_attach()
{
  branch_try_attach 'HEAD' "$sku" false || true
}
publish_update_vtable()
{
  [[ $createVTable == true ]] || return 0
  if [[ "$PWD" == "$startupRoot" ]]; then
    publish_commit_vtable
  else
    lock_enter "$vtableGate"
    vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath"
    lock_exit "$vtableGate"
  fi
}
publish_commit_vtable()
{
  # io_trace "publish_commit_vtable ${*@Q}"
  local ec=0
  vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath" true || ec=$?

  # synchronize dev with prod
  if [[ -n $vbranch ]]; then
    branch_merge $branch $vbranch
    branch_merge $vbranch $branch
  fi
  if [[ -n $vnext ]]; then
    [ $ec -eq 0 ] && io_success "Created version table for '$branch' at ${Brown}$vnext" "$moduleTracePrefix"
    tag_move "$vnext" "$branch" &>/dev/null
  fi
}

publish_run "$@"
