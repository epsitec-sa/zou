#!/bin/bash

# Defaults:
# - always recursive
# - abstract - create vtable
# - always publish current module
# - do not propagate down prerelPrefix
# - foreach submodule
#     if --merge
#     then { merge and publish } 
#     else { publish last vtag }
#
# Bundle invocation
# - override - always create vtable
#
# Submodule invocation
# - override - create vtable if --vtable && submodule count > 0

[[ -z $ZOUL_LOCK ]]               && . zoul-lock
[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]         && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]           && . zoul-git-cosm
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_CORE ]]    && . zoul-git-branch-core
[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select
[[ -z $ZOUL_GIT_BRANCH_SELECT ]]  && . zoul-git-branch-select
[[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish

publish_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)                  jobsCount=${1#-j};;
    .)                    unset recursive;;
    --dev)                publishDev=true;;
    -t|--vtable)          vtable=true;;
    -n|--dry-run)         dryRun=true;;
    -u|--reuse)           prerelPrefix='reuse';;
    --alpha)              prerelPrefix='alpha';;
    --beta)               prerelPrefix='beta';;
    --rc)                 prerelPrefix='rc';;
    --rtm)                prerelPrefix='rtm';;
    -*) io_error "unknown option '$1'"; return 1;;
    *) sku=$1;;
  esac; shift; done
}
publish_run()
{
  # parse command line
  local jobsCount sku vtable prerelPrefix publishDev dryRun recursive=true
  publish_parse "$@" || return $?

  local commitSubmodules=true \
        publishSelectExcludeIds=() \
        publishScopes=( config_scope cosm_scope )

  [[ $dryRun == true ]] \
  && startupMessage="${DarkGray}Publishing, please wait..." \
  || startupMessage="Publishing, please wait..."

  module_run "${publishScopes[@]}" publish_main
}
publish_main()
{
  branch_set_bestmatch_sku $sku

  # version table
  local vtableCreate vtableGate vtableLookupPath
  publish_set_vtable_info

  local pstatusParentGate pstatusLookupPath pstatusParentLookupPath principalPublishStatus

  publish_node
}

##############
# Publish node
##############

publish_node()
{

  publish_require_clean_repo || return $?
  publish_process_excluded && return 0

  local lbranch vbranch vtag htag delta alias status nextHead publishStatus vnext

  publish_prolog || return $?
  [[ $recursive == true ]] && { publish_submodules || return $?; }
  publish_epilog
}
publish_require_clean_repo()
{
  [[ $dryRun == true ]] && return 0
  repo_require_clean_work_tree "Cannot publish"
}
publish_process_excluded()
{
  # feed exclude list with moduleIds (modulePaths by default)
  publishSelectExcludeIds+=( "${configSelectExcludeIds[@]}" )
  if array_contains_element "$moduleId" "${publishSelectExcludeIds[@]}"; then
    publish_update_vtable
    return 0
  fi
  return 1
}

################
# Publish prolog
################

publish_prolog()
{
  local forceDev=false allowDuplicateTags=false
  [[ $publishDev == true || "$PWD" == "$startupRoot" ]] && forceDev=true
  [[ $moduleRoot == $bundleRoot ]] && allowDuplicateTags=true

  if [[ $dryRun == true ]]; then
    # io_trace "publish_prolog -- $(print_vars moduleId)"
    branch_set_sku_info "$sku" "$forceDev" "$allowDuplicateTags"
    publish_init_pstatus
  else
    branch_set_select_auto "$sku" "$forceDev" false "$allowDuplicateTags" || return $?
  fi

  if [[ $publishStatus == 'unpublishable' ]]; then
    io_error "Branch '$lbranch' cannot be published (no vbranch associated)" "$moduleTracePrefix"
    return 1
  fi
  # io_trace "publish_prolog -- $(print_vars lbranch vbranch vtag htag publishStatus)"
}

####################
# Publish submodules
####################

publish_submodules()
{
  local publishSubmodules=( $(array_sort configSkuInclude[@]) )
  module_visit_submodules_async 'publishSubmodules[@]' "${publishScopes[@]}" 'publish_node'
}

################
# Publish epilog
################

publish_epilog()
{
  publish_fix_status
  publish_publish || return $?
  publish_update_vtable
}
publish_fix_status()
{
  [[ $dryRun == true ]] && publish_update_pstatus
  [[ $publishStatus == 'published' ]] && cosm_has_unstaged_submodules && publishStatus='notPublished'
}

#################
# Publish helpers
#################

publish_publish()
{
  # io_trace "publish_publish 1 -- $(print_vars lbranch vbranch vtag htag prerelPrefix publishStatus)"
  
  case $publishStatus in
    published)    publish_already_published;;
    ffPublish)    publish_ff_publish;;
    notPublished) publish_not_published;;
    *)            publish_not_implemented;;
  esac
  # io_trace "publish_publish 1 -- $(print_vars lbranch vbranch vtag htag prerelPrefix publishStatus)"
}
publish_already_published()
{
  # head will not change
  branch_io_message "Already published" "$alias" LightBlue
}
publish_ff_publish()
{
  # head will not change
  if [[ $dryRun == true ]]; then
    branch_io_message "Branch ${Brown}$lbranch${Green} will be fast-forwarded at ${Brown}$vtag${Green} (${Brown}not synchronized${LightBlue})" "$alias" Green
  else
    branch_merge "$vtag" "$moduleBranch" \
    && branch_io_message "Fast-forwarded branch ${Brown}$lbranch${Green} at ${Brown}$vtag${LightBlue}" "$alias" Green \
    || { branch_io_message "Fast-forward of branch ${Brown}$lbranch${Red} failed" "$alias" Red; return 1; }
    publish_try_attach
  fi
}
publish_not_published()
{
  # head will change

  local noIncrement
  vnext=$vtag

  # get principal module version
  publish_set_bundle_version # update htag and noIncrement

  if [[ $dryRun == true ]]; then
    branch_set_vnext "$vtag" "$htag" "$noIncrement" # -> prerelPrefix vnext
    branch_io_message "Branch ${Brown}$lbranch${Green} will be published at ${Brown}$vnext" "$alias" Green
    # io_trace "$(print_vars lbranch vbranch vtag htag delta status nextHead publishStatus vnext prerelPrefix)"
  else
    branch_set_publish "$lbranch" "$vbranch" "$vtag" "$htag" "$prerelPrefix" "$noIncrement" \
    && branch_io_message "Published branch '$lbranch' at ${Brown}$vnext" "$alias" Green \
    || { branch_io_message "Publish of branch '$lbranch' failed" "$alias" Red; return 1; }
    publish_try_attach
  fi
}
publish_not_implemented()
{
  io_error "Fatal: publishStatus '$publishStatus' not implemented" "$moduleTracePrefix"
  exit 1
}
publish_try_attach()
{
  branch_try_attach 'HEAD' "$sku" false || true
}

################
# Bundle version
################

# Compute next bundle version
# in:
#  (module_scope)
# out:
#  htag         -- high
#  noIncrement
publish_set_bundle_version()
{
  [[ $moduleRoot == $bundleRoot && -n $principalModuleId ]] || return 0

  local pinfo pstatus ptag pver hver

  pinfo=$(module_visit "$principalModuleId" "${publishScopes[@]}" publish_principal_info)
  pstatus=${pinfo%;*}
  ptag=${pinfo#*;}
  [ -z $ptag ] && return 0

  pver=${ptag##*/}
  hver=${htag##*/}
  # io_trace "publish_set_bundle_version 1 -- $(print_vars principalModuleId ptag pstatus htag noIncrement)"
  if [[ $pstatus == 'published' && $hver == $pver ]]; then
    branch_io_message "Bundle ${Brown}$bundleId${LightPurple} and module ${Brown}$principalModuleId${LightPurple} have same version" "$alias" LightPurple
  else
    noIncrement=true
  fi
  hver=$(vtag_highest_of $pver $hver)
  # restore folder
  [[ $htag =~ ^.*/ ]]
  htag=${BASH_REMATCH[0]}$hver
  # io_trace "publish_set_bundle_version 2 -- $(print_vars principalModuleId ptag pstatus htag noIncrement)"
}
# run in principal module context
publish_principal_info()
{
  local lbranch vbranch vtag htag delta alias status nextHead publishStatus vnext
  branch_set_sku_info "$bundleBranch" "$publishDev" false
  # io_trace "publish_principal_info 1 -- $(print_vars lbranch vbranch vtag htag delta status nextHead publishStatus)"
  [[ $dryRun == true && -n $principalPublishStatus ]] && publishStatus=$principalPublishStatus
  # io_trace "publish_principal_info 2 -- $(print_vars lbranch vbranch vtag htag delta status nextHead publishStatus)"
  if [[ $publishStatus == 'published' ]]; then
    vnext=$htag
  else
    branch_set_vnext "$vtag" "$htag"
  fi
  # io_trace "publish_principal_version << $(print_vars lbranch vbranch vtag htag delta status nextHead publishStatus vnext)"
  echo "$publishStatus;$vnext"
}

###############
# Version table
###############

publish_set_vtable_info()
{
  # [[ $dryRun == true ]] && return 0
  if [[ $vtable == true ]]; then
    vtableCreate=true
  elif [[ $startupRoot == $bundleRoot ]] && module_has_submodules; then
    vtableCreate=true
  fi
  if [[ $vtableCreate == true ]]; then
    vtableGate=$(lock_init)
    vtableLookupPath="$(mktemp)"
    vtable_init "$startupRoot" "$vtableLookupPath"
  fi
}
publish_update_vtable()
{
  # io_trace "publish_update_vtable -- $(print_vars vtable vtableCreate)"
  [[ $vtableCreate == true ]] || return 0
  if [[ "$PWD" == "$startupRoot" ]]; then
    publish_commit_vtable
  else
    vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath" "$vtableGate"
  fi
}
publish_commit_vtable()
{
  # io_trace "publish_commit_vtable -- $(print_vars lbranch vbranch vnext)"
  local commit=true
  [[ $dryRun == true ]] && commit=false
  if vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath" "$vtableGate" $commit; then
    if [[ $dryRun == true ]]; then
      io_message "Created version table for ${Brown}$lbranch${DarkGray} at ${Brown}$vnext" "$moduleTracePrefix" DarkGray
    else
      branch_merge_sync $lbranch $vbranch
      tag_move "$vnext" "$lbranch" &>/dev/null
      io_success "Created version table for ${Brown}$lbranch${Green} at ${Brown}$vnext" "$moduleTracePrefix"
    fi
  fi
}

################################
# Publish status in dry run mode
################################

publish_init_pstatus()
{
  pstatusParentGate=$(lock_init)
  pstatusParentLookupPath=$pstatusLookupPath
  unset pstatusLookupPath
  # io_trace "publish_init_pstatus 1 -- $(print_vars moduleId pstatusParentLookupPath pstatusLookupPath)"
  if config_has_submodules; then
    pstatusLookupPath="$(mktemp)"
    pstatus_init "$pstatusLookupPath"
    # io_trace "publish_init_pstatus 2 -- $(print_vars moduleId pstatusParentLookupPath pstatusLookupPath)"
  fi
}
publish_update_pstatus()
{
  # io_trace "publish_update_pstatus -- $(print_vars moduleId pstatusParentLookupPath pstatusLookupPath)"
  if [[ -n $pstatusLookupPath ]]; then
    pstatus_commit "$pstatusLookupPath"
    rm "$pstatusLookupPath"
  fi
  if [[ -n $pstatusParentLookupPath ]]; then
    pstatus_update "$pstatusParentLookupPath" "$pstatusParentGate" "$moduleId" "$publishStatus"
  fi
}
pstatus_init()
{
  local lookupPath=$1
  
  declare -A lookup                 # create lookup
  declare -p lookup >"$lookupPath"  # serialize lookup
  # io_trace "pstatus_init -- $(print_vars lookupPath)"
}
pstatus_update()
{
  local lookupPath=$1 gate=$2 moduleId=$3 publishStatus=$4
  
  lock_enter "$gate"
  . "$lookupPath"                     # deserialize lookup
  lookup[$moduleId]="$publishStatus"  # save publish status
  declare -p lookup >"$lookupPath"    # serialize lookup
  lock_exit "$gate"
  # io_trace "pstatus_update -- $(print_vars lookupPath publishStatus)"
}
# 
# out:
#   publishStatus
#   principalPublishStatus
pstatus_commit()
{
  local lookupPath=$1 mid status
  . "$lookupPath"
  for mid in ${!lookup[@]}; do
    status=${lookup[$mid]}
    [[ $status == 'notPublished' ]] && publishStatus=$status
    [[ $mid == $principalModuleId ]] && principalPublishStatus=$status
  done
  return 0
}

publish_run "$@"
