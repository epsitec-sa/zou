#!/bin/bash

# Defaults:
# - always recursive
# - abstract - create vtable
# - always publish current module
# - do not propagate down prerelPrefix
# - foreach submodule
#     if --merge
#     then { merge and publish } 
#     else { publish last vtag }
#
# Bundle invocation
# - override - always create vtable
#
# Submodule invocation
# - override - create vtable if --vtable && submodule count > 0

[[ -z $ZOUL_LOCK ]]               && . zoul-lock
[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG ]]         && . zoul-git-config
[[ -z $ZOUL_GIT_COSM ]]           && . zoul-git-cosm
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_BRANCH_CORE ]]    && . zoul-git-branch-core
[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select
[[ -z $ZOUL_GIT_CONFIG_PUBLISH ]] && . zoul-git-config-publish
[[ -z $ZOUL_GIT_BRANCH_SELECT ]]  && . zoul-git-branch-select
[[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish

publish_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -q|--quiet)           quiet=true;;
    -e|--stop-on-error)   stopOnError=true;;
    -j*)                  jobsCount=${1#-j};;
    .)                    unset recursive;;
    -t|--vtable)          vtable=true;;
    -u|--reuse)           prerelPrefix='reuse';;
    --alpha)              prerelPrefix='alpha';;
    --beta)               prerelPrefix='beta';;
    --rc)                 prerelPrefix='rc';;
    --rtm)                prerelPrefix='rtm';;
    --dev)                publishHint='dev';;
    -*) io_error "unknown option '$1'"; return 1;;
  esac; shift; done
}
publish_run()
{
  # parse command line
  local jobsCount quiet stopOnError vtable prerelPrefix publishHint recursive=true
  publish_parse "$@" || return $?

  local commitSubmodules=true \
        publishSelectExcludeIds=() \
        publishScopes=( config_scope cosm_scope )

  module_run "${publishScopes[@]}" publish_main
}
publish_main()
{
  local createVTable

  if [[ $vtable == true ]]; then
    createVTable=true
  elif repo_has_submodules "$startupRoot" && repo_is_bundle_root "$startupRoot"; then
    createVTable=true
  fi
  # trace_method publish_main createVTable

  local vtableGate vtableLookupPath
  [[ $createVTable == true ]] && {
    vtableGate=$(lock_init)
    vtableLookupPath="$(mktemp)"
    vtable_init "$startupRoot" "$vtableLookupPath"
  }
  publish_tree
}
publish_tree()
{
  # feed exclude list with moduleIds (modulePaths by default)
  publishSelectExcludeIds+=( "${configSelectExcludeIds}" )

  if array_contains_element "$moduleId" "${publishSelectExcludeIds[@]}"; then
    publish_update_vtable
  else
    local ec=0 branchOrTag=$moduleBranch \
          publishDev neverPublished preview alreadyPublished ffPublish

    publish_prolog || ec=$?
    [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
    [[ $recursive == true ]] && {
      publish_submodules || ec=$?
      [[ $ec -ne 0 && $stopOnError == true ]] && return $ec
    }
    publish_epilog || ec=$?
    return $ec
  fi
}
publish_submodules()
{
  local publishSubmodules=( $(array_sort configSkuInclude[@]) )
  module_visit_submodules_async 'publishSubmodules[@]' "${publishScopes[@]}" 'publish_tree'
}
publish_prolog()
{
  local hint
  [[ $publishHint == 'dev' || "$PWD" == "$startupRoot" ]] && hint='dev'
  branch_set_select_auto "$bundleBranch" "$hint" false

  case $? in
    0)   publishDev=true;; 
    1|2) neverPublished=true;   io_warning "Branch '$branchOrTag' was never published" "$moduleTracePrefix";;
    3)   preview=true;          io_warning "Branch '$branchOrTag' is a preview" "$moduleTracePrefix";;
    4)   alreadyPublished=true; io_message "Already published at ${Brown}$branchOrTag" "$moduleTracePrefix" LightBlue;;
    5)   ffPublish=true;;
    10)  return $?;;
  esac
}
publish_epilog()
{
  local info ec=0
  
  cosm_process_unstaged_submodules

  if [[ "$PWD" == "$startupRoot" ]]; then
    # in startup module
    info=( $(branch_publish "$branchOrTag" "$prerelPrefix") ) || ec=$?
    publish_try_attach
    publish_commit_vtable "$branchOrTag" "${info[@]}"
    # ZOU_TRACE=true io_trace "publish_epilog[STARTUP-ROOT] -- $(print_vars info[@])"
  # in submodule
  elif [[ $publishDev == true ]]; then
    branch_publish "$branchOrTag" "$prerelPrefix" >/dev/null || ec=$?
    publish_try_attach
    publish_update_vtable
    # ZOU_TRACE=true io_trace "publish_epilog[SUBMODULE-DEV]"
  elif [[ $neverPublished == true ]]; then
    branch_publish >/dev/null || ec=$?
    publish_try_attach
    publish_update_vtable
    # ZOU_TRACE=true io_trace "publish_epilog[SUBMODULE-NEVER-PUBLISHED]"
  elif [[ $ffPublish == true ]]; then
    branch_merge $branchOrTag $moduleBranch
    publish_try_attach
    publish_update_vtable
    io_success "Published branch '$moduleBranch' at ${Brown}$branchOrTag${Green} (fast-forward)" "$moduleTracePrefix"
    # ZOU_TRACE=true io_trace "publish_epilog[SUBMODULE-FF-PUBLISH]"
  else
    publish_update_vtable
    # ZOU_TRACE=true io_trace "publish_epilog[SUBMODULE-FF-PUBLISH]"
  fi
  return $ec
}
publish_try_attach()
{
  branch_try_attach 'HEAD' "$bundleBranch" false >/dev/null
}
publish_update_vtable()
{
  [[ $createVTable == true ]] || return 1
  lock_enter "$vtableGate"
  vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath"
  lock_exit "$vtableGate"
}
publish_commit_vtable()
{
  [[ $createVTable == true ]] || return 1
  # ZOU_TRACE=true io_trace "publish_commit_vtable ${*@Q}"
  local ec=0 branch=$1 vtag=$2 vbranch=$3
  vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath" true || ec=$?

  # synchronize dev with prod
  if [[ -n $vbranch ]]; then
    branch_merge $branch $vbranch
    branch_merge $vbranch $branch
  fi
  if [[ -n $vtag ]]; then
    [ $ec -eq 0 ] && io_success "Created version table for '$branch' at ${Brown}$vtag" "$moduleTracePrefix"
    tag_move "$vtag" "$branch" &>/dev/null
  fi
}

publish_run "$@"
