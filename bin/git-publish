#!/bin/bash

[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select
[[ -z $ZOUL_GIT_CONFIG_PUBLISH ]] && . zoul-git-config-publish
[[ -z $ZOUL_GIT_BRANCH_SELECT ]]  && . zoul-git-branch-select
[[ -z $ZOUL_GIT_BRANCH_PUBLISH ]] && . zoul-git-branch-publish

cmdOpts=()
while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help) zou-help $0; exit 0;;
  -0|--level0)        level0=true;;
  -q|--quiet)         cmdOpts+=($1); quiet=true;;
  -e|--stop-on-error) cmdOpts+=($1); stopOnError=true;;
  -r|--recursive)     cmdOpts+=($1); recursive=true;;
  --alpha)            cmdOpts+=($1); prerelPrefix='alpha';;
  --beta)             cmdOpts+=($1); prerelPrefix='beta';;
  --rc)               cmdOpts+=($1); prerelPrefix='rc';;
  --rtm)              cmdOpts+=($1); prerelPrefix='rtm';;
  --reuse)            cmdOpts+=($1); prerelPrefix='reuse';;
  --debug)            cmdOpts+=($1); debug=true;;
  --_root)            cmdOpts+=($1 $2); root=$(echo $2 | xargs echo); shift;;  # remove single quotes
  -*) echo "unknown option: $1" >&2; exit 1;;
esac; shift; done

publish_submodules()
{
  local branch configFile include exclude path opath ec=0
  branch=$(branch_ensure_current) || return 1
  configFile=$(repo_zouflow_path) || return 1
  include=( $(config_sku_list_included "$branch" "$configFile") )
  exclude=( $(config_select_list_excluded "$branch" "$configFile") )
  for path in $(string_sort $(array_remove_array 'include[@]' 'exclude[@]')); do
    opath="$PWD"; cd "$path"
    [[ $quiet == true ]] || echo Entering "'$(path_make_relative '.' "$root")'"
    git publish -0 ${cmdOpts[@]} || ec=1
    cd "$opath"
    [[ $ec != 0 && $stopOnError == true ]] && break
  done
  return $ec
}
publish_core()
{
  local branch vtag ltag stag
  branch=$(branch_current) || return 1
  if config_publish_is_enabled; then
    vtag=$(branch_publish "$branch" "$prerelPrefix") || return 1
  else
    ltag=$(vtag_describe "$branch") || return 1
    stag=${ltag%-*-g*}
    branch_checkout "$stag" &>/dev/null
    io_info "Publish disabled for branch '$branch', checking out '$stag'" "[$(repo_module_id)]"
  fi
}
publish()
{
  if [[ $recursive == true ]]; then
    publish_submodules || return 1
  fi
  publish_core
}

if [[ $level0 == true ]]; then
  publish
else
  [[ -z $quiet ]] && echo Entering "'$(repo_module_relative_to_path)'"
  git publish -0 --_root "'$(repo_module_dir)'" ${cmdOpts[@]} # single quote root to avoid shell path expansion on Windows
fi
