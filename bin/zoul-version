#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_VERSION ]] && . zoul-version
ZOUL_VERSION=true

version_technical() { echo "${2}.${3}.${4}.$(date +%y%V)${5}${6}"; }
version_commit_files()
{
  local techver=$1; shift
  git add "$@"
  git commit -m"zou-flow: update technical version to $techver"
}

# Update Version tag in Version.props XML file
#
# Example:
#   version_update_version_props v3.0.5-rc1
#
# Version.props format:
#   <Project>
#     <PropertyGroup>
#       <Version>3.0.5</Version>
#     </PropertyGroup>
#   </Project>
version_update_version_props_recursive()
{
  local techver=$(version_technical "$@")
  local file='Version.props'
  for file in $(find -type f -iname "$file"); do
    sed -i -E "s,(<Version>).*(</Version>),\1$techver\2," "$file"
    sed -i -E "s,(<AssemblyVersion>).*(</AssemblyVersion>),\1$techver\2," "$file"
    echo $(realpath "$file")
  done
}
version_update_version_props()
{
  local techver=$(version_technical "$@")
  local file="$PWD/Version.props"
  if [[ -f $file ]]; then
    sed -i -E "s,(<Version>).*(</Version>),\1$techver\2," "$file"
    sed -i -E "s,(<AssemblyVersion>).*(</AssemblyVersion>),\1$techver\2," "$file"
    file=$(realpath "$file")
    echo "$techver"
    echo "$file"
  else
    return 1
  fi
}
version_update_custom()
{
  local updater="$PWD/update-version"
  if [[ -f "$updater" ]]; then
    local techver=$(version_technical "$@")
    echo "$techver"
    "$updater" "$@"
  else
    return 1
  fi
}

version_update()
{
  local version=${1#v*}
  local varray=()
  if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[[:alnum:]]+)?(\+.+)?$ ]]; then
    varray+=( ${BASH_REMATCH[@]} )
  else
    io_error "'$1' - bad version format"
    return 1
  fi

  version_update_custom "${varray[@]}" || \
  version_update_version_props "${varray[@]}"
}
