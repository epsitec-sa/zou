#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_VERSION ]] && . zoul-version
ZOUL_VERSION=true

[[ -z $ZOUL_CORE ]] && . zoul-core

ZOU_FLOW_CONFIG='.zou-flow'

version_parse()
{
  local version=$1
  local varray=()
  if [[ $version =~ ^(.*/)?v([0-9]+)\.([0-9]+)\.([0-9]+)(-[[:alnum:]]+)?(\+.+)?$ ]]; then
    echo ${BASH_REMATCH[0]} ${BASH_REMATCH[@]:2}  # skip prefix
  else
    io_error "'$1' - bad version format"
    return 1
  fi
}
version_technical()       { shift; echo "${1}.${2}.${3}.$(date +%y%V)${4}${5}"; }
version_technical_short() { shift; echo "${1}.${2}.${3}.$(date +%y%V)"; }
version_commit_files()
{
  local techver=$1; shift
  [ $# -ne 0 ] && {
    # git add "$@"
    git commit -m"zou-flow: update technical version to $techver" -- "$@" &>/dev/null
  }
}

# Update Version tags in *.csproj file
#
# Example:
#   version_update_csproj_recursive v3.0.5-rc1
#
# *.csproj format:
# <ApplicationVersion>2.38.2.1844</ApplicationVersion>
version_update_csproj()
{
  local file=$1; shift
  local techver=$1; shift
  local stechver=$1; shift
  sed -i -E "\
    0,/<ProductVersion>/{s,(<ProductVersion>).*(</ProductVersion>),\1$stechver\2,}; \
    0,/<ApplicationVersion>/{s,(<ApplicationVersion>).*(</ApplicationVersion>),\1$stechver\2,}" "$file"
}
# Update Version tag in AssemblyInfo.cs file
#
# Example:
#   version_update_assembly_info_recursive v3.0.5-rc1
#
# AssemblyInfo.cs format:
# [assembly: AssemblyVersion ("2.40.0.1849")]
# [assembly: AssemblyFileVersion ("2.40.0.1849")]
version_update_assembly_info()
{
  local file=$1; shift
  local techver=$1; shift
  local stechver=$1; shift
  sed -i -E "\
    s,^(\[assembly:[[:space:]]*AssemblyVersion[[:space:]]*\(\").*(\"\)\]),\1$stechver\2,; \
    s,^(\[assembly:[[:space:]]*AssemblyFileVersion[[:space:]]*\(\").*(\"\)\]),\1$stechver\2," "$file"
}
# Update Version tag in Version.props XML file
#
# Example:
#   version_update_version_props v3.0.5-rc1
#
# Version.props format:
#   <Project>
#     <PropertyGroup>
#       <Version>3.0.5</Version>
#     </PropertyGroup>
#   </Project>
version_update_version_props()
{
  local file=$1; shift
  local techver=$1; shift
  local stechver=$1; shift
  sed -i -E "\
    s,(<Version>).*(</Version>),\1$techver\2,; \
    s,(<AssemblyVersion>).*(</AssemblyVersion>),\1$techver\2," "$file"
}
version_update_custom()
{
  local techver=$1
  local varray=( ${!2} )
  local updater="${3:-$PWD/update-version}"
  if [[ -f "$updater" ]]; then
    "$updater" "${varray[@]}"
  else
    return 1
  fi
}

version_list_file_spec()
{
  git config --file "$ZOU_FLOW_CONFIG" --get-all update-version.$1
}
version_add_file_spec()
{
  local file key=$1 specs=$(version_list_file_spec $1); shift
  for file in "$@"; do
    if ! array_contains_element "$file" $specs; then
      git config --file "$ZOU_FLOW_CONFIG" --add update-version.$key $file
    fi
  done
  git update-index --add -- "$ZOU_FLOW_CONFIG" &>/dev/null && \
  git commit -m "zou-flow: register '$@' for technical version update" -- "$ZOU_FLOW_CONFIG" &>/dev/null
}
version_remove_file_spec()
{
  git config --file "$ZOU_FLOW_CONFIG" --unset update-version.$1 && \
  git commit -m "zou-flow: unregister '$@' from technical version update" -- "$ZOU_FLOW_CONFIG" &>/dev/null
}

version_list_version_props() { version_list_file_spec 'version-props'; }
version_list_assembly_info() { version_list_file_spec 'assembly-info'; }
version_list_csproj()        { version_list_file_spec 'csproj'; }

version_add_version_props() { version_add_file_spec 'version-props' "$@"; }
version_add_assembly_info() { version_add_file_spec 'assembly-info' "$@"; }
version_add_csproj()        { version_add_file_spec 'csproj' "$@"; }

version_remove_version_props() { version_remove_file_spec 'version-props' "$@"; }
version_remove_assembly_info() { version_remove_file_spec 'assembly-info' "$@"; }
version_remove_csproj()        { version_remove_file_spec 'csproj' "$@"; }

version_update_file_spec()
{
  local specs=$($1); shift
  local func=$1; shift
  local techver=$1; shift
  local stechver=$1; shift
  local fileSpec file hasSpec
  for fileSpec in $specs; do
    hasSpec=1
    for file in $(find -type f -ipath "$fileSpec" "$@"); do
      "version_update_$func" "$file" "$techver" "$stechver"
      realpath "$file"
    done
  done
  return $hasSpec
}
version_update_config()
{
  local func=$1; shift
  version_update_file_spec "version_list_$func" "$func" "$@"
}

version_update()
{
  set -f
  local varray=()
  varray+=( $(version_parse "$1") )
  [ $? -eq 0 ] && {
    local techver=$(version_technical "${varray[@]}")
    io_debug techver version_update
    echo "$techver"

    # execute .net zou-flow updaters
    if [[ -f "$ZOU_FLOW_CONFIG" ]]; then
      local stechver=$(version_technical_short "${varray[@]}")
      # exclude submodules from find file (-not -path './<sm-path>/*'] ...)
      local findNotPaths=$(git config --file .gitmodules --get-regexp path | cut -d' ' -f2 | sed "s,\(.*\),-not -path \./\1/\*,")
      version_update_config 'version_props' $techver $stechver $findNotPaths
      version_update_config 'assembly_info' $techver $stechver $findNotPaths
      version_update_config 'csproj'        $techver $stechver $findNotPaths
    fi
    # execute custom updater (use git vconfig --custom to create one)
    version_update_custom $techver 'varray[@]' './update-version'
  }
  set +f
}
