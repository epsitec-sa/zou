#!/bin/bash

zou_banner()
{
  local line regex='Version>(.*)</'
  while read -r line || [[ -n "$line" ]]; do
    [[ "$line" =~ $regex ]] && {
      version=${BASH_REMATCH[1]}
      break
    }
  done < "$zouDir/Version.props"
  printf "%b" "\e[1;34mZou tools [Version \e[0;32m$version\e[1;34m]
Copyright Â© 2019, EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland\e[0m\n"
}
zou_help()
{
  local help=$(cat "$zouDir/help/git-zou")
  printf "\n\n%b\n" "\e[0;36m$help\e[0m" 1>&2
}
zou_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou_help; exit 0;;
    -v|--version) exit 0;;
    -*) args+=($1);;
  esac; shift; done
}
zou_main()
{
  local args=() version zouBinDir zouDir setupDir boot='zoul-update-boot'
  zouBinDir=$(dirname "${BASH_SOURCE[0]}")
  zouDir=$(realpath "$zouBinDir/..")

  cd "$zouDir"
  if [[ -z $zouFakeUpdate ]] && test -n "$(git status --porcelain)"; then
    printf -v zouDir %q "$zouDir"
    printf '\n%b\n' "\e[0;36m[zou]\e[0m : \e[0;31mRepo \e[0;37m$zouDir\e[0;31m is not clean, aborting...\e[0m"
    exit 1
  fi

  zou_banner
  zou_parse "$@"
  args+=(---version $version)

  setupDir=$(mktemp -d)
  cp --preserve "$zouBinDir/$boot" "$setupDir"

  # register for worker listening event
  workerListening=1
  trap "workerListening=0" USR1

  # start asynchronous worker
  ("$setupDir/$boot" "$zouBinDir" "$setupDir" "${args[@]}") &

  # worker can do the real work when launcher exits
  trap "kill -USR1 $!" EXIT
  # wait for worker to listen
  while [ $workerListening -ne 0 ]; do sleep .1; done
}

zou_main "$@"