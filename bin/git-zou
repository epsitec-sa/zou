#!/usr/bin/env bash

[[ -z $ZOUL_GIT_VTAG ]]   && . zoul-git-vtag
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module
[[ -z $ZOUL_GIT_VTAG_GROUPING ]] && . zoul-git-vtag-grouping
zou_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) io_help $0; exit 0;;
    -v|--version) exit 0;;
    -c|--no-config)     io_warning "option ${VC}-c${Brown} is deprecated";;
    -u|--no-prune-tags) io_warning "option ${VC}-u${Brown} is deprecated";;
    -f|--force)         force=true;;
    --debug)            export zouSetupDebug=true;;
    --vnext)            checkoutType='vnext';;
    --dev)              checkoutType='dev';;
    -*)                 io_error "unknown option ${VC}$1${Red}\n"; io_help $0; exit 1;;
  esac; shift; done
}
zou_main()
{
  local noConfig version checkoutType='vlast' force
  io_set_version

  zou_parse "$@"
  cd "$zouDir"

  startupMessage="Updating ${Brown}zou${White}, please wait..."
  if [[ $force == true ]] || _zou_update_available; then
    if [[ $zouSetupDebug == true ]]; then
      checkoutType='dev'
    fi
    # io_trace "zou_main ${*@Q} -- $(print_vars version zouSetupDebug)"
    # export zouTraceScope=true
    module_run zou_run
  else
    [[ -z $ZOUL_CHICKEN ]] && . zoul-chicken
    module_run zou_chicken
  fi
}

zou_chicken()
{
  zou_chicken_setup
  _zou_epilog
}

zou_run()
{
  # clone installer in temp directory

  local setupDir zouCheckoutType="$checkoutType"
  if [[ -z $zouSetupDebug ]]; then
    setupDir=$(mktemp -d)
    trap_exit "rm -rf "$setupDir""
  else
    setupDir='/home/roger/tmp'
    rm -rf "$setupDir"
  fi
  setupDir="$setupDir/zou-setup"
  # io_trace "zou_run -- $(print_vars setupDir) -- ${*@Q}"
  
  # clone installer
  gitx clone 'https://git.epsitec.ch/Build/zou.git' "$setupDir" &>/dev/null
  cd "$setupDir"

  [[ -f "$setupDir/bin/zoul-setup0" ]] || zouCheckoutType='dev'

  # activate installer
  export PATH="$setupDir/bin:$PATH"

  if [[ -z $zouSetupDebug ]]; then
    git sku enter "--$zouCheckoutType"
  else
    # copy modified scripts to setup directory
    find "$zouBinDir" -maxdepth 1 -type f -execdir cp -P -t "$setupDir/bin/" '{}' '+'
    # activate development version of setup
    git sku enter '--dev'
  fi

  # launch new setup in a subshell to take in account SKU mode
  ( zoul-setup0 "--$checkoutType" "---$zouCheckoutType" "$@" || exit $? )
  
  mio_message "Configuring ${Brown}bundles${Cyan}, please wait..."
  git bundler --all --quiet
  # printf '\n'
  # mio_warning "WARNING: bundles are not configured by default anymore" "$tracePrefix"
  # mio_warning "         use the ${VC}git bundler --all${Brown} command to configure them" "$tracePrefix"

  _zou_epilog
}
_zou_update_available()
{
  gitx fetch --all --prune --tags &>>"$stdallRedir"

  local vHighestTag vtags
  vtags=( $(vtag_list_by_date) )
  vHighestTag=${vtags[0]}

  # io_trace "_zou_update_available 0 -- $(print_vars vHighestTag)"
  
  # update available if HEAD < vHighestTag
  ! ref_equals 'HEAD' "$vHighestTag" && gitx merge-base --is-ancestor 'HEAD' "$vHighestTag" &>>"$stdallRedir"
}
_zou_epilog()
{
  cd "$zouBinDir"

  local vtag delta previousVersion="$version"
  io_set_version
  [[ -n $zouSetupDebug ]] && io_trace "[DEBUG] _zou_epilog -- $(print_vars previousVersion version)"
  [[ -n $zouSetupDebug ]] && io_trace "[DEBUG] _zou_epilog -- $(print_vars zouDir zouBinDir)"

  vtag_set_describe $moduleHead
  # io_trace "_zou_setup1_epilog -- $(print_vars vtag delta)"
  if [[ $previousVersion == $version ]]; then
    if [ $delta -eq 0 ]; then
      mio_warning "No changes, still using version ${VC}$version${Brown}" "$tracePrefix"
    else
      mio_warning "Switched to development version, ${Magenta}$delta${Brown} commit[s] ahead of ${VC}$version${Brown}" "$tracePrefix"
    fi
  else
    mio_warning "Switched to new version ${VC}$version${Brown}" "$tracePrefix"
  fi
}

printf '\n'
io_banner
printf '\n'

zou_main "$@"
