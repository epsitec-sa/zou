#!/bin/bash

zou_banner()
{
  local line version regex='Version>(.*)</'
  while read -r line || [[ -n "$line" ]]; do
    [[ "$line" =~ $regex ]] && {
      version=${BASH_REMATCH[1]}
      break
    }
  done < "$zouDir/Version.props"
  printf "%b\n\n" "\e[1;34mZou tools [Version \e[0;32m$version\e[1;34m]
Copyright Â© 2019, EPSITEC SA, CH-1400 Yverdon-les-Bains, Switzerland"
}
zou_help()
{
  local help=$(cat "$zouDir/help/git-zou")
  printf "%b\n" "\e[0;36m$help\e[0m" 1>&2
}
zou_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou_help; exit 0;;
    -*) args+=($1);;
  esac; shift; done
}
zou_main()
{
  local zouDir=$(realpath "$(dirname "${BASH_SOURCE[0]}")/..") args=()
  zou_banner
  zou_parse "$@"

  local setup=$(mktemp)
  cat >"$setup" <<\EOF
#!/bin/bash

readonly NC='\e[0m' Red='\e[0;31m' Brown='\e[0;33m' Cyan='\e[0;36m'

zou_setup()
{
  sleep .2
  local zouDir=$1; shift
  local message="${Cyan}[zou]${NC} : ${Brown}Starting asynchronous update...${NC}"
  printf '\n%b\n' "$message"

  cd "$zouDir"
  if test -n "$(git status --porcelain)"; then
    message="${Cyan}[zou]${NC} : ${Red}Repo '$zouDir' is not clean, aborting...${NC}"
    printf '%b\n' "$message"
  else
    message="${Cyan}[zou]${NC} : ${Cyan}Downloading, please wait...${NC}"
    printf '%b\n' "$message"
    git fetch --prune --all &>/dev/null
    git fetch --tags --force &>/dev/null
    git merge FETCH_HEAD &>/dev/null

    zoul-update "$@"
  fi
}

zou_setup "$@"
rm "$0"
EOF

  chmod u+x "$setup"
  ("$setup" "$zouDir" "${args[@]}") &
}

zou_main "$@"