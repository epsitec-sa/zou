#!/usr/bin/env bash

[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

zou_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) io_help $0; exit 0;;
    -v|--version) exit 0;;
    --debug) export zouSetupDebug=true;;
    --vnext) checkoutType='vnext';;
    --dev)   checkoutType='dev';;
    -*)      zouSetupOptions+=( "$1" );;
  esac; shift; done
}
zou_main()
{
  local zouSetupOptions=() version checkoutType='vlast'
  io_set_version

  zou_parse "$@"
  if [[ $zouSetupDebug == true ]]; then
    checkoutType='dev'
  elif test -n "$(gitx status --porcelain)"; then
    io_error "${VC}$zouDir${Red} is not clean, aborting..."
    exit 1
  fi

  zouSetupOptions+=( ---version $version)

  # io_trace "zou_main ${*@Q} -- $(print_vars zouSetupOptions[@] version zouSetupDebug)"

  startupMessage="Updating ${Brown}zou${White} setup, please wait..."
  # export zouTraceScope=true

  cd "$zouDir"
  module_run zou_run "${zouSetupOptions[@]}"
}
zou_run()
{
  # clone installer in temp directory

  local setupDir zouCheckoutType="$checkoutType"
  if [[ -z $zouSetupDebug ]]; then
    setupDir=$(mktemp -d)
    trap_add "rm -rf "$setupDir"" 0
  else
    setupDir='/home/roger/tmp'
    rm -rf "$setupDir"
  fi
  setupDir="$setupDir/zou-setup"
  # io_trace "zou_run -- $(print_vars setupDir) -- ${*@Q}"
  
  # clone installer
  gitx clone 'https://git.epsitec.ch/Build/zou.git' "$setupDir" &>/dev/null
  cd "$setupDir"

  [[ -f "$setupDir/bin/zoul-setup0" ]] || zouCheckoutType='dev'

  # activate installer
  export PATH="$setupDir/bin:$PATH"

  if [[ -z $zouSetupDebug ]]; then
    git sku enter "--$zouCheckoutType"
  else
    # copy modified scripts to setup directory
    find "$zouBinDir" -maxdepth 1 -type f -execdir cp -P -t "$setupDir/bin/" '{}' '+'
    # activate development version of setup
    git sku enter '--dev'
  fi

  # launch new setup in a subshell to take in account SKU mode
  ( zoul-setup0 "--$checkoutType" "---$zouCheckoutType" "$@" || exit $? )
}

io_banner
printf '\n'

zou_main "$@"