#!/bin/bash

ATEXIT=()
atexit() { ATEXIT+=( "$@" ); }
atexit_handler()
{
  local handler
  for handler in "${ATEXIT[@]}"; do
    eval "$handler" || :
  done
}
trap atexit_handler EXIT

main()
{
  local zouDir=$(realpath "$(dirname "${BASH_SOURCE[0]}")/..")
  local setup=$(mktemp)

  cat >"$setup" <<\EOF
#!/bin/bash

readonly NC='\e[0m' Red='\e[0;31m' Brown='\e[0;33m' Cyan='\e[0;36m'

zou_setup()
{
  local zouDir=$1
  local message="${Cyan}[zou]${NC} : ${Brown}Starting update...${NC}"
  printf '%b\n' "$message"

  cd "$zouDir"
  if test -n "$(git status --porcelain)"; then
    message="${Cyan}[zou]${NC} : ${Red}Repo '$zouDir' is not clean, aborting...${NC}"
    printf '%b\n' "$message"
  else
    message="${Cyan}[zou]${NC} : ${Cyan}Downloading, please wait...${NC}"
    printf '%b\n' "$message"
    git fetch --prune --all &>/dev/null
    git fetch --tags --force &>/dev/null
    git merge FETCH_HEAD &>/dev/null

    zoul-update
  fi
}

zou_setup "$@"
rm "$0"
EOF

  chmod u+x "$setup"
  atexit "'$setup' '$zouDir'"
}

main "$@"