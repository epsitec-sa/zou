#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_VMERGE ]] && . zoul-git-branch-vmerge
ZOUL_GIT_BRANCH_VMERGE=true

[[ -z $ZOUL_GIT_REPO ]]         && . zoul-git-repo
[[ -z $ZOUL_GIT_VBRANCH ]]      && . zoul-git-vbranch
[[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch-merge

branch_get_vbranch_name()
{
    local ltag=$(vtag_describe ${1:-HEAD})
    vtag_get_vbranch_name $ltag
}
branch_enable_vmerge()
{
  local branch=$1
  [[ -z $branch ]] && branch=$(branch_current)
  git config --file "$ZOU_FLOW_CONFIG" --unset-all vmerge.disabled $branch && \
    git update-index --add -- "$ZOU_FLOW_CONFIG" &>/dev/null && \
    git commit -m "zou-flow: enable vmerge for $branch" -- "$ZOU_FLOW_CONFIG" &>/dev/null
}
branch_disable_vmerge()
{
  local branch=$1
  [[ -z $branch ]] && branch=$(branch_current)
  git config --file "$ZOU_FLOW_CONFIG" --unset-all vmerge.disabled $branch
  git config --file "$ZOU_FLOW_CONFIG" --add vmerge.disabled $branch && \
    git update-index --add -- "$ZOU_FLOW_CONFIG" &>/dev/null && \
    git commit -m "zou-flow: disable vmerge for $branch" -- "$ZOU_FLOW_CONFIG" &>/dev/null
}
branch_list_vmerge_disabled()
{
  git config --file "$ZOU_FLOW_CONFIG" --get-all vmerge.disabled $1
}
branch_is_vmerge_disabled()
{
  local b
  for b in $(branch_list_vmerge_disabled); do
    git merge-base --is-ancestor $1^{} $b^{} &>/dev/null
    [ $? -eq 0 ] && return 0
  done
  return 1
}

branch_vmerge()
{
  local branch=${1:-HEAD}
  if branch_is_vmerge_disabled $branch; then
    io_warning "publish is disabled for branch '$branch'" "[$(repo_module_id)] $zou_command"
    return 1
  else
    local vbranch=$(branch_get_vbranch_name $branch)
    if [[ -z $vbranch ]]; then
      io_warning "'$branch' is not associated with a vbranch" "[$(repo_module_id)] $zou_command"
      return 2
    else
      branch_merge $branch $vbranch
      echo $vbranch
    fi
  fi
}
