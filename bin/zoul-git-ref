#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_REF ]] && . zoul-git-ref
ZOUL_GIT_REF=true

[[ -z $ZOUL_CORE ]] && . zoul-core

# Use the following functions to generate fallbacks for zou-flow refs (branches and vtags).
# Fallbacks can be generated to:
# - find submodule dev branch that match bundle branch
# - generate vtag matching pattern for git describe
#
# Exemple:
#   A fallback to find a matching dev branch for `sku/compta/mch/(dev|13.2)`
#   has the following form:
#
#   sku/compta/mch/(dev|13.2) ->
#     sku/compta/mch/dev
#     compta/mch/dev
#     sku/mch/dev
#     mch/dev
#     sku/dev
#     master
#
# Algorithm:
#   We first split a branch ref into an array of ref atoms:
#     sku/compta/mch/dev -> (sku compta mch dev)
#   Then we shift left array and subarray of atoms until only one element remains.
#   Finally, we combine both outputs, sort by atom count and join back them with '/' separator.

# join ref atoms with '/'
# sku sal dev -> sku/sal/dev
ref_join() { local IFS='/'; echo "$*"; }

# scan ref atoms:
#   shift left until only the last element remains
#   return each shift
# sku sal dev ->
#   sku sal dev
#   sal dev
#   dev
ref_scan_shift_left_0()
{
  local IFS=' ' i
  # io_trace "ref_scan_shift_left_0 -- ${*@Q}"
  for (( i=1; i<=$#; i++ )); do
    echo "${@:$i}"
  done
}
# scan ref atoms:
#   shift right until only the first element remains
#   return each shift
# sku sal dev ->
#   sku sal dev
#   sku sal
#   sku
ref_scan_shift_right_0()
{
  local IFS=' ' i
  # echo ref_scan_shift_right_0 "[$#] ${*@Q}" >&2
  for (( i=$#; i>0; i-- )); do
    echo "${@:1:$i}"
  done
}
# scan ref atoms:
#   keep first atom (sku, wip...) and shift left tail.
# sku compta mch dev ->
#   sku compta mch dev
#   sku mch dev
#   sku dev
ref_scan_shift_left_1()
{
  local IFS=$'\n' 
  local first=$1 i
  for i in $(ref_scan_shift_left_0 "${@:2}"); do
    echo $first $i
  done
}
# scan ref atoms:
#   keep last atom (dev, 1.0, v1.0.0) and shift right head.
# sku compta mch dev ->
#   sku compta mch dev
#   sku compta dev
#   sku dev
ref_scan_shift_right_1()
{
  local IFS=$'\n' 
  local last=${@:(-1)} i
  # negative offset won't work
  local count; (( count = $# - 1 ))
  for i in $(ref_scan_shift_right_0 "${@:1:$count}"); do
    echo $i $last
  done
}
# combine scans of ref atoms
# sku compta mch dev ->
#   scan 1
#     sku compta mch dev
#     sku compta dev
#     sku dev
#   scan 2
#     sku mch dev
ref_scan_algo()
{
  # scan 1: keep first atom and shift tail left
  ref_scan_shift_right_1 "${@}"
  # scan 2: keep last atom and shift head right
  ref_scan_shift_left_1 "${@}" | tail -n +2 | head -n -1
}
# scan ref atoms and insert count in front to be able to sort by count
# sku compta mch dev ->
#   4 sku compta mch dev
#   3 sku compta dev
#   2 sku dev
#   3 sku mch dev
ref_scan_insert_count()
{
  local IFS=$'\n' i a
  for i in $(ref_scan_algo "$@"); do
    # convert to array to compute word count (faster than using wc -w)
    IFS=' '; a=( $i )
    # insert count in front 
    # io_trace "ref_scan_insert_count -- ${#a[@]} $i"
    echo ${#a[@]} $i
  done
}
# scan ref atoms sort by count and join:
# ref_scan_sort_join sku compta mch dev ->
#   sku/compta/mch/dev
#   sku/compta/dev
#   sku/mch/dev
#   sku/dev
ref_scan_sort_join()
{
  # io_trace "ref_scan_sort_join ${*@Q}"
  if (( $# <= 1 )); then
    ref_join $@
  else
    local IFS=$'\n' a
    for a in $(ref_scan_insert_count "$@" | sort -n -s -r | cut -d' ' -f2-); do
      IFS=' '; ref_join $a
      # io_trace "ref_scan_sort_join -- $(ref_join $a)"
    done
  fi
}
# scan ref and sort by atoms count:
# ref_split_scan_join sku/compta/mch/dev ->
#   sku/compta/mch/dev
#   sku/compta/dev
#   sku/mch/dev
#   sku/dev
ref_split_scan_join()
{
  # io_trace "ref_split_scan_join ${*@Q}"
  local IFS='/' atoms
  atoms=( $1 )
  ref_scan_sort_join ${atoms[@]}
}
# split ref, convert prod branch to dev and adjust master:
# ref_dev_fallback sku/compta/mch/(dev|13.2) ->
#   sku/compta/mch/dev
#   sku/compta/dev
#   sku/mch/dev
#   sku/dev
#   master
ref_dev_fallback()
{
  local IFS='/' atoms fallback b
  atoms=( $1 ); IFS=$'\n'
  # io_trace "ref_dev_fallback 1 -- $(print_vars atoms[@])"

  if [ ${#atoms[@]} -eq 0 ]; then
    echo 'master'
    return 0
  fi
  # ignore prod branches
  [[ ${atoms[-1]} =~ ^[0-9]+\.[0-9]+$ ]] && atoms[-1]='dev'

  if [ ${#atoms[@]} -eq 1 ]; then
    case ${atoms[0]} in
    dev|master) echo 'master'; return 0;;
    sku) echo 'sku/dev';;
    *) echo ${atoms[0]};;
    esac
    echo 'master'
  elif [[ ${atoms[0]} == 'sku' ]]; then
    # SKU
    fallback=( $(ref_scan_sort_join "${atoms[@]}") )
    [[ ${fallback[-1]} != 'master' ]] && fallback+=( 'master' )
    # io_trace "ref_dev_fallback 2 -- $(print_vars fallback[@])"
    printf '%s\n' "${fallback[@]}"
  else
    # WIP
    if [ ${#atoms[@]} -ge 3 ]; then
      if [[ ${atoms[1]} == 'sku' ]]; then
        # remove atom[1] = sku
        IFS=' ' atoms=( ${atoms[0]} ${atoms[@]:2} ); IFS=$'\n'
        # io_trace "ref_dev_fallback 3.1 -- $(print_vars atoms[@])"
      fi
      for b in $(ref_scan_sort_join "${atoms[@]}"); do
        IFS='/' atoms=( $b ); IFS=' '
        if [ ${#atoms[@]} -ge 3 ]; then
          fallback+=( $(ref_join ${atoms[0]} 'sku' ${atoms[@]:1}) $b )
        else
          fallback+=( $b )
        fi
        # io_trace "ref_dev_fallback 3.2 -- $(print_vars b atoms[@] fallback[@])"
      done
    else
      fallback=( $(ref_scan_sort_join "${atoms[@]}") )
    fi

    # append sku fallback
    local sku=$(ref_wip_to_sku "${fallback[0]}")
    IFS=$'\n' fallback+=( $(ref_dev_fallback "$sku") )
    # io_trace "ref_dev_fallback 4 -- $(print_vars fallback[@])"
    printf '%s\n' "${fallback[@]}"
  fi
}
# scan ref and return tag fallback patterns
# Exemple for git describe:
# ref_tag_fallback sku/compta/mch/dev 'v[0-9]*' ->
#   sku/compta/mch/v[0-9]*
#   sku/compta/v[0-9]*
#   sku/mch/v[0-9]*
#   sku/v[0-9]*
#   v[0-9]*
ref_tag_fallback()
{
  local IFS='/' tag="${2:-v[0-9]*}" atoms fallback
  atoms=( $1 ); IFS=$'\n'
  # io_trace "ref_tag_fallback 1 -- $(print_vars tag atoms[@])"

  if [[ ${#atoms[@]} -eq 0 || ${atoms[0]} == 'master' ]]; then
    echo "$tag"
    return 0
  fi
  # ignore prod branches
  [[ ${atoms[-1]} =~ ^[0-9]+\.[0-9]+$ ]] && atoms[-1]='dev'

  if [ ${#atoms[@]} -eq 1 ]; then
    case ${atoms[0]} in
    dev|master|sku) echo "$tag"; return 0;;
    *) return 1;;
    esac
  elif [[ ${atoms[-1]} == 'dev' ]]; then
    atoms[-1]="$tag"
    IFS=$'\n'
    fallback=( $(ref_scan_sort_join "${atoms[@]}") )
    # io_trace "ref_tag_fallback 1 -- $(print_vars tag atoms[@] fallback[@])"
    [[ ${#fallback[@]} -eq 0 || ${fallback[-1]} != "$tag" ]] && fallback+=( $tag )
    # io_trace "ref_tag_fallback 2 -- $(print_vars tag atoms[@] fallback[@])"
    printf '%s\n' "${fallback[@]}"
  fi
}
ref_vtag_describe_fallback()
{
  ref_tag_fallback $1 'v[0-9]*'
}
# scan ref and return prod fallback
# ref_prod_fallback sku/compta/mch/(prod|13.2)
#   sku/sal/prod
#   sal/prod
#   sku/prod
#   prod
ref_prod_fallback()
{
  local IFS=' ';
  local atoms=( ${1//\// } )
  # accept vtags and prod branches
  if [[ ${atoms[-1]} == 'prod' ]]; then
    ref_scan_sort_join "${atoms[@]}"
  elif [[ ${atoms[-1]} =~ ^v?[0-9]+\.[0-9]+ ]]; then
    atoms[-1]="prod"
    ref_scan_sort_join "${atoms[@]}"
  else
    return 1
  fi
  echo 'prod'
}
ref_sku_to_wip()
{
  [[ -z $1 || -z $2 ]] && return 1
  
  local sku=$1 wipSuffix=${2//\//-} IFS='/' wip atoms
  atoms=( $1 ); IFS=$'\n'
  if [[ $sku == 'master' ]]; then
    echo "wip/$wipSuffix"
  elif [[ ${atoms[0]} == 'sku' ]]; then
    [ ${#atoms[@]} -gt 1 ] && atoms[-1]=$wipSuffix || atoms+=( "$wipSuffix" )
    echo "wip/$(ref_join ${atoms[@]})"
  else
    echo "$sku-$wipSuffix"
  fi
}
ref_wip_to_sku()
{
  [[ -z $1 ]] && return 1

  local wip=$1 IFS='/' sku atoms
  atoms=( $1 ); IFS=$'\n'
  if [[ ${#atoms[@]} -le 1 ]]; then
    echo 'master'
  elif [[ ${atoms[0]} == 'sku' ]]; then
    echo "$wip"
  elif [[ ${atoms[1]} != 'sku' ]]; then
    echo 'master'
  else
    # replace wip suffix with dev
    [ ${#atoms[@]} -gt 2 ] && atoms[-1]='dev' || atoms+=( 'dev' )
    # remove wip prefix
    unset atoms[0]
    echo "$(ref_join ${atoms[@]})"
  fi
}
