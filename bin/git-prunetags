#!/bin/bash

[[ -z $ZOUL_GIT_BUNDLE ]] && . zoul-git-bundle
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

ptags_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help)    zou-help $0; exit 0;;
    -v|--verbose) verbose=true;;
    -g|--global)  global=true;;
    .)            unset recursive;;
    -*)           forOpts+=($1);;
  esac; shift; done
}
ptags_run()
{
  local recursive=true global verbose forOpts=()
  ptags_parse "$@" || return $?

  startupMessage="Pruning tags, please wait..."

  if [[ $global == true ]]; then
    ptags_prune_registered_bundles_tags
  elif [[ $recursive = true ]]; then
    . git-for -a "${forOpts[@]}" -- 'ptags_node'
  else
    module_run ptags_node
  fi
}
ptags_node()
{
  if [[ $verbose == true ]]; then
    io_info "Pruning tags..." "$moduleTracePrefix"
    git tag -d $(git tag -l) &>/dev/null
    local IFS=$'\n'
    local line lines=( $(git fetch --tags 2>&1) )

    io_lock_enter
    for line in "${lines[@]}"; do
      if [[ $line =~ ^.*\[new\ tag\][[:blank:]]+(.*)$ ]]; then
        io_message_unsafe "  ${BASH_REMATCH[1]}" "$moduleTracePrefix" LightGray
      fi
    done
    io_lock_exit
  else
    git tag -d $(git tag -l) &>/dev/null
    git fetch --tags &>/dev/null
  fi
}
ptags_prune_registered_bundles_tags()
{
  local bundleRegisteredPaths
  bundle_set_registered_paths
  bundle_visit_async 'bundleRegisteredPaths[@]' git-prunetags
}

ptags_run "$@"

