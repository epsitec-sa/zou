#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync
ZOUL_GIT_BRANCH_CORE=true

[[ -z $ZOUL_GIT_REPO ]]         && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch_merge

branch_push()
{
  # l > r -- move r
  local r=$1 l=$2
  git push ${r%%/*} $l &>/dev/null
}
branch_sync() { branch_merge "$@" && branch_push "$@"; }
branch_visit_sync_info() 
{
  local visitor=$1
  local label=$2
  while read l r i; do
    case $i in
      '>')  color=Brown;;  # ahead
      '<')  color=Yellow;; # behind
      '<>') color=Yellow;; # ahead and behind
      '=')  color=Green;;
      *)
        if [[ -n $r ]]; then
          # tracking branch was deleted or renamed
          i='?'
          color=Red
        else
          # nothing tracked
          color=DarkGray
        fi;;
    esac
    local linfo="  $l"
    [[ $l == $(branch_current) ]] && linfo="* $l"
    io_message "$linfo $i $r" "$label" $color
    [[ $i == '?' ]] && {
      io_message >&2 "  remote branch $r was deleted or renamed" ''
      io_message >&2 "  rename $l and update its tracking information:" ''
      io_message >&2 "    git branch -m $l <newbranch>" '' Gray
      io_message >&2 "    git branch -u <upstream> <newbranch>" '' Gray
    }
    $visitor $r $l $i || return 1
  done < <(branch_sync_info)
}
branch_sync_all_visitor()
{
  local r=$1 l=$2 i=$3
  case $i in
    '>')  branch_push  $r $l || return 1;; # l > r ahead   -- move r
    '<')  branch_merge $r $l || return 1;; # l < r behind  -- move l
    '<>') branch_sync  $r $l || return 1;; # ahead and behind
  esac
}
branch_sync_all()
{
  local moduleId=$(repo_module_id)
  git fetch --prune --all &>/dev/null
  repo_require_clean_work_tree "synchronize [$moduleId]" || return 1
  branch_visit_sync_info branch_sync_all_visitor "[$moduleId] synchronizing"
  git submodule update --recursive
}