#!/bin/bash
# shellcheck disable=SC2034

# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync
ZOUL_GIT_BRANCH_SYNC=true

[[ -z $ZOUL_GIT_REF ]]          && . zoul-git-ref
[[ -z $ZOUL_GIT_REPO ]]         && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]]  && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch-merge

# global variables
#   branchSyncVisitInfo = ( $r $l $i )
#   syncNoPush
#   syncNoRaiseEvent

branchSyncVisitInfo=()
syncNoPush=''
syncNoRaiseEvent=''

# io_trace "branchSyncEvent=()"
branchSyncEvent=()
_branch_raise_branch_sync_event() { [[ $syncNoRaiseEvent == true ]] || raise_event 'branchSyncEvent[@]' "$@"; }

_branch_sync_push()
{
  [[ $syncNoPush == true ]] && return 0
  # l > r -- move r
  local r=$1 l=$2
  git push --follow-tags ${r%%/*} $l &>/dev/null
}
_branch_sync_merge()
{
  local r=$1 l=$2
  branch_merge "$r" "$l" &>/dev/null
}
_branch_sync_sync()
{
  local r=$1 l=$2
  branch_merge "$r" "$l" &>/dev/null && \
  _branch_sync_push "$r" "$l"
}
# scope:
#   l r i current
_branch_sync_visitor()
{
  # io_trace "_branch_sync_visitor -- $(print_vars l r i current)"
  case $i in
    '>')  _branch_sync_push  "$r" "$l" || return 1;; # l > r ahead   -- move r
    '<')  _branch_sync_merge "$r" "$l" || return 1;; # l < r behind  -- move l
    '<>') _branch_sync_sync  "$r" "$l" || return 1;; # ahead and behind
    *) return 0;;
  esac
  if [[ $l == "$current" ]]; then
    _branch_raise_branch_sync_event "$r" "$l" "$i"
  elif [[ $current ==  $(git rev-parse --short "$r") ]]; then
    branch_checkout "$l" false
  fi
}
# scope:
#   l r i current
#   pruneBranches -- delete local only branches
_branch_oreset_visitor()
{
  # io_trace ">>> _branch_reset_visitor -0- $(print_vars l r i current)"

  if [[ -z $r ]]; then
    if [[ $pruneBranches == true ]]; then
      mio_warning "Pruning branches..."
      [[ $l == $current ]] && branch_checkout 'master'
      branch_delete "$l"
    fi
    # io_trace "<<< _branch_reset_visitor -1- $(print_vars l r i current)"
    return 0
  elif ref_equals "$l" "$r"; then
    # io_trace "<<< _branch_reset_visitor -2- $(print_vars l r i current)"
    return 0
  fi
  # pull changes
  if [[ $i =~ ^\< ]] && ! _branch_sync_merge "$r" "$l"; then
    # io_trace "<<< _branch_reset_visitor -3- $(print_vars l r i current)"
    return 1
  fi
  # reset to upstream
  if [[ $l == "$current" ]]; then
    # io_trace "### _branch_reset_visitor -4- $(print_vars l r i current)"
    git reset --hard '@{u}' >/dev/null
    _branch_raise_branch_sync_event "$r" "$l" "$i"
  else
    # reset ref
    # io_trace "### _branch_reset_visitor -5- $(print_vars l r i current)"
    git update-ref "refs/heads/$l" "$r" >/dev/null
    git reset . >/dev/null
    git checkout . >/dev/null
  fi
  # io_trace "<<< _branch_reset_visitor -6- $(print_vars l r i current)"
}
_branch_sync_visit() 
{
  local visitor=$1 current=$moduleHead color l r i linfo; shift 1
  [[ -z $current ]] && current=$(branch_current)

  while read -r l r i; do
    if [[ $l == "$current" ]]; then
      linfo="* $l"
      branchSyncVisitInfo=("$r" "$l" "$i")
    elif [[ -n $r && $current ==  $(git rev-parse --short "$r") ]]; then
      branchSyncVisitInfo=("$r" "$l" "$i")
    fi
    # io_trace "### _branch_sync_visit -- $(print_vars l r i current branchSyncVisitInfo[@])"
    case $i in
      '>')  [[ $l == $current ]] && color=${Yellow}      || color=${Brown};;   # ahead
      '<')  [[ $l == $current ]] && color=${Yellow}      || color=${Brown};;   # behind
      '<>') [[ $l == $current ]] && color=${LightPurple} || color=${Purple};;  # ahead and behind
      '=')  [[ $l == $current ]] && color=${LightGreen}  || color=${Green};;
      *)    [[ -n $r ]] && { i='?'; color=${Purple}; } || color=${LightBlue};;
    esac
    $visitor || return $?
    linfo=$(string_pad_right 18 "$l")
    [[ $l == "$current" ]] && linfo="* $linfo" || linfo="  $linfo"
    [[ $syncNoPush == true && $i =~ '>' ]] && color=${DarkGray}
    mio_message "$linfo $(string_pad_right 2 $i) $r" $color
  done < <(branch_sync_info "$@")
  return 0
}
_branch_sync_fix_tracking()
{
  local deleteBrokenTrackingInfoBranches=$1 l r i
  while read -r l r i; do
    # io_trace "_branch_sync_fix_tracking -- $(print_vars l r i deleteBrokenTrackingInfoBranches)"
    [[ -z $i ]] && _branch_sync_fix_tracking_core
  done < <(branch_sync_info "$@")
}
# scope:
#   l r i
#   deleteBrokenTrackingInfoBranches
_branch_sync_fix_tracking_core()
{
  if [[ -n $r ]]; then
    # tracking branch was deleted or renamed
    if ref_is_current "$l"; then
      # detach head
      git checkout "$l^{}" &>/dev/null
    fi
    local deleteOption
    [[ $deleteBrokenTrackingInfoBranches == true ]] && deleteOption='-D' || deleteOption='-d'
    if git branch "$deleteOption" "$l" &>/dev/null; then
      mio_message "  Deleted obsolete branch '$l'" ${DarkGray}
    fi
  else
    # no tracking info

    if [[ $l =~ ^sku/ ]] || branch_is_prod "$l"; then
      # automatically push sku and prod branches
      local remote
      remote=$(git_remote)
      if [[ -n $remote ]] && ! branch_is_archived "$l" "$remote"; then
        branch_ensure_remote "$l" "$remote"
      fi
    fi
  fi
  # io_trace "_branch_sync_fix_tracking -- $(print_vars l r i color)"
}
branch_sync_all()
{
  local deleteBrokenTrackingInfoBranches=$1; shift

  git fetch --prune --all &>/dev/null
  git fetch --tags --force &>/dev/null

  branch_merge_abort
  repo_require_clean_work_tree 'Cannot synchronize' || return 1

  _branch_sync_fix_tracking "$deleteBrokenTrackingInfoBranches"

  _branch_sync_visit _branch_sync_visitor "$@"
}
branch_oreset_all()
{
  local forceReset=$1 pruneBranches=$2; shift 2
  
  git fetch --prune --all &>/dev/null
  git fetch --tags --force &>/dev/null

  branch_merge_abort
  if [[ $forceReset == true ]]; then
    git reset . >/dev/null
    git checkout . >/dev/null
    repo_list_untracked | xargs --no-run-if-empty rm
  else
    repo_require_clean_work_tree 'Cannot reset' || return 1
  fi

  # prune tags asynchronously
  ( repo_prune_tags false true ) &

  syncNoPush=true _branch_sync_visit _branch_oreset_visitor "$@"
}