#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync
ZOUL_GIT_BRANCH_SYNC=true

[[ -z $ZOUL_GIT_REPO ]]         && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch-merge

_branch_sync_push()
{
  # l > r -- move r
  local r=$1 l=$2
  git push --follow-tags ${r%%/*} $l &>/dev/null
}
_branch_sync_merge()
{
  branch_merge "$@"
}
_branch_sync_sync()
{
  _branch_sync_merge "$@" && _branch_sync_push "$@"
}
_branch_sync_visitor()
{
  local r=$1 l=$2 i=$3 hint=$4
  case $i in
    '>')  _branch_sync_push  $r $l || return 1;; # l > r ahead   -- move r
    '<')  _branch_sync_merge $r $l || return 1;; # l < r behind  -- move l
    '<>') _branch_sync_sync  $r $l || return 1;; # ahead and behind
  esac
}
_branch_sync_visit() 
{
  local visitor=$1 hint=$2; shift 2
  while read l r i; do
    $visitor $r $l $i $hint || return 1
    case $i in
      '>')  color=Brown;;  # ahead
      '<')  color=Yellow;; # behind
      '<>') color=Yellow;; # ahead and behind
      '=')  color=Green;;
      *)
        if [[ -n $r ]]; then
          # tracking branch was deleted or renamed
          i='?'
          color=Red
        else
          # nothing tracked
          if branch_is_prod "$l"; then
            # automatically track vbranches
            local remote=$(git remote)
            git push -u $remote "$l" &>/dev/null && {
              r="$remote/$l"
              i='>'
              color=Brown
            }
          else
            color=LightBlue
          fi
        fi;;
    esac
    local linfo="  $l"
    [[ $l == $(branch_current) ]] && linfo="* $l"
    io_message "$linfo $i $r" "[$moduleId]" $color
    if [[ $i == '?' && $cleanLocalBranches != true ]]; then
      io_message >&2 "  Remote branch $r was deleted or renamed." ''
      io_message >&2 "  Either rename $l and update its tracking information:" ''
      io_message >&2 "    git branch -m $l <newbranch>" '' Gray
      io_message >&2 "    git branch -u <upstream> <newbranch>" '' Gray
      io_message >&2 "  Or clean local tracked branches with:" ''
      io_message >&2 "    git sync --clean" '' Gray
    fi
  done < <(branch_sync_info "$@")
  return 0
}
branch_sync_all()
{
  local hint=$1; shift 1
  local moduleId=$(repo_module_id)

  git fetch --prune --all &>/dev/null
  git fetch --tags --force &>/dev/null
  repo_require_clean_work_tree "[$moduleId]" || return 1

  _branch_sync_visit _branch_sync_visitor "$hint" "$@"
  repo_discard_clean_submodules_async
  branch_try_attach 'HEAD' "$hint" >/dev/null || true
}