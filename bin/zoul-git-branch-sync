#!/bin/bash
# https://longair.net/blog/2009/04/16/git-fetch-and-merge/
# https://stackoverflow.com/questions/501407/is-there-a-git-merge-dry-run-option

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync
ZOUL_GIT_BRANCH_SYNC=true

[[ -z $ZOUL_GIT_REPO ]]         && . zoul-git-repo
[[ -z $ZOUL_GIT_BRANCH_CORE ]]  && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_MERGE ]] && . zoul-git-branch-merge

# global options
#   syncNoPush

branchSyncEvent=()
_branch_raise_branch_sync_event() { local handler; for handler in "${branchSyncEvent[@]}"; do $handler "$@"; done; }

_branch_sync_push()
{
  [[ $syncNoPush == true ]] && return 0
  # l > r -- move r
  local r=$1 l=$2
  git push --follow-tags ${r%%/*} $l &>/dev/null
}
_branch_sync_merge()
{
  local r=$1 l=$2
  branch_merge_sync "$r" "$l"
}
_branch_sync_sync()
{
  local r=$1 l=$2
  branch_merge_sync "$r" "$l" && \
  _branch_sync_push "$r" "$l"
}
_branch_sync_visitor()
{
  local r=$1 l=$2 i=$3 current=$4
  # ZOU_TRACE=true io_trace "_branch_sync_visitor -- $(print_vars r l i)"
  case $i in
    '>')  _branch_sync_push  "$r" "$l" || return 1;; # l > r ahead   -- move r
    '<')  _branch_sync_merge "$r" "$l" || return 1;; # l < r behind  -- move l
    '<>') _branch_sync_sync  "$r" "$l" || return 1;; # ahead and behind
    *) return 0;;
  esac
  [[ $l == $current ]] && _branch_raise_branch_sync_event "$r" "$l" "$i" || return 0
}
_branch_oreset_visitor()
{
  local r=$1 l=$2 i=$3 current=$4
  [[ -z $r || $(git rev-parse "$l") == $(git rev-parse "$r") ]] && return 0

  # ZOU_TRACE=true io_trace "_branch_reset_visitor 1 -- $(print_vars r l i current)"


  # pull changes
  [[ $i =~ ^\< ]] && { _branch_sync_merge "$r" "$l" || return 1; }
  # reset to upstream
  if [[ $l == $current ]]; then
    # prune tags asynchronously
    (
      io_warning "Pruning tags" "$moduleTracePrefix"
      git tag -d $(git tag -l) &>/dev/null
      git fetch --tags &>/dev/null
    ) &
    git reset --hard @{u} >/dev/null
    _branch_raise_branch_sync_event "$r" "$l" "$i"
  else
    # reset ref
    git update-ref "refs/heads/$l" "$r" >/dev/null
  fi

}
_branch_sync_visit() 
{
  local visitor=$1 current=$moduleBranch color l r i; shift 1
  [[ -z $current ]] && current=$(branch_current)

  while read l r i; do
    [[ $l == $current ]] && linfo="* $l"

    $visitor "$r" "$l" "$i" "$current" || return $?
    case $i in
      '>')  [[ $l == $current ]] && color=Yellow      || color=Brown;;   # ahead
      '<')  [[ $l == $current ]] && color=Yellow      || color=Brown;;   # behind
      '<>') [[ $l == $current ]] && color=LightPurple || color=Purple;;  # ahead and behind
      '=')  [[ $l == $current ]] && color=LightGreen  || color=Green;;
      *) _branch_sync_fix_tracking;;
    esac
    local linfo=$(string_pad_right 18 $l)
    [[ $l == $current ]] && linfo="* $linfo" || linfo="  $linfo"
    [[ $syncNoPush == true && $i =~ '>' ]] && color=DarkGray
    io_message "$linfo $(string_pad_right 2 $i) $r" "$moduleTracePrefix" $color
  done < <(branch_sync_info "$@")
  return 0
}
_branch_sync_fix_tracking()
{
  if [[ -n $r ]]; then
    # tracking branch was deleted or renamed - fallback to local case
    git branch --unset-upstream "$l"
    unset r
    color=LightBlue
  else
    # no tracking info
    if branch_is_prod "$l"; then
      # automatically push vbranches
      local remote=$(git_remote)
      if [[ -n $remote ]] && ! branch_is_archived "$l" "$remote" && branch_set_upstream "$l" "$remote"; then
        r="$remote/$l"; i='>'
        [[ $l == $current ]] && color=Yellow || color=Brown
      fi
    else
      # branch has no tracking info
      color=LightBlue
    fi
  fi
}
branch_sync_all()
{
  git fetch --prune --all &>/dev/null
  git fetch --tags --force &>/dev/null
  repo_require_clean_work_tree 'Cannot synchronize' || return 1

  _branch_sync_visit _branch_sync_visitor "$@"
}
branch_oreset_all()
{
  git fetch --prune --all &>/dev/null
  git fetch --tags --force &>/dev/null
  repo_require_clean_work_tree 'Cannot reset' || return 1

  syncNoPush=true _branch_sync_visit _branch_oreset_visitor "$@"
}