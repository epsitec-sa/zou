#!/bin/bash

# stow tags (apply zou-flow):
# 1. delete root tags that are already in other folder
# 2. move non semver root tags to other folder
# 3. move big patch root tags to other folder (v12.5.16460)
# 4. remove leading zeros to prerelease version (v1.2.3-rc01 -> v1.2.3-rc1 )
# 5. remove other folder's redondant tags

[[ -z $ZOUL_GIT_STOW ]]          && . zoul-git-stow
[[ -z $ZOUL_GIT_REPO ]]          && . zoul-git-repo
[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_TAG ]]           && . zoul-git-tag

stow_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -r|--recursive) recursive=true;;
    -p|--push)      stowPushTags=true;;
    -a|--all)       archive=true; stowBranches=true; stowTags=true;;
    -*) forOpts+=($1);;
  esac; shift; done
}
stow_run()
{
  local stowPushTags recursive forOpts=() \
        archive stowBranches stowTags

  stow_parse "$@" || return $?

  startupMessage="Stowing, please wait..."

  module_run stow_main
}
stow_main()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && unset recursive

  if [[ $recursive = true ]]; then
    . git-for "${forOpts[@]}" -- 'stow_node'
  else
    module_run stow_node
  fi
}
stow_node()
{
  local noTagPush=true stowArchiveDelay

  if [[ $archive == true ]]; then
    mio_message "Computing archive delay..." '' LightGray
    stow_set_archive_delay $(branch_list_all_flatten)
    mio_info "Archive delay = ${Brown}$stowArchiveDelay${Cyan} days"
  fi

  if [[ $stowBranches == true ]]; then
    mio_message "Removing redondant branches..." '' LightGray
    stow_remove_classified_branches $(branch_list_all_flatten)
    stow_remove_promoted_vbranches $(branch_list_all_flatten)
    
    mio_message "Classifying branches..." '' LightGray
    stow_classify_branches $(branch_list_all_flatten)
  fi

  if [[ $stowTags == true ]]; then
    mio_message "Removing redondant tags..." '' LightGray
    stow_remove_classified_tags $(git tag -l)
    stow_remove_promoted_vtags $(git tag -l --sort=-v:refname)
    
    mio_message "Classifying tags..." '' LightGray
    stow_classify_tags $(git tag -l)
  fi
  
  local vbranches=( $(branch_list_all_flatten) )
  mio_message "Promoting vtags..." '' LightGray
  stow_promote_vtags 'vbranches[@]' $(git tag -l --sort=-v:refname)
  stow_orphans 'vbranches[@]' $(git tag -l)

  [[ $stowPushTags == true ]] && tag_mirror
}

stow_run "$@"
