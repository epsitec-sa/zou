#!/bin/bash

# stow tags (apply zou-flow):
# 1. delete root tags that are already in other folder
# 2. move non semver root tags to other folder
# 3. move big patch root tags to other folder (v12.5.16460)
# 4. remove leading zeros to prerelease version (v1.2.3-rc01 -> v1.2.3-rc1 )
# 5. remove other folder's redondant tags

[[ -z $ZOUL_GIT_STOW ]]          && . zoul-git-stow
[[ -z $ZOUL_GIT_REPO ]]          && . zoul-git-repo
[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_TAG ]]           && . zoul-git-tag

stow_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -r|--recursive) recursive=true;;
    -p|--push)      stowPushTags=true;;
    -*) forOpts+=($1);;
  esac; shift; done
}
stow_run()
{
  local stowPushTags forceMove recursive stowSemver forOpts=()
  stow_parse "$@" || return $?

  startupMessage="Stowing tags, please wait..."

  module_run stow_main
}
stow_main()
{
  [ ${#moduleSubmodulePaths[@]} -eq 0 ] && unset recursive

  if [[ $recursive = true ]]; then
    . git-for "${forOpts[@]}" -- 'stow_node'
  else
    module_run stow_node
  fi
}
stow_node()
{
  local noTagPush=true

  stow_tags tag_move $(git tag -l)
  
  io_message "Removing duplicates..." "$moduleTracePrefix" LightGray
  stow_remove_duplicate_tags tag_delete $(git tag -l)

  local vbranches=( $(branch_list_all_flatten) )
  io_message "Promoting vtags..." "$moduleTracePrefix" LightGray
  stow_promote_vtags tag_move 'vbranches[@]' $(git tag -l)

  io_message "Processing orphans..." "$moduleTracePrefix" LightGray
  stow_orphans tag_move 'vbranches[@]' $(git tag -l)

  [[ $stowPushTags == true ]] && git-mirrortags
}

stow_run "$@"
