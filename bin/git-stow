#!/bin/bash

# stow tags (apply zou-flow):
# 1. delete root tags that are already in other folder
# 2. move non semver root tags to other folder
# 3. move big patch root tags to other folder (v12.5.16460)
# 4. remove leading zeros to prerelease version (v1.2.3-rc01 -> v1.2.3-rc1 )
# 5. remove other folder's redondant tags

[[ -z $ZOUL_GIT_CMD ]]    && . zoul-git-cmd
[[ -z $ZOUL_GIT_STOW ]]   && . zoul-git-stow
[[ -z $ZOUL_GIT_REPO ]]   && . zoul-git-repo
[[ -z $ZOUL_GIT_TAG ]]    && . zoul-git-tag

stow_parse()
{
  local args=()
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -j*)            jobsCount=${1#-j};;
    -r|--recursive) recursive=true;;
    -a|--all)       noSkuFilter=true;;
    -p|--push)      stowPushTags=true;;
    -f|--full)      stowArchive=true; stowBranches=true; stowTags=true;;
    --)             shift; break;;
    -*) io_error "unknown option '$1'"; return 1;;
    *)  args+=( "$1" );;
  esac; shift; done

  cmd_check_args "${args[@]}"
  
  stowModulePaths=( "$@" )
}
stow_run()
{
  local jobsCount recursive noSkuFilter command='stow' subcommand='do' \
        cmdScopes=( config_scope ) stowModulePaths=() \
        stowPushTags stowArchive stowBranches stowTags

  stow_parse "$@" || return $?

  startupMessage="Stowing, please wait..."

  bundle_scope stow_command
}
stow_command()
{
  # io_trace "stow_command -- $(print_vars stowModulePaths[@])"

  [ ${#stowModulePaths[@]} -eq 0 ] && stowModulePaths+=( './' )
  cmd_register_module_paths "$recursive" "${stowModulePaths[@]}"

  cmd_visit_modules
}
stow_do_prolog()
{
  local noTagPush=true stowArchiveDelay

  if [[ $stowArchive == true ]]; then
    mio_message "Computing stowArchive delay..." ${Gray}
    stow_set_archive_delay $(branch_list_all_flatten)
    mio_info "Archive delay = ${VC}$stowArchiveDelay${Cyan} days"
  fi

  if [[ $stowBranches == true ]]; then
    mio_message "Removing redondant branches..." ${Gray}
    stow_remove_classified_branches $(branch_list_all_flatten)
    stow_remove_promoted_vbranches $(branch_list_all_flatten)
    
    mio_message "Classifying branches..." ${Gray}
    stow_classify_branches $(branch_list_all_flatten)
  fi

  if [[ $stowTags == true ]]; then
    mio_message "Removing redondant tags..." ${Gray}
    stow_remove_classified_tags $(git tag -l)
    stow_remove_promoted_vtags $(git tag -l --sort=-v:refname)
    
    mio_message "Classifying tags..." ${Gray}
    stow_classify_tags $(git tag -l)
  fi
  
  local vbranches=( $(branch_list_all_flatten) )
  mio_message "Promoting vtags..." ${Gray}
  stow_promote_vtags 'vbranches[@]' $(git tag -l --sort=-v:refname)
  stow_orphans 'vbranches[@]' $(git tag -l)

  [[ $stowPushTags == true ]] && tag_mirror
}

stow_run "$@"
