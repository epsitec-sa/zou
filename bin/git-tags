#!/bin/bash

. zoul-core
. zoul-git-tag

while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help) zou-help $0; exit 0;;
  --sync)   syncTags=true;;
  --prune)  pruneTags=true;;
  --mirror) mirrorTags=true;;
  -*) echo "unknown option: $1" >&2; exit 1;;
esac; shift; done

fill_map()
{
  # echo fill_map "${*@Q}"
  local map=$1 row; shift
  for row in "$@"; do
    eval "$map[${row% *}]=${row#* }"
  done
}

moduleId=$(repo_module_id)

declare -A ltags
IFS=$'\n' rows=( $(git show-ref --tags) )
fill_map 'ltags' "${rows[@]}"

declare -A rtags
IFS=$'\n' rows=( $(git ls-remote --tags --refs 2>/dev/null | tr -s [:blank:] ' ') )
fill_map 'rtags' "${rows[@]}"

for key in ${!ltags[@]}; do
  # synchronized
  ltag=${ltags[$key]}
  rtag=${rtags[$key]}
  if [[ $ltag == $rtag ]]; then
    io_message "${ltag#refs/tags/}" "[$moduleId]" Green
    unset ltags[$key]
    unset rtags[$key]
  fi
done

for key in ${!ltags[@]}; do
  # local only
  ltag=${ltags[$key]}
  tag=${ltag#refs/tags/}
  if [[ $pruneTags == true ]]; then
    git tag --delete $tag &>/dev/null
    io_info "Deleted local tag '$tag'." "[$moduleId]"
  elif [[ $syncTags == true ]]; then
    tag_push_not_followed $ltag $ltag^{} ||\
    io_info "Skipped local only tag '$tag' (underlying commit has not yet been pushed)." "[$moduleId]"
  else
    io_message "$tag" "[$moduleId]" Blue
  fi
done

for key in ${!rtags[@]}; do
  # remote only
  rtag=${rtags[$key]}
  tag=${rtag#refs/tags/}
  if [[ $mirrorTags == true ]]; then
    git push --delete origin $tag &>/dev/null
    io_info "Deleted remote tag '$tag'." "[$moduleId]"
  elif [[ $syncTags == true ]]; then
    git fetch origin +$rtag:$rtag &>/dev/null
    io_info "Fetched remote tag '$tag'." "[$moduleId]"
  else
    io_message "$tag" "[$moduleId]" Purple
  fi
done
