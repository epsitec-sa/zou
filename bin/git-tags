#!/bin/bash

[[ -z $ZOUL_CORE ]]       && . zoul-core
[[ -z $ZOUL_GIT_CORE ]]   && . zoul-git-core
[[ -z $ZOUL_GIT_TAG ]]    && . zoul-git-tag
[[ -z $ZOUL_GIT_VTAG ]]   && . zoul-git-vtag
[[ -z $ZOUL_GIT_MODULE ]] && . zoul-git-module

tags_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -r|--recursive) recursive=true;;
    -v|--vtags)     vtagsOnly=true;;
    --sync)         syncTags=true;;
    --prune)        pruneTags=true;;
    --mirror)       mirrorTags=true;;
    -*) forOpts+=($1);;
  esac; shift; done
}
tags_run()
{
  local recursive vtagsOnly syncTags pruneTags mirrorTags forOpts=()
  tags_parse "$@" || return $?
  
  if [[ $recursive = true ]]; then
    . git-for -v:0 "${forOpts[@]}" -- 'tags_node'
  else
    module_run tags_node
  fi
}
tags_node()
{
  declare -A ltags
  IFS=$'\n' rows=( $(git show-ref --tags) ); IFS=$OIFS
  tags_fill_map 'ltags' "${rows[@]}"

  declare -A rtags
  IFS=$'\n' rows=( $(git ls-remote --tags --refs 2>"$stderrRedir" | tr -s [:blank:] ' ') ); IFS=$OIFS
  tags_fill_map 'rtags' "${rows[@]}"

  local ltag rtag tag lrTags lrKeys lotags rotags prtags mitags sytags

  lrTags=()
  lrKeys=()
  for key in ${!ltags[@]}; do
    ltag=${ltags[$key]}
    rtag=${rtags[$key]}
    if [[ $ltag == $rtag ]]; then
      lrKeys+=( "$key" )
      lrTags+=( "${ltag#refs/tags/}" )
      unset ltags[$key]
      unset rtags[$key]
    fi
  done
  for tag in $(array_sort_descending 'lrTags[@]'); do
    mio_success "$tag"
  done

  # process local only tags
  syTags=()
  prTags=()
  loTags=()
  for key in ${!ltags[@]}; do
    ltag=${ltags[$key]}
    tag=${ltag#refs/tags/}
    if [[ $pruneTags == true ]]; then
      prTags+=( $tag )
    elif [[ $syncTags == true ]]; then
      syTags+=( $tag )
    else
      loTags+=( $tag )
    fi
  done

  for tag in $(array_sort_descending 'syTags[@]'); do
    tag_push_not_followed $tag $tag^{} || localOnlyTags+=( $tag )
    # mio_info "Skipped local only tag '$tag' (underlying commit has not yet been pushed)."
  done
  for tag in $(array_sort_descending 'prTags[@]'); do
    git tag --delete $tag &>"$stdallRedir"
    mio_warning "Deleted local tag '$tag'."
  done
  for tag in $(array_sort_descending 'loTags[@]'); do
    mio_message "$tag" ${LightBlue}
  done

  # process remote only tags
  miTags=()
  syTags=()
  roTags=()
  for key in ${!rtags[@]}; do
    rtag=${rtags[$key]}
    tag=${rtag#refs/tags/}
    if [[ $mirrorTags == true ]]; then
      miTags+=( $tag )
    elif [[ $syncTags == true ]]; then
      syTags+=( $rtag )
    else
      roTags+=( $tag )
    fi
  done

  for tag in $(array_sort_descending 'miTags[@]'); do
    git push --delete origin $tag &>"$stdallRedir"
    mio_info "Deleted remote tag '$tag'."
  done
  for rtag in $(array_sort_descending 'syTags[@]'); do
    git fetch origin +$rtag:$rtag &>"$stdallRedir"
    mio_info "Fetched remote tag '${rtag#refs/tags/}'."
  done
  for tag in $(array_sort_descending 'roTags[@]'); do
    mio_message "$tag" ${Purple}
  done
}
tags_fill_map()
{
  # echo tags_fill_map "${*@Q}"
  local map=$1 row sha ref tag; shift
  for row in "$@"; do
    ref=${row#* }
    tag=${ref#refs/tags/}
    if [[ $vtagsOnly == true ]]; then
      ref_is_other $tag && continue
      ! vtag_is_semver $tag && continue
    fi
    sha=${row% *}
    eval "$map[$sha]=$ref"
  done
}

tags_run "$@"
