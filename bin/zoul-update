#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_UPDATE ]] && . zoul-update
ZOUL_UPDATE=true

[[ -z $ZOUL_CONFIG ]]          && . zoul-config
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_PROD ]]        && . zoul-git-prod
[[ -z $ZOUL_GIT_MODULE ]]      && . zoul-git-module
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

zou_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -z|--zou-only)      zouOnly=true;;
    -u|--no-prune-tags) noPruneTags=true;;
    ---version)         actualVersion=$2; shift;;
    --vnext)            skuArgs+=($1);;
    --dev)              skuArgs+=($1);;
    -*) io_error "unknown option '$1'"; return 1;;
  esac; shift; done
}

zou_update()
{
  module_run _zou_update_core "$@"
}

_zou_update_core()
{
  local resetConfig zouOnly noPruneTags actualVersion skuArgs=()
  zou_parse "$@" || return $?

  # io_trace "_zou_update_core -- $(print_vars resetConfig zouOnly noPruneTags actualVersion skuArgs[@])"

  config_setup
  config_migrate_registered_bundles

  printf '\n'
  if [[ $zouOnly == true || "$bundleRoot" == "$PWD" ]]; then
    # zou repo alone, fetch has already been done
    git-sku enter "${selectArgs[@]}"
  else
    # zou repo inside zou-dev bundle
    module_visit "$bundleRoot" _zou_update_bundle "${skuArgs[@]}"
  fi
  _zou_register_bundles
  _zou_prune_tags
  _zou_update_epilog
}
_zou_update_bundle()
{
  git-sync -r --pull --clean
  git-sku enter "$@"
}
_zou_register_bundles()
{
  git-bundler --scan
}
_zou_prune_tags()
{
  [[ $noPruneTags == true ]] && return 0
  git-prunetags --global
}
_zou_update_epilog()
{
  printf '\n'

  local vtag delta version
  vtag_set_describe $moduleHead
  io_set_version
  local tracePrefix="${Cyan}[zou]${NC}" traceVersion traceMessage
  if [[ $actualVersion == $version ]]; then
    if [ $delta -eq 0 ]; then
      traceVersion="no changes, still using version ${Green}$version${Brown}"
    else
      traceVersion="switched to development version ${Green}$version${Brown}, ${LightPurple}$delta${Brown} commit[s] ahead"
    fi
  else
    traceVersion="switched to new version ${Green}$version${Brown}"
  fi
  traceMessage="Update finished ($traceVersion)."
  io_warning "$traceMessage" "$tracePrefix"
  io_warning "Press [Enter] to continue..." "$tracePrefix"
}

zou_update "$@"
