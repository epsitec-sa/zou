#!/usr/bin/env bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_UPDATE ]] && . zoul-update
ZOUL_UPDATE=true

[[ -z $ZOUL_CONFIG ]]          && . zoul-config
[[ -z $ZOUL_GIT_VTAG ]]        && . zoul-git-vtag
[[ -z $ZOUL_GIT_PROD ]]        && . zoul-git-prod
[[ -z $ZOUL_GIT_MODULE ]]      && . zoul-git-module
[[ -z $ZOUL_GIT_BRANCH_CORE ]] && . zoul-git-branch-core
[[ -z $ZOUL_GIT_BRANCH_SYNC ]] && . zoul-git-branch-sync

zou_parse()
{
  local noConfig
  while [[ "$#" > 0 ]]; do case "$1" in
    -z|--zou-only)      zouOnly=true;;
    -u|--no-prune-tags) noPruneTags=true;;
    -c|--no-config)     noConfig=true;;
    ---version)         actualVersion=$2; shift;;
    --vnext)            skuArgs+=($1);;
    --dev)              skuArgs+=($1);;
    -*) io_error "unknown option '$1'"; return 1;;
  esac; shift; done

  if [[ -z $noConfig ]]; then
    bundlerOpts+=( --hooks --external --quiet )
  fi
}

zou_update()
{
  [[ -n $zouFakeUpdate ]] && io_trace "[FAKE UPDATE] zou_update -- \$0='$0' PWD='$PWD'"
  [[ -n $zouFakeUpdate ]] && io_trace "[FAKE UPDATE] zou_update -- ${*@Q}"
  module_run _zou_update_core "$@"
}

_zou_update_core()
{
  local zouOnly noPruneTags bundlerOpts=( --scan ) actualVersion version skuArgs=()
  zou_parse "$@" || return $?
  io_set_version

  [[ -n $zouFakeUpdate ]] && io_trace "[FAKE UPDATE] zou_update -- $(print_vars zouOnly noPruneTags noConfig)"
  [[ -n $zouFakeUpdate ]] && io_trace "[FAKE UPDATE] zou_update -- $(print_vars actualVersion version skuArgs)"

  config_setup
  config_migrate_registered_bundles

  if [[ -z $zouFakeUpdate ]]; then
    if [[ $zouOnly == true || "$bundleRoot" == "$PWD" ]]; then
      git-sync -r --pull --clean
      git-sku enter "${skuArgs[@]}"
    else
      # zou repo inside zou-dev bundle
      module_visit "$bundleRoot" _zou_update_bundle "${skuArgs[@]}"
    fi
    _zou_register_bundles
    _zou_prune_tags
    ( _zou_setup_chicken )
  else
    # FAKE UPDATE
    io_trace "[FAKE UPDATE] zou_update -- $(print_vars zouBinDir) PWD='$PWD'"
    if [[ $zouOnly == true || "$bundleRoot" == "$PWD" ]]; then
      io_trace "[FAKE UPDATE] git-sync -r --pull --clean"
      io_trace "[FAKE UPDATE] git-sku enter ${skuArgs[*]@Q}"
    else
      # zou repo inside zou-dev bundle
      module_visit "$bundleRoot" _zou_update_bundle_fake "${skuArgs[@]}"
    fi
  fi
  _zou_update_epilog
}
_zou_update_bundle()
{
  git-sync -r --pull --clean
  git-sku enter "$@"
}
_zou_update_bundle_fake()
{
  io_lock_enter
  io_trace_unsafe "[FAKE UPDATE] git-sync -r --pull --clean"
  io_trace_unsafe "[FAKE UPDATE] git-sku enter ${*@Q}"
  io_lock_exit
}
_zou_register_bundles()
{
  git-bundler "${bundlerOpts[@]}"
}
_zou_prune_tags()
{
  [[ $noPruneTags == true ]] && return 0
  git-prunetags --global
}
_zou_setup_chicken()
{
  local develDir=$(abspath "$bundleRoot/..")
  local chickenDir=$develDir/zou.chicken
  # io_trace "_zou_setup_chicken -- $(print_vars chickenDir)"
  if [ -d "$chickenDir" ]; then
    cd "$chickenDir"
    git sync
  else
    local tracePrefix="${Cyan}[zou.chicken]${NC}"
    io_warning "Installing zou.chicken into ${VC}$chickenDir${Brown}" "$tracePrefix"
    io_warning "This can take a while, please be patient..." "$tracePrefix"
    git clonex -C "$develDir" 'https://git.epsitec.ch/Build/zou.chicken.git'
    nuget sources remove -name chicken &>>"$stdallRedir"
    sys_windows && chickenDir="$(cygpath -w "$chickenDir")"
    nuget sources add -name chicken -source "$chickenDir" &>>"$stdallRedir"
  fi
}
_zou_update_epilog()
{
  local vtag delta
  vtag_set_describe $moduleHead
  # io_trace "_zou_update_epilog -- $(print_vars vtag delta)"
  local tracePrefix="${Cyan}[zou]${NC}" traceVersion traceMessage
  if [[ $actualVersion == $version ]]; then
    if [ $delta -eq 0 ]; then
      traceVersion="no changes, still using version ${Green}$version${Brown}"
    else
      traceVersion="switched to development version ${Green}$version${Brown}, ${Magenta}$delta${Brown} commit[s] ahead"
    fi
  else
    traceVersion="switched to new version ${Green}$version${Brown}"
  fi
  traceMessage="Update finished ($traceVersion)."
  
  io_warning "$traceMessage" "$tracePrefix"
  io_warning "Press [Enter] to continue..." "$tracePrefix"
}

zou_update "$@"
