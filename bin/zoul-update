#!/bin/bash

# Use the following statement to include current lib only once
#   [[ -z $ZOUL_UPDATE ]] && . zoul-update
ZOUL_UPDATE=true

[[ -z $ZOUL_CORE ]]              && . zoul-core
[[ -z $ZOUL_CONFIG ]]            && . zoul-config
[[ -z $ZOUL_GIT_MODULE ]]        && . zoul-git-module
[[ -z $ZOUL_GIT_BRANCH_SELECT ]] && . zoul-git-branch-select

zou_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -z|--zou-only)      zouOnly=true;;
    -u|--no-prune-tags) noPruneTags=true;;
    ---version)         actualVersion=$2; shift;;
    *)                  selectArgs+=($1);;
  esac; shift; done
}

zou_update()
{
  local resetConfig zouOnly noPruneTags actualVersion selectArgs=()
  unset 
  zou_parse "$@"
  
  config_setup

  if [[ $zouOnly == true || "$bundleRoot" == "$PWD" ]]; then
    # zou repo alone, fetch has already been done
    . git-select "${selectArgs[@]}"
  else
    # zou repo inside zou-dev bundle
    module_visit "$bundleRoot" zou_update_bundle "${selectArgs[@]}"
  fi
  zou_update_prune_tags
  zou_update_epilog
}
zou_update_bundle()
{
  . git-sync --pull --clean

  . git-select "$@"
}
zou_update_prune_tags()
{
  [[ $noPruneTags == true ]] && return 0
  git-prunetags -g
}
zou_update_epilog()
{
  printf '\n'

  local vtag delta alias version
  vtag_set_info $(vtag_describe $moduleBranch)
  io_set_version
  local tracePrefix="${Cyan}[zou]${NC}" traceVersion traceMessage
  if [[ $actualVersion == $version ]]; then
    if [ $delta -eq 0 ]; then
      traceVersion="no changes, still using version ${Green}$version${Brown}"
    else
      traceVersion="switched to development version ${Green}$version${Brown}, ${LightPurple}$delta${Brown} commit[s] ahead"
    fi
  else
    traceVersion="switched to new version ${Green}$version${Brown}"
  fi
  traceMessage="Update finished ($traceVersion)."
  io_warning "$traceMessage" "$tracePrefix"
}

module_run zou_update "$@"
