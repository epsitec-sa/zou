#!/bin/bash

[[ -z $ZOUL_LOCK ]]               && . zoul-lock
[[ -z $ZOUL_GIT_VTABLE ]]         && . zoul-git-vtable
[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG_SKU ]]     && . zoul-git-config-sku
[[ -z $ZOUL_GIT_CONFIG_SELECT ]]  && . zoul-git-config-select

vtable_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    -h|--help) zou-help $0; exit 0;;
    -a|--all)             all=true;;
    -e|--stop-on-error)   stopOnError=true;;
    -j*)                  jobsCount=${1#-j};;
    -c|--commit)          commitVTable=true;;
    -*) io_error "unknown option '$1'"; return 1;;
  esac; shift; done
}
vtable_run()
{
  local jobsCount stopOnError all commitVTable
  vtable_parse "$@" || return $?
  
  startupMessage="Creating version table, please wait..."

  module_run vtable_main
}
vtable_main()
{
  local vtableGate vtableLookupPath
  vtableGate=$(lock_init)
  vtableLookupPath="$(mktemp)"
  vtable_init "$startupRoot" "$vtableLookupPath"
  vtable_tree
}
vtable_tree()
{
  vtable_submodules
  if [[ "$PWD" == "$startupRoot" ]]; then
    vtable_commit_vtable
  else
    vtable_update_vtable
  fi
}
vtable_commit_vtable()
{
  vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath" "$vtableGate" "$commitVTable" \
  && io_success "Created version table" "$moduleTracePrefix" \
  || io_success "No change in the version table" "$moduleTracePrefix"
}
vtable_update_vtable()
{
  vtable_update "$startupRoot" "$moduleId" "$vtableLookupPath" "$vtableGate"
  io_info "Updated version table" "$moduleTracePrefix"
}
vtable_submodules()
{
  local vtableSkuInclude
  [[ $all == true ]] && vtableSkuInclude="${moduleSubmodulePaths[@]}" || vtableSkuInclude=$(config_sku_list_included)
  module_visit_submodules_async 'vtableSkuInclude[@]' vtable_tree
}

vtable_run "$@"