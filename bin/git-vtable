#!/bin/bash

[[ -z $ZOUL_LOCK ]]            && . zoul-lock
[[ -z $ZOUL_GIT_VTABLE ]]      && . zoul-git-vtable
[[ -z $ZOUL_GIT_CONFIG_SKU ]]  && . zoul-git-config-sku

jobsCount=16
while [[ "$#" > 0 ]]; do case "$1" in
  -h|--help) zou-help $0; exit 0;;
  -q|--quiet) quiet=true;;
  -a|--all)   all=true;;
  -j*)        jobsCount=${1#-j};;
  -*) echo "unknown option: $1" >&2; exit 1;;
esac; shift; done

vtable_submodules()
{
  local branch=$(branch_current) configFile include exclude path mroot=$PWD ec=0
  configFile=$(repo_zouflow_path "$mroot") || return $?
  [[ $all == true ]] && include=( $(repo_list_submodule_paths) ) || include=( $(config_sku_list_included "$branch" "$configFile") )
  for path in $(array_sort include[@]); do
    (
      cd "$mroot/$path" || {
        io_error "cd $mroot+$path" "[$moduleId]"
        return 1
      }
      vtable_tree || return $?
    ) &
    if (( $(wc -w <<<$(jobs -p)) % $jobsCount == 0 )); then wait; fi
  done
  wait
}
vtable_tree()
{
  [[ $quiet == true ]] || echo Entering "'$(path_make_relative '.' "$startupDir")'"
  local moduleId=$(repo_module_id)
  vtable_submodules
  if [[ "$PWD" == "$startupRoot" ]]; then
    vtable_update "$startupRoot" "$moduleId" "$lookupPath"
  else
    lock "$lockDir" 0.1 vtable_update "$startupRoot" "$moduleId" "$lookupPath"
  fi
}

startupDir=$PWD
startupRoot=$(repo_module_root)
cd "$startupRoot"
lockDir=$(mktemp -u)
lookupPath="$(mktemp)"
vtable_init "$startupRoot" "$lookupPath"
vtable_tree
