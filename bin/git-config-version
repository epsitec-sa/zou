#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version
[[ -z $ZOUL_GIT_REPO ]]           && . zoul-git-repo

set -f

cver_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; args+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -r|--recursive)           recursive=true;;
    --vp=*|--version-props=*) versionProps+=("${1#*=}");;
    --ai=*|--assembly-info=*) assemblyInfo+=("${1#*=}");;
    --cs=*|--csproj=*)        csProj+=("${1#*=}");;
    --rc=*)                   rc+=("${1#*=}");;
    --pj|--package-json)      packageJson+=('./package.json');;
    --vp|--version-props)     versionProps+=('./Version.props');;
    --ai|--assembly-info)     assemblyInfo+=('*/AssemblyInfo*.cs');;
    --cs|--csproj)            csProj+=('*/*.csproj');;
    --rc)                     rc+=('*/*.rc');;
    --custom)                 customDir='.';;
    --no-edit)                noEdit=true;;
    --remove)                 action='remove';;
    -*) io_error "unknown option: $1"; exit 1;;
  esac; shift; done
}
cver_run()
{
  local recursive packageJson=() versionProps=() assemblyInfo=() csProj=() rc=() \
        customDir noEdit action='add'
  cver_parse "$@" || return $?

  if [[ $recursive = true ]]; then
    . git-for -- 'cver_list'
  else
    module_run cver_main
  fi

}
cver_list()
{
  local spec key value message IFS=$'\n'
  for spec in $(version_list_file_spec_all); do
    key=${spec% *}
    key=${key#update-version.}
    value=${spec#* }
    key=$(string_pad_left 13 $key)
    message="${LightCyan}${key}${NC} = ${Green}$value${NC}"
    io_message "$message" "$moduleTracePrefix" Green
  done
}
cver_main()
{
  if [ ${#versionProps[@]} -ne 0 ]; then
    version_${action}_version_props "${versionProps[@]}"
  fi
  if [ ${#assemblyInfo[@]} -ne 0 ]; then
    version_${action}_assembly_info "${assemblyInfo[@]}"
  fi
  if [ ${#csProj[@]} -ne 0 ]; then
    version_${action}_csproj "${csProj[@]}"
  fi
  if [ ${#rc[@]} -ne 0 ]; then
    version_${action}_rc "${rc[@]}"
  fi
  if [ ${#packageJson[@]} -ne 0 ]; then
    version_${action}_package_json "${packageJson[@]}"
  fi

  if [[ -n $customDir ]]; then
    local customFile=$(version_create_custom "$customDir")
    if [[ -n $customFile ]]; then
      local command=$(git config core.editor)
      if [[ $noEdit == true ]]; then
        io_info    "Modify the version updater script with the following command" "$moduleTracePrefix"
        io_message "  $command '$customFile'" "$moduleTracePrefix" Gray
      else
        eval "$command '$customFile'"
      fi
    fi
  fi

  cver_list
}

cver_run "$@"

set +f
