#!/bin/bash

[[ -z $ZOUL_GIT_MODULE ]]         && . zoul-git-module
[[ -z $ZOUL_GIT_CONFIG_VERSION ]] && . zoul-git-config-version
[[ -z $ZOUL_GIT_REPO ]]           && . zoul-git-repo

set -f

cver_parse()
{
  while [[ "$#" > 0 ]]; do case "$1" in
    --) shift; args+=("$@"); break;;
    -h|--help) zou-help $0; exit 0;;
    -r|--recursive)           recursive=true;;
    --vp=*|--version-props=*) versionProps+=("${1#*=}");;
    --ai=*|--assembly-info=*) assemblyInfo+=("${1#*=}");;
    --cs=*|--csproj=*)        csProj+=("${1#*=}");;
    --rc=*)                   rc+=("${1#*=}");;
    --rc-mmop=*)              rcMmop+=("${1#*=}");;
    --pj|--package-json)      packageJson+=('package.json''*/package.json');;
    --vp|--version-props)     versionProps+=('Version.props' '*/Version.props');;
    --ai|--assembly-info)     assemblyInfo+=('*AssemblyInfo*.cs');;
    --cs|--csproj)            csProj+=('*.csproj');;
    --rc)                     rc+=('*.rc');;
    --rc-mmop)                rcMmop+=('*.rc');;
    --custom)                 customDir='.';;
    --no-edit)                noEdit=true;;
    --remove)                 action='remove';;
    --auto)                   autoConfigVersion=true;;
    --reset)                  resetConfigVersion=true;;
    -*)                       forOpts+=($1);;
  esac; shift; done
}
cver_run()
{
  local recursive forOpts=() \
        versionProps=() assemblyInfo=() csProj=() rc=() rcMmop=() packageJson=() \
        customDir noEdit action='add' \
        autoConfigVersion resetConfigVersion

  cver_parse "$@" || return $?

  if [[ $recursive = true ]]; then
    . git-for "${forOpts[@]}" -- 'cver_main'
  else
    module_run cver_main
  fi
}
cver_main()
{
  if [[ $resetConfigVersion == true ]]; then
    version_config_reset
  fi
  if [[ $autoConfigVersion == true ]]; then
    version_config_auto
  elif [[ $recursive != true ]]; then
    if [ ${#versionProps[@]} -ne 0 ]; then
      version_${action}_file_spec 'version-props' "${versionProps[@]}"
    fi
    if [ ${#assemblyInfo[@]} -ne 0 ]; then
      version_${action}_file_spec 'assembly-info' "${assemblyInfo[@]}"
    fi
    if [ ${#csProj[@]} -ne 0 ]; then
      version_${action}_file_spec 'csproj' "${csProj[@]}"
    fi
    if [ ${#rc[@]} -ne 0 ]; then
      version_${action}_file_spec 'rc' "${rc[@]}"
    fi
    if [ ${#rcMmop[@]} -ne 0 ]; then
      version_${action}_file_spec 'rc-mmop' "${rc[@]}"
    fi
    if [ ${#packageJson[@]} -ne 0 ]; then
      version_${action}_file_spec 'package-json' "${packageJson[@]}"
    fi

    if [[ -n $customDir ]]; then
      local customFile=$(version_create_custom "$customDir")
      if [[ -n $customFile ]]; then
        local command=$(git config core.editor)
        if [[ $noEdit == true ]]; then
          mio_info    "Modify the version updater script with the following command"
          mio_message "  $command '$customFile'" ${Gray}
        else
          eval "$command '$customFile'"
        fi
      fi
    fi
  fi

  cver_list
}
cver_list()
{
  local spec key value message specs
  IFS=$'\n' specs=( $(version_list_all_files) ); IFS=$OIFS
  io_lock_enter
  for spec in "${specs[@]}"; do
    key=${spec%% *}
    key=${key#update-version.}
    value=${spec#* }
    key=$(string_pad_left 13 $key)
    message="${LightCyan}${key}${NC} = ${Green}$value${NC}"
    mio_info_unsafe "$message"
  done
  if [ -f update-version ]; then
    message="${LightCyan}$(string_pad_left 13 custom)${NC} = ${Brown}update-version${NC}"
    mio_info_unsafe "$message"
  fi
  io_lock_exit
}

cver_run "$@"

set +f
