<!--
By default '.xml' and '.manifest' files are excluded from bin.
To keep them add the following code in the project.pack.msbuildproj:

  <Target Name="PackFilter">
    <ItemGroup>
      <ProdBinExclude Remove="$(OutDir)**\*.xml" />
      <ProdBinExclude Remove="$(OutDir)**\*.manifest" />
    </ItemGroup>
  </Target>
-->
<Project DefaultTargets="PackBuild">

  <PropertyGroup>
    <ForwardOutDir Condition="'$(ForwardOutDir)' == ''">$(OutDir)</ForwardOutDir>
  </PropertyGroup>

  <Target Name="PackCreateDefault">
    <!-- Default includes and excludes -->
    <ItemGroup>
      <ProdBinInclude Include="$(OutDir)**\*" />
      <ProdBinExclude Include="$(OutDir)**\*.pdb" />
      <ProdBinExclude Include="$(OutDir)**\*.map" Exclude="$(OutDir)**\node_modules\**\*.map"/>
      <ProdBinExclude Include="$(OutDir)**\*.lib" />
      <ProdBinExclude Include="$(OutDir)**\*.exp" />
      <ProdBinExclude Include="$(OutDir)**\*.bsc" />
      <ProdBinExclude Include="$(OutDir)**\*.ilk" />
      <ProdBinExclude Include="$(OutDir)**\*.cod" />
      <ProdBinExclude Include="$(OutDir)**\*.xml" />
      <ProdBinExclude Include="$(OutDir)**\*.manifest" />
      <!-- Exclude Visual Leak Detector in release mode -->
      <ProdBinExclude Include="$(OutDir)vld_x86.dll" Condition="'$(Configuration)'=='Release' And Exists('$(OutDir)vld_x86.dll')" />
      <ProdBinExclude Include="$(OutDir)vld.ini"     Condition="'$(Configuration)'=='Release' And Exists('$(OutDir)vld.ini')" />
    </ItemGroup>
  </Target>

  <Target Name="PackCreate" DependsOnTargets="PackCreateDefault;PackFilter">
    <!-- Dispatch package content to respective folders -->
    <ItemGroup>
      <PackCopyFile Include="@(ProdBinInclude)" Exclude="@(ProdBinExclude)" Condition="'$(OutDir)' != '$(PkgBinDir)'">
        <ImportDir>$(PkgBinDir)</ImportDir>
      </PackCopyFile>
      <PackCopyFile Include="@(ProdBinExclude)" Condition="'$(OutDir)' != '$(PkgDbgDir)'">
        <ImportDir>$(PkgDbgDir)</ImportDir>
      </PackCopyFile>
      <PackDeleteFile Include="@(ProdBinExclude)" Condition="'$(OutDir)' == '$(PkgBinDir)' And '$(OutDir)' != '$(PkgDbgDir)'" />
    </ItemGroup>
  </Target>

  <Target Name="PackDeleteAll" DependsOnTargets="PackCreate">
    <Delete  Files="%(PackCopyFile.ImportDir)%(RecursiveDir)%(FileName)%(Extension)" />
    <Message Importance="high" Text="[-] %(PackCopyFile.ImportDir)%(RecursiveDir)%(FileName)%(Extension)" Condition="Exists('%(PackCopyFile.ImportDir)%(RecursiveDir)%(FileName)%(Extension)')"/>
  </Target>

  <Target Name="PackCopy" DependsOnTargets="PackCreate" Inputs="@(PackCopyFile)" Outputs="@(PackCopyFile->'%(ImportDir)%(RecursiveDir)%(FileName)%(Extension)')">
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />
    <Copy SourceFiles="@(PackCopyFile)" DestinationFiles="@(PackCopyFile->'%(ImportDir)%(RecursiveDir)%(FileName)%(Extension)')"  />
    <Message Importance="high" Text="[+] %(PackCopyFile.RecursiveDir)%(FileName)%(Extension) =&gt; %(ImportDir)%(RecursiveDir)" />
  </Target>

  <Target Name="PackBuild" AfterTargets="Build"  DependsOnTargets="ImportProject;PackCopy">
    <Delete Files="@(PackDeleteFile)" />
  </Target>
  <Target Name="PackClean" BeforeTargets="Clean" DependsOnTargets="PackDeleteAll;ImportProjectClean">
  </Target>

  <Import Project="ImportProject.targets" />
  <Target Name="_ImportProject" />
  <Target Name="_ImportProjectClean" />

  <Import Project="Sign.targets" Condition="'$(SignTargetsImported)' == ''" />
  <Import Project="Wim.targets"  Condition="'$(WimTargetsImported)'  == ''" />
  <Import Project="Zip.targets"  Condition="'$(ZipTargetsImported)'  == ''" />
</Project>
