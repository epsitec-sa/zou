<!--
By default '.xml' and '.manifest' files are excluded from bin.
To keep them add the following code in the project.pack.msbuildproj:

  <Target Name="PackFilter">
    <ItemGroup>
      <ProdBinExclude Remove="$(PackSourceDir)**\*.xml" />
      <ProdBinExclude Remove="$(PackSourceDir)**\*.manifest" />
    </ItemGroup>
  </Target>
-->
<Project DefaultTargets="PackBuild">

  <PropertyGroup>
    <ForwardOutDir Condition="'$(ForwardOutDir)' == ''">$(OutDir)</ForwardOutDir>
  </PropertyGroup>

  <Import Project="Import.targets" />

  <Target Name="PackCreateDefault">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] PackCreateDefault($(OutDir))" />

    <!-- Default includes and excludes -->
    <ItemGroup>
      <ProdBinInclude Include="$(PackSourceDir)**\*" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.pdb" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.map" Exclude="$(PackSourceDir)**\node_modules\**\*.map"/>
      <ProdBinExclude Include="$(PackSourceDir)**\*.lib" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.exp" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.bsc" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.ilk" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.cod" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.xml" />
      <ProdBinExclude Include="$(PackSourceDir)**\*.manifest" />
      <ProdBinExclude Include="$(PackSourceDir)**\launchSettings.json" />
    </ItemGroup>
    <ItemGroup Condition="'$(Configuration)'=='Release'">
      <!-- Exclude Visual Leak Detector in release mode -->
      <ProdBinExclude Include="$(PackSourceDir)**\vld_x86.dll" />
      <ProdBinExclude Include="$(PackSourceDir)**\vld.ini" />
    </ItemGroup>
  </Target>

  <Target Name="PackCreate" DependsOnTargets="PackCreateDefault;PackFilter">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] PackCreate" />
    <!-- Dispatch package content to respective folders -->
    <ItemGroup>
      <PackCopyFile Include="@(ProdBinInclude)" Exclude="@(ProdBinExclude)" Condition="!$(PkgBinDir.StartsWith('$(PackSourceDir)'))">
        <ImportDir>$(PkgBinDir)</ImportDir>
      </PackCopyFile>
      <PackCopyFile Include="@(ProdBinExclude)" Condition="!$(PkgDbgDir.StartsWith('$(PackSourceDir)'))">
        <ImportDir>$(PkgDbgDir)</ImportDir>
      </PackCopyFile>
      <PackDeleteFile Include="@(ProdBinExclude)" Condition="'$(PackSourceDir)' == '$(PkgBinDir)' And !$(PkgDbgDir.StartsWith('$(PackSourceDir)'))" />
    </ItemGroup>
    
    <ItemGroup>
      <PackCopyFile>
        <BundleRelativeSrcDir>$([MSBuild]::MakeRelative('$(BundleDir)', '%(RootDir)%(Directory)'))</BundleRelativeSrcDir>
        <BundleRelativeDstDir>$([MSBuild]::MakeRelative('$(BundleDir)', '%(ImportDir)'))</BundleRelativeDstDir>
      </PackCopyFile>
    </ItemGroup>
    <!--<LogItems Items="@(ProdBinExclude)" Title="PackCreate.ProdBinExclude" />
    <Message Importance="high"  Text=" " />-->
  </Target>

  <Target Name="PackDeleteAll" DependsOnTargets="PackCreate">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] PackDeleteAll(@(PackCopyFile->Count()))" />

    <!-- Display deleted files by extension  -->
    <ItemGroup>
      <_Message Include="$(T3)%(PackCopyFile.ImportDir)%(RecursiveDir)%2A%(Extension)" Condition="Exists('%(PackCopyFile.ImportDir)%(RecursiveDir)%(FileName)%(Extension)')" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(_Message)">
      <Output TaskParameter="Filtered" ItemName="_Message"/>
    </RemoveDuplicates>
    <Message Condition="@(_Message->Count()) > 0" Importance="high" Text="$(L2m)[-] %(_Message.Identity)$(XC)" />
    <ItemGroup>
      <_Message Remove="@(_Message)" />
    </ItemGroup>

    <Delete Files="@(PackCopyFile->'%(ImportDir)%(RecursiveDir)%(FileName)%(Extension)')" />
  </Target>

  <Target Name="PackCopy" DependsOnTargets="PackCreate" Inputs="@(PackCopyFile)" Outputs="@(PackCopyFile->'%(ImportDir)%(RecursiveDir)%(FileName)%(Extension)')">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] PackCopy" />
    <CallTarget Targets="_DeleteLastBuildState" Condition="'$(BuildingInsideVisualStudio)'=='true'" />
    <Copy SourceFiles="@(PackCopyFile)" DestinationFiles="@(PackCopyFile->'%(ImportDir)%(RecursiveDir)%(FileName)%(Extension)')" />

    <!-- Display file transfer by extension  -->
    <ItemGroup>
      <_Message Include="@(PackCopyFile->'$(T3)%(BundleRelativeSrcDir)%2A%(Extension) -> %(BundleRelativeDstDir)%(RecursiveDir)%2A%(Extension)')" />
    </ItemGroup>
    <RemoveDuplicates Inputs="@(_Message)">
      <Output TaskParameter="Filtered" ItemName="_Message"/>
    </RemoveDuplicates>
    <Message Importance="high" Text="$(L2p)[Pack] %(_Message.Identity)$(XC)" />
    <ItemGroup>
      <_Message Remove="@(_Message')" />
    </ItemGroup>
  </Target>

  <Target Name="PackBuild" AfterTargets="Build"  DependsOnTargets="ImportProject;PackCopy">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] PackBuild(RuntimePlatform=$(RuntimePlatform), PkgBinDir=$(PkgBinDir))" />

    <Delete Files="@(PackDeleteFile)" />

    <!-- Enable signing of Windows packaging folder if 'Sign' property is true -->
    <ItemGroup Condition="Exists('$(PkgBinDir)')">
      <PkgBinWinDir Include="$([System.IO.Directory]::GetDirectories('$(PkgBinDir)', 'win*'))" />
      <PkgBinWinDir Condition="@(PkgBinWinDir->Count()) == 0" Include="$(PkgBinDir)" />
    </ItemGroup>
    
    <ItemGroup Condition="$(Sign)">
      <SignFolder Include="@(PkgBinWinDir)" />
    </ItemGroup>
  </Target>

  <Target Name="PackClean" BeforeTargets="Clean" DependsOnTargets="PackDeleteAll;ImportProjectClean">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] PackClean" />
  </Target>
</Project>
