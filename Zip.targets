<!--
The Zip.targets can be used to zip files and/or folders.

Exemples:
  
  <PropertyGroup>
    <ZipFolder>Foo;Bar1;Bar2</ZipFolder>
  </PropertyGroup>
  
  <PropertyGroup>
    <ZipFolder>Foo;Bar*/*</ZipFolder>
  </PropertyGroup>
  
  <ItemGroup>
    <ZipFolder Include="Data/mail-template-qrtest-de" />
    <ZipFolder Include="Data/mail-template-qrtest-en" />
    <ZipFolder Include="Data/mail-template-qrtest-fr" />
    <ZipFolder Include="Data/mail-template-qrtest-it" />
  </ItemGroup>
  
  <ItemGroup>
    <ZipFolder Include="Data/mail-template-qrtest-*/*" />
  </ItemGroup>

  <ItemGroup>
    <ZipFile Include="folder\**\*">
      <ArchivePath>folder.zip</ArchivePath>
      <EntryName>%(RecursiveDir)%(FileName)%(Extension)</EntryName>
    </ZipFile>
    <ZipFile Include="*.exe">
      <ArchivePath>Exe.zip</ZipPath>
    </ZipFile>
    <ZipFile Include="*.dll">
      <ArchivePath>Dll.zip</ZipPath>
    </ZipFile>
  </ItemGroup>

-->
<Project>
  <PropertyGroup>
    <ZipTargetsImported>true</ZipTargetsImported>
  </PropertyGroup>
  <Import Project="zou.props" Condition="'$(ZouVersion)' == ''" />
  <Import Project="hook.zou.build.targets" Condition="'$(ZouBuildTargets)' == ''" />

  <!-- Convert ZipFolder to ZipFile -->
  <Target Name="ProcessZipFolder">
    <!-- Preprocess @(ZipFolder) items and $(ZipFolder) property-->
    <ItemGroup>
      <!-- Merge $(ZipFolder) (semi-colon separated) into @(ZipFolder) -->
      <ZipFolder Include="$(ZipFolder)" Condition="'$(ZipFolder)' != ''" />
      <!-- Discriminate files from directories (CreatedTime metadata is empty for a directory) -->
      <_ZipFolder Condition="'%(ZipFolder.CreatedTime)' == '' And Exists('%(Identity)')" Include="%(Identity)" />
      <_ZipFolder Condition="'%(ZipFolder.CreatedTime)' != '' And Exists('%(RelativeDir)')" Include="%(RelativeDir)" />
      <_ZipFolderNormalized Include="$([System.String]::new('%(_ZipFolder.Identity)').TrimEnd('\/').Replace('\', '/'))" />
      <_ZipFolder Remove="@(_ZipFolder)" />
       <!--Process ZipFolder items--> 
      <ZipFolder Remove="@(ZipFolder)" />
      <ZipFolder Include="@(_ZipFolderNormalized)" />
      <_ZipFolderNormalized Remove="@(_ZipFolderNormalized)" />
       <!--Compute ZipDir and ZipPath (item metadata)--> 
      <ZipFolder>
        <ZipDir>$([System.String]::new('%(FullPath)').TrimEnd('\/'))</ZipDir>
      </ZipFolder>
      <ZipFolder>
        <ZipPath>%(ZipDir).zip</ZipPath>
      </ZipFolder>
    
      <ZipFile Include="%(ZipFolder.ZipDir)\**\*" Condition="'@(ZipFolder)' != ''">
        <ArchivePath>%(ZipFolder.ZipPath)</ArchivePath>
      </ZipFile>
      <ZipFile>
        <EntryName>%(RecursiveDir)%(FileName)%(Extension)</EntryName>
      </ZipFile>
    </ItemGroup>
    
    <!--<LogItems Items="@(ZipFolder)" Title="ZipFolder" AllMetadata="true"/>
    <LogItems Items="@(ZipFile)" Title="ZipFile"  AllMetadata="true" />-->
  </Target>

  <Target Name="ZipFileBuild" DependsOnTargets="ProcessZipFolder" BeforeTargets="Build">
    <Zip Files="@(ZipFile)" />
  </Target>
  
  <Target Name="ZipFileClean" DependsOnTargets="ProcessZipFolder" AfterTargets="Clean">
    <Delete Files="@(ZipFile->'%(ArchivePath)')" ContinueOnError="true" />
  </Target>
</Project>
