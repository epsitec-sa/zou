<!--
The Zip.targets can be used to zip files and/or folders.

Example 1:
  Zip 'data\folder' recursively to $(OutputPath)data\folder.zip

  <ItemGroup>
    <ZipFolder Include="data\folder\**\*" />
  </ItemGroup>
  
Example 2:
  Zip 'data\folder' recursively to $(OutputPath)foo.zip
  - 'EntryName' is optional
  
  <ItemGroup>
    <ZipFile Include="data\folder\**\*">
      <ArchivePath>foo.zip</ArchivePath>
      <EntryName>%(RecursiveDir)%(FileName)%(Extension)</EntryName>
    </ZipFile>
  </ItemGroup>
-->

<Project InitialTargets="ZipCheck">

  <PropertyGroup>
    <ZipTargetsImported>true</ZipTargetsImported>
  </PropertyGroup>
  <Import Project="zou.props" Condition="'$(ZouImported)' == ''" />

  <!-- ======================================================================================= -->

  <ItemGroup>
    <_ZipFolder Include="@(ZipFolder)">
      <!-- Folder = RelativeDir.TrimEnd(RecursiveDir) -->
      <Folder Condition="'%(RecursiveDir)' == ''">%(RelativeDir)</Folder>
      <Folder Condition="'%(RecursiveDir)' != ''">$([System.String]::new('%(RelativeDir)').Substring(0, $([System.String]::new('%(RelativeDir)').LastIndexOf('%(RecursiveDir)'))))</Folder>

      <!--
      Compute 'Link' metadata for 'Content' item.
      The 'Link' metadata represents the relative path of the zip archive
      where project consumers will get a copy of it through the 'Content' items
      -->
      <Link>$([System.String]::new('%(Folder)').TrimEnd('\/')).zip</Link>
      <ArchivePath>$(ProjectDir)$(OutputPath)%(Link)</ArchivePath>
    </_ZipFolder>

    <_ZipArchive Include="@(_ZipFolder->'%(ArchivePath)'->Distinct())" />
    
    <!-- Enable project consumers to get a copy of zip archives -->
    <Content Include="@(_ZipArchive)" Visible="false" >
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>

  </ItemGroup>
  
  <Target Name="_InitZipFile" Condition="@(_ZipArchive->Count()) > 0">
    <!--<Message Importance="high" Text="_InitZipFile" />-->
    <!--<LogItems Items="@(_ZipFolder)" Title="_ZipFolder"/>-->
    <!--<LogItems Items="@(_ZipArchive)" Title="_ZipArchive"/>-->

    <ItemGroup>
      <ZipFile Include="@(_ZipFolder)">
        <ArchivePath>%(_ZipFolder.ArchivePath)</ArchivePath>
      </ZipFile>
      <ZipFile>
        <EntryName>%(RecursiveDir)%(FileName)%(Extension)</EntryName>
      </ZipFile>
    </ItemGroup>
    
    <!--<LogItems Items="@(Content)" Title="Content"/>-->
    <!--<LogItems Items="@(ZipFile)" Title="ZipFile"/>-->
  </Target>

  <Target Name="ZipBuild"
          DependsOnTargets="_InitZipFile"
          BeforeTargets="PrepareForBuild"
          Inputs="@(ZipFile->'%(FullPath)')"
          Outputs="@(ZipFile->'%(ArchivePath)')">

    <Zip Files="@(ZipFile)" />
  </Target>

  <Target Name="ZipCheck">
    <Error Condition="'$(ZipFolder)' != ''" Text="'ZipFolder' property is obsolete. Use 'ZipFolder' item instead (see zou\Zip.Targets examples)." />
  </Target>

  <!-- ============================== FAST UPDATE CHECK ====================================== -->
  <!-- https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md -->

  <!--<PropertyGroup>
    <DisableFastUpToDateCheck>@(ZipFolder->Count()) > 0</DisableFastUpToDateCheck>
  </PropertyGroup>-->
  
  <Target Name="CollectUpToDateCheckInputDesignTime" DependsOnTargets="CompileDesignTime;_InitZipFile" Returns="@(UpToDateCheckInput)">
    <ItemGroup>
      <UpToDateCheckInput Include="@(ZipFile->'%(FullPath)')" />
    </ItemGroup>
  </Target>
  <Target Name="CollectUpToDateCheckOutputDesignTime" DependsOnTargets="CompileDesignTime;_InitZipFile" Returns="@(UpToDateCheckOutput)">
    <ItemGroup>
      <UpToDateCheckOutput Include="@(ZipFile->'%(ArchivePath)')" />
    </ItemGroup>
  </Target>

</Project>
