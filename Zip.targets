<!--
The Zip.targets can be used to zip folders.
Input parameters: $(ZipFolder)
-->
<Project>
  <Import Project="zou.props" Condition="'$(ZouVersion)' == ''" />

  <!-- Zip source -->
  <Target Name="ZipSource">
    <PropertyGroup>
      <ZipPath>$(ProjectDir)$(ProjectName).zip</ZipPath>
    </PropertyGroup>
    <ItemGroup>
      <ZipFile Include="$(ProjectPath)"/>
      <ZipFile Include="@(Compile)" Exclude="$(IntermediateOutputPath)*.cs"/>
    </ItemGroup>

    <Message Text="Compressing source files into $(ZipPath)..." Importance="high" />
    <Zip Files="@(ZipFile)" FileName="$(ZipPath)" />
  </Target>

  <!-- Zip folder -->
  <Target Name="_InitZipFolder">
    <!-- Preprocess @(ZipFolder) items and $(ZipFolder) property-->
    <ItemGroup>
      <!-- Merge $(ZipFolder) (semi-colon separated) into @(ZipFolder) -->
      <ZipFolder Include="$(ZipFolder)" />

      <!-- Discriminate files from directories (CreatedTime metadata is empty for a directory) -->
      <_ZipFolder Condition="'%(ZipFolder.CreatedTime)' == ''" Include="%(ZipFolder.Identity)" />
      <_ZipFolder Condition="'%(ZipFolder.CreatedTime)' != ''" Include="%(ZipFolder.RelativeDir)" />

      <!-- Normalize separators so that RemoveDuplicate task can do its job -->
      <_ZipFolderNormalized Include="$([System.String]::new('%(_ZipFolder.Identity)').TrimEnd('\/').Replace('\', '/'))" />

      <!-- Reset variable for reuse -->
      <_ZipFolder Remove="@(_ZipFolder)" />
    </ItemGroup>

    <!-- Remove duplicates from _ZipFolderNormalized items into _ZipFolder -->
    <RemoveDuplicates Inputs="@(_ZipFolderNormalized)">
      <Output TaskParameter="Filtered" ItemName="_ZipFolder"/>
    </RemoveDuplicates>

    <!-- Process ZipFolder items -->
    <ItemGroup>
      <!-- Reset -->
      <ZipFolder Remove="@(ZipFolder)" />
      <!-- Include preprocessed ZipFolder items -->
      <ZipFolder Include="@(_ZipFolder)" />
      <!-- Compute ZipDir and ZipPath (item metadata) -->
      <ZipFolder>
        <ZipDir>$([System.String]::new('%(FullPath)').TrimEnd('\/'))</ZipDir>
      </ZipFolder>
      <ZipFolder>
        <ZipPath>%(ZipDir).zip</ZipPath>
      </ZipFolder>
    </ItemGroup>

    <!-- Clean temp vars -->
    <ItemGroup>
      <_ZipFolderNormalized Remove="@(_ZipFolderNormalized)" />
      <_ZipFolder Remove="@(_ZipFolder)" />
    </ItemGroup>

    <!--<LogItems Items="@(ZipFolder)" />-->
  </Target>

  <Target Name="ZipFolderBuild" DependsOnTargets="_InitZipFolder" BeforeTargets="Build" Outputs="%(ZipFolder.ZipPath)">
    <Warning Condition="'%(ZipFolder.ZipDir)' != '' and !Exists('%(ZipFolder.ZipDir)')" Text="Folder %(ZipFolder.ZipDir) does not exists" />
    <MSBuild Condition="Exists('%(ZipFolder.ZipDir)')" Projects="$(MSBuildThisFileFullPath)" Targets="_ZipOneFolder" Properties="_ZipFolder=%(ZipFolder.ZipDir);_ZipPath=%(ZipFolder.ZipPath)" />
  </Target>

  <Target Name="ZipFolderClean" DependsOnTargets="_InitZipFolder" AfterTargets="Clean">
    <Message Condition="Exists('%(ZipFolder.ZipPath)')" Text="[-] %(ZipFolder.ZipPath)" Importance="high" />
    <Delete Files="@(ZipFolder->'%(ZipPath)')" ContinueOnError="true" />
  </Target>


  <!-- MSBuild subtask for one folder -->
  <Target Name="_InitZipOneFolder">
    <ItemGroup>
      <_ZipFile Include="$(_ZipFolder)/**/*.*" />
    </ItemGroup>
  </Target>

  <Target Name="_ZipOneFolder" DependsOnTargets="_InitZipOneFolder" Inputs="@(_ZipFile)" Outputs="$(_ZipPath)">
    <Message Text="[+] Compressing $(_ZipFolder) into $(_ZipPath)..." Importance="high" />
    <Zip Files="@(_ZipFile)" FileName="$(_ZipPath)" />
  </Target>

</Project>
