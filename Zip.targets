<!--
The Zip.targets can be used to zip folders.
Input parameters: $(ZipFolder)
-->
<Project>

  <!-- Zip source -->
  <Target Name="ZipSource">
    <PropertyGroup>
      <ZipPath>$(ProjectDir)$(ProjectName).zip</ZipPath>
    </PropertyGroup>
    <ItemGroup>
      <ZipFile Include="$(ProjectPath)"/>
      <ZipFile Include="@(Compile)" Exclude="$(IntermediateOutputPath)*.cs"/>
    </ItemGroup>

    <Message Text="Compressing source files into $(ZipPath)..." Importance="high" />
    <Zip Files="@(ZipFile)" FileName="$(ZipPath)" />
  </Target>

  <!-- Zip folder -->
  <Target Name="_InitZipFolder">
    <ItemGroup>
      <ZipFolders Include="$(ZipFolder)" />
      <ZipFolders>
        <ZipFolder>$([System.IO.Path]::GetFullPath('%(Identity)').TrimEnd('\/'))</ZipFolder>
      </ZipFolders>
      <ZipFolders>
        <ZipPath>%(ZipFolder).zip</ZipPath>
      </ZipFolders>
    </ItemGroup>
  </Target>

  <Target Name="ZipFolderBuild" DependsOnTargets="_InitZipFolder" BeforeTargets="ResolveReferences" Inputs="%(ZipFolders.ZipFolder)" Outputs="%(ZipFolders.ZipPath)">
    <ItemGroup>
      <ZipFile Include="%(ZipFolders.ZipFolder)/**/*.*" />
    </ItemGroup>

    <Warning Condition="!Exists('%(ZipFolders.ZipFolder)')" Text="Folder %(ZipFolders.ZipFolder) does not exists" />
    <Message Condition="Exists('%(ZipFolders.ZipFolder)')"  Text="[+] Compressing %(ZipFolders.ZipFolder) into %(ZipFolders.ZipPath)..." Importance="high" />
    <Zip     Condition="Exists('%(ZipFolders.ZipFolder)')"  Files="@(ZipFile)" FileName="%(ZipFolders.ZipPath)" />
  </Target>


  <Target Name="ZipFolderClean" DependsOnTargets="_InitZipFolder" AfterTargets="Clean">
    <Message Condition="Exists('%(ZipFolders.ZipPath)')" Text="[-] %(ZipFolders.ZipPath)" Importance="high" />
    <Delete  Files="@(ZipFolders->'%(ZipPath)')" ContinueOnError="true" />
  </Target>

</Project>
