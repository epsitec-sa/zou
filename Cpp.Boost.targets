<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" InitialTargets="_CppBoostTrace;_BoostCheckVersions">

  <PropertyGroup>
    <PackagesConfigFile Condition="'$(PackagesConfigFile)' == ''">packages.config</PackagesConfigFile>

    <BoostToolset Condition="'$(BoostToolset)' == ''">$(PlatformToolset)</BoostToolset>
    <BoostToolset Condition="'$(BoostToolset)' == 'v142'"   >vc142</BoostToolset>
    <BoostToolset Condition="'$(BoostToolset)' == 'v141'"   >vc141</BoostToolset>
    <BoostToolset Condition="'$(BoostToolset)' == 'v140'"   >vc140</BoostToolset>
    <BoostToolset Condition="'$(BoostToolset)' == 'v140_xp'">vc140</BoostToolset>

    <BoostTargetSubdir Condition="$(BoostVersion.StartsWith(1.7))">build</BoostTargetSubdir>
    <BoostTargetSubdir Condition="'$(BoostTargetSubdir)' == ''">build\native</BoostTargetSubdir>

    <_BoostPackagesConfigType Condition="'$(ConfigurationType)' == 'StaticLibrary'">Headers</_BoostPackagesConfigType>
    <_BoostPackagesConfigType Condition="'$(ConfigurationType)' == 'DynamicLibrary'">Libs</_BoostPackagesConfigType>
    <_BoostPackagesConfigType Condition="'$(ConfigurationType)' == 'Application'">Libs</_BoostPackagesConfigType>

    <_BoostTemplatePathPrefix>$(ZouDir).Templates\nuget\Cpp.Boost.$(_BoostPackagesConfigType)</_BoostTemplatePathPrefix>
    
    <_BoostOnlyPackagesConfigFile>$(IntDir)zou.boost.packages.config</_BoostOnlyPackagesConfigFile>

    <_BoostVersionChanged>false</_BoostVersionChanged>
    <_BoostToolsetChanged>false</_BoostToolsetChanged>
    <_BoostMergeChanged>false</_BoostMergeChanged>
    <_PackagesConfigChanged>false</_PackagesConfigChanged>
    <_PackagesConfigExists>false</_PackagesConfigExists>
    
    <_PackagesConfigExists Condition="Exists($(PackagesConfigFile))">true</_PackagesConfigExists>
  </PropertyGroup>

  <!-- Abort if actual version bigger than zou version (probably a missing synchronization) -->
  <Target Name="_BoostCheckVersions">
    <ReadLinesFromFile File="$(PackagesConfigFile)">
      <Output TaskParameter="Lines" ItemName="_BoostPackagesConfigContent"/>
    </ReadLinesFromFile>
    <!--<LogItems Items="@(_BoostPackagesConfigContent)" Title="_BoostPackagesConfigContent"/>-->
    <PropertyGroup>
      <_BoostPackagesConfigContent>@(_BoostPackagesConfigContent)</_BoostPackagesConfigContent>
      <_BoostVersionMatchGroups>$([System.Text.RegularExpressions.RegEx]::Match('$(_BoostPackagesConfigContent)', 'id=\"boost\"\s+version=\"([^\"]+)\"').Groups)</_BoostVersionMatchGroups>
    </PropertyGroup>
    <ItemGroup>
      <_BoostVersionMatch Include="$(_BoostVersionMatchGroups)" />
    </ItemGroup>
    <!--<LogItems Items="@(_BoostVersionMatch)" Title="_BoostVersionMatch"/>-->
    <PropertyGroup>
      <_BoostExistingVersion>%(_BoostVersionMatch.Identity)</_BoostExistingVersion>
      <_BoostVersionCompare>$([System.StringComparer]::OrdinalIgnoreCase.Compare('$(_BoostExistingVersion)', '$(BoostVersion)'))</_BoostVersionCompare>
    </PropertyGroup>
    
    <Error Condition="'$(_BoostVersionCompare)' == '1'" Text="Boost version mismatch. Expected: $(BoostVersion). Actual: $(_BoostExistingVersion). Did you synchronize bundle?" />
    <!--<Message Importance="high" Text="BoostVersion         = $(BoostVersion)" />
    <Message Importance="high" Text="_BoostExistingVersion = $(_BoostExistingVersion)" />
    <Message Importance="high" Text="_BoostVersionCompare  = $(_BoostVersionCompare)" />-->
    
    <!-- clean -->
    <PropertyGroup>
      <_BoostPackagesConfigContent />
      <_BoostVersionMatchGroups />
      <_BoostVersionCompare />
    </PropertyGroup>
    <ItemGroup>
      <_BoostPackagesConfigContent Remove="@(_BoostPackagesConfigContent)" />
      <_BoostVersionMatch Remove="@(_BoostVersionMatch)" />
    </ItemGroup>
  </Target>

  <!-- Import standard nuget boost imports -->
  <Import Project="$(_BoostTemplatePathPrefix).Imports.targets"/>
  
  <Target Name="_BoostCreateBoostOnlyPackagesConfig" Inputs="$(_BoostTemplatePathPrefix).packages.config" Outputs="$(_BoostOnlyPackagesConfigFile)">
    <Copy SourceFiles="$(_BoostTemplatePathPrefix).packages.config" DestinationFiles="$(_BoostOnlyPackagesConfigFile)" />
  </Target>

  <Target Name="_BoostUpdateBoostOnlyPackagesConfig" DependsOnTargets="_BoostCreateBoostOnlyPackagesConfig" >
    <!-- Update version -->
    <FileUpdate Files="$(_BoostOnlyPackagesConfigFile)"
                Regex='^(?&lt;A&gt;\s*&lt;package\s+id="boost\S*"\s+version=")\S+(?&lt;Z&gt;"[^\r\n]+)'
                ReplacementText="${A}$(BoostVersion)${Z}"
                Multiline="true"
                IgnoreCase="true">
      <Output TaskParameter="Changed" PropertyName="_BoostVersionChanged" />
    </FileUpdate>
    <!-- Update toolset -->
    <FileUpdate Condition="'$(_BoostPackagesConfigType)' == 'Libs'"
                Files="$(_BoostOnlyPackagesConfigFile)"
                Regex='^(?&lt;A&gt;\s*&lt;package\s+id="boost\S*-)vc\d+\S*(?&lt;Z&gt;"[^\r\n]+)'
                ReplacementText="${A}$(BoostToolset)${Z}"
                Multiline="true"
                IgnoreCase="true">
      <Output TaskParameter="Changed" PropertyName="_BoostToolsetChanged" />
    </FileUpdate>
  </Target>
  
  <Target Name="_BoostUpdateExistingPackagesConfig"
          DependsOnTargets="_BoostUpdateBoostOnlyPackagesConfig"
          Inputs="$(_BoostOnlyPackagesConfigFile)"
          Outputs="$(PackagesConfigFile)" >
    
    <Copy Condition="!$(_PackagesConfigExists)" SourceFiles="$(_BoostOnlyPackagesConfigFile)" DestinationFiles="$(PackagesConfigFile)"/>
    <!-- Remove previous boost packages -->
    <FileUpdate Files="$(PackagesConfigFile)"
                Regex='^\s*&lt;package\s+id="boost\S*".*$'
                ReplacementTextEmpty="true"
                Multiline="true"
                IgnoreCase="true">
    </FileUpdate>
    <MergePackagesConfig MergeFiles="$(_BoostOnlyPackagesConfigFile)"
                         IntoFile="$(PackagesConfigFile)">
      <Output TaskParameter="Changed" PropertyName="_BoostMergeChanged" />
    </MergePackagesConfig>

    <PropertyGroup>
      <_PackagesConfigChanged Condition="!$(_PackagesConfigExists) Or $(_BoostVersionChanged) Or $(_BoostToolsetChanged) Or $(_BoostMergeChanged)">true</_PackagesConfigChanged>
    </PropertyGroup>
  </Target>
  
  <Target Name="BoostCommit">
    
    <!-- abort if we are not in dev mode -->
    <Exec Command='git in-dev-mode' ContinueOnError='true' IgnoreExitCode='true'>
      <Output TaskParameter="ExitCode" PropertyName="GitInDevMode" />
    </Exec>
    <Error Condition="$(GitInDevMode) != 0" Text="Switch $(ModuleName) to development mode for boost to be updated." />
    
    <!-- Commit packages.config -->
    <PropertyGroup>
      <_GitCommitMessage>zou-build: update boost $(BoostToolset) to v$(BoostVersion) in $(ModuleRelativeProjectDir)$(PackagesConfigFile)</_GitCommitMessage>
    </PropertyGroup>
    <Exec Command='git add "$(PackagesConfigFile)"' ContinueOnError='true' />
    <Exec Command='git diff-index --quiet HEAD "$(PackagesConfigFile)" || git commit "-m$(_GitCommitMessage)" "$(PackagesConfigFile)"' ContinueOnError='true' />
    
  </Target>

  <!--
  copy packages.config template to temp file and update it
  if packages.config exists
    update packages.config
    merge temp file into existing packages.config
  else
    copy temp file to packages.config
  -->
  <Target Name="UpdateBoostPackages" DependsOnTargets="_BoostUpdateExistingPackagesConfig" BeforeTargets="_CppBoostHeadersImportCheck;_CppBoostLibsImportCheck">

    <CallTarget Targets="BoostCommit" Condition="$(BundleIsGit) And $(_PackagesConfigChanged)" />
    
    <PropertyGroup>
      <_PackagesConfigChanged Condition="!$(_PackagesConfigExists) Or $(_BoostVersionChanged) Or $(_BoostToolsetChanged) Or $(_BoostMergeChanged)">true</_PackagesConfigChanged>
    </PropertyGroup>

    <!--<Message Importance="high" Text="_BoostVersionChanged = $(_BoostVersionChanged)"/>
    <Message Importance="high" Text="_BoostToolsetChanged = $(_BoostToolsetChanged)"/>
    <Message Importance="high" Text="_BoostMergeChanged   = $(_BoostMergeChanged)"/>
    <Message Importance="high" Text="_PackagesConfigChanged = $(_PackagesConfigChanged)"/>-->
    
    <!-- Restore nuget packages if necessary... -->
    <Exec Condition="$(_PackagesConfigChanged)" Command='"$(ZouBinzOsDir)nuget" restore "$(PackagesConfigFile)" -PackagesDirectory "$(NugetPackagesDir.TrimEnd(\/))"' />
  </Target>

  <Target Name="BoostClean" AfterTargets="Clean">
    <Delete Files="$(_BoostOnlyPackagesConfigFile)" />
  </Target>

  <Target Name="_CppBoostTrace" Condition="'$(ZouTrace)' == 'true'">
    <Message Importance="high" Text="PlatformToolset         = $(PlatformToolset)" />
    <Message Importance="high" Text="ConfigurationType       = $(ConfigurationType)" />
    <Message Importance="high" Text="BoostVersion            = $(BoostVersion)" />
    <Message Importance="high" Text="BoostToolset            = $(BoostToolset)" />
    <Message Importance="high" Text="BoostPackagesConfigType = $(_BoostPackagesConfigType)" />
  </Target>
</Project>
