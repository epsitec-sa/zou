<Project InitialTargets="_BoostCheckVersions">

  <!-- Abort if actual version bigger than zou version (probably a missing synchronization) -->
  <Target Name="_BoostCheckVersions">
    <ReadLinesFromFile File="$(PackagesConfigFile)">
      <Output TaskParameter="Lines" ItemName="_BoostPackagesConfigContent"/>
    </ReadLinesFromFile>
    <!--<LogItems Items="@(_BoostPackagesConfigContent)" Title="_BoostPackagesConfigContent"/>-->
    <PropertyGroup>
      <_BoostPackagesConfigContent>@(_BoostPackagesConfigContent)</_BoostPackagesConfigContent>
      <_BoostVersionMatchGroups>$([System.Text.RegularExpressions.RegEx]::Match('$(_BoostPackagesConfigContent)', 'id=\"boost\"\s+version=\"([^\"]+)\"').Groups)</_BoostVersionMatchGroups>
    </PropertyGroup>
    <ItemGroup>
      <_BoostVersionMatch Include="$(_BoostVersionMatchGroups)" />
    </ItemGroup>
    <!--<LogItems Items="@(_BoostVersionMatch)" Title="_BoostVersionMatch"/>-->
    <PropertyGroup>
      <_BoostExistingVersion>%(_BoostVersionMatch.Identity)</_BoostExistingVersion>
      <_BoostVersionCompare>$([System.StringComparer]::OrdinalIgnoreCase.Compare('$(_BoostExistingVersion)', '$(BoostVersion)'))</_BoostVersionCompare>
    </PropertyGroup>
    
    <Error Condition="'$(_BoostVersionCompare)' == '1'" Text="Boost version mismatch. Expected: $(BoostVersion). Actual: $(_BoostExistingVersion). Did you synchronize bundle?" />
    <!--<Message Importance="high" Text="BoostVersion         = $(BoostVersion)" />
    <Message Importance="high" Text="_BoostExistingVersion = $(_BoostExistingVersion)" />
    <Message Importance="high" Text="_BoostVersionCompare  = $(_BoostVersionCompare)" />-->
    
    <!-- clean -->
    <PropertyGroup>
      <_BoostPackagesConfigContent />
      <_BoostVersionMatchGroups />
      <_BoostVersionCompare />
    </PropertyGroup>
    <ItemGroup>
      <_BoostPackagesConfigContent Remove="@(_BoostPackagesConfigContent)" />
      <_BoostVersionMatch Remove="@(_BoostVersionMatch)" />
    </ItemGroup>
  </Target>
  
  <Target Name="_BoostCreateBoostOnlyPackagesConfig">
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] _BoostCreateBoostOnlyPackagesConfig" />
    
    <Copy SourceFiles="$(_BoostTemplatePathPrefix).packages.config" DestinationFiles="$(_BoostOnlyPackagesConfigFile)" />
  </Target>

  <Target Name="_BoostUpdateBoostOnlyPackagesConfig" DependsOnTargets="_BoostCreateBoostOnlyPackagesConfig" >
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] _BoostUpdateBoostOnlyPackagesConfig(_BoostOnlyPackagesConfigFile=$(_BoostOnlyPackagesConfigFile))" />
    
    <!-- Update version -->
    <FileUpdate Files="$(_BoostOnlyPackagesConfigFile)"
                Regex='^(?&lt;A&gt;\s*&lt;package\s+id="boost\S*"\s+version=")\S+(?&lt;Z&gt;"[^\r\n]+)'
                ReplacementText="${A}$(BoostVersion)${Z}"
                Multiline="true"
                IgnoreCase="true" />

    <!-- Update toolset -->
    <FileUpdate Condition="'$(_BoostPackagesConfigType)' == 'Libs'"
                Files="$(_BoostOnlyPackagesConfigFile)"
                Regex='^(?&lt;A&gt;\s*&lt;package\s+id="boost\S*-)vc\d+\S*(?&lt;Z&gt;"[^\r\n]+)'
                ReplacementText="${A}$(BoostToolset)${Z}"
                Multiline="true"
                IgnoreCase="true" />
  </Target>
  
  <Target Name="_BoostUpdateExistingPackagesConfig" DependsOnTargets="_BoostUpdateBoostOnlyPackagesConfig" Inputs="$(_BoostOnlyPackagesConfigFile)" Outputs="$(PackagesConfigFile)" >
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] _BoostUpdateExistingPackagesConfig" />
    
    <Copy Condition="!$(_PackagesConfigExists)" SourceFiles="$(_BoostOnlyPackagesConfigFile)" DestinationFiles="$(PackagesConfigFile)"/>
    <!-- Remove previous boost packages -->
    <FileUpdate Files="$(PackagesConfigFile)"
                Regex='^\s*&lt;package\s+id="boost\S*".*$'
                ReplacementTextEmpty="true"
                Multiline="true"
                IgnoreCase="true">
    </FileUpdate>
    <MergePackagesConfig MergeFiles="$(_BoostOnlyPackagesConfigFile)"
                         IntoFile="$(PackagesConfigFile)" />
  </Target>
  
  <Target Name="_BoostCheckPackagesConfigChanged" Condition="$(BundleIsGit)" DependsOnTargets="_BoostUpdateExistingPackagesConfig" >
    <Exec Command='git add "$(PackagesConfigFile)"' StandardOutputImportance="low" />
    <Exec Command='git diff-index --quiet HEAD "$(PackagesConfigFile)' ContinueOnError='true' IgnoreExitCode='true'>
      <Output TaskParameter="ExitCode" PropertyName="_GitDiffPackagesConfigExitCode" />
    </Exec>
    <PropertyGroup>
      <_PackagesConfigChanged Condition="'$(_GitDiffPackagesConfigExitCode)' != '0'">true</_PackagesConfigChanged>
    </PropertyGroup>
    
    <Message Condition="'$(ZouDebug)' == 'true'" Importance="high" Text="### [$(MSBuildProjectFile)] _BoostCheckPackagesConfigChanged.End(_PackagesConfigChanged=$(_PackagesConfigChanged))" />
  </Target>
  
  <Target Name="_BoostCommitPackagesConfigChanged" Condition="$(BundleIsGit)" >
    <!-- abort if we are not in dev mode -->
    <Exec Command='git in-dev-mode' ContinueOnError='true' IgnoreExitCode='true'>
      <Output TaskParameter="ExitCode" PropertyName="GitInDevMode" />
    </Exec>
    <Error Condition="'$(GitInDevMode)' != '0'" Text="Switch $(ModuleName) to development mode for boost to be updated." />
    
    <!-- Commit packages.config -->
    <PropertyGroup>
      <_GitCommitMessage>zou-build: update boost $(BoostToolset) to v$(BoostVersion) in $(BundleRelativeProjectDir)$(PackagesConfigFile)</_GitCommitMessage>
    </PropertyGroup>
    <Message Condition="'$(_PackagesConfigChanged)' == 'true'" Importance="high" Text="$(Cyan)$(_GitCommitMessage)$(NC)" />
    <Exec Command='git commit "-m$(_GitCommitMessage)" "$(PackagesConfigFile)"' StandardOutputImportance="low" />
  </Target>

  <!--
  copy packages.config template to temp file and update it
  if packages.config exists
    update packages.config
    merge temp file into existing packages.config
  else
    copy temp file to packages.config
  -->
  <Target Name="UpdateBoostPackages" DependsOnTargets="_BoostUpdateExistingPackagesConfig;_BoostCheckPackagesConfigChanged" BeforeTargets="_CppBoostHeadersImportCheck;_CppBoostLibsImportCheck">

    <CallTarget Condition="$(_PackagesConfigChanged)" Targets="_BoostCommitPackagesConfigChanged" />

    <!-- Restore nuget packages if necessary... -->
    <Exec Condition="$(_PackagesConfigChanged)" Command='"$(ZouBinzOsDir)nuget" restore "$(PackagesConfigFile)" -PackagesDirectory "$(NugetPackagesDir.TrimEnd(\/))"' />
  </Target>

  <Target Name="BoostClean" AfterTargets="Clean">
    <Delete Files="$(_BoostOnlyPackagesConfigFile)" />
  </Target>
</Project>
