usage: git sku enter  [<clone-options>] [-a] [--(vlast|vnext|dev)] [<sku>]
   or: git sku info   [<clone-options>] [-a] [-r] [--pub]         [-- <module-paths> ]
   or: git sku config [<clone-options>] [-a] [-r] [-i ..] [-x ..] [-- <module-paths> ]
   or: git sku config [<clone-options>] -m PMID

Select and manage SKUs.
- see 'git clonex -h' for more information on <clone-options>

commands:
    enter                   enter SKU
    config                  [de]activate SKU submodules (default to active)
    info                    display SKU specialization info

options:
    -h|--help               display help
    -r|--recursive          visit specified modules recursively
    -a|--all                visit all submodules (skip SKU filter)

clone options:
    --url=<url>             the remote URL (optional if <work-dir> exists)
    --wrk=<work-dir>        the working directory (optional if <url> is specified)
    --sku=<sku>             the SKU (default to master)
    --vlast                 enter last version - checkout most recent version tags
    --vnext                 enter next version - checkout PROD branches
    --dev                   enter developement - checkout DEV branches (default)

enter:
    --vlast                 enter last version - checkout most recent version tags
    --vnext                 enter next version - checkout PROD branches
    --dev                   enter developement - checkout DEV branches (default)

config:
    -l|--list               list included/excluded submodules
    -i|--include [SM1,...]  include specific submodules (default to all) in current SKU
    -x|--exclude [SM1,...]  exclude specific submodules (default to all) from current SKU
    -m|--pmid PMID          override principal module ID default
                                default == fact   if SKU == fact/std (sku/fact/std/dev)
                                default == cresus if SKU == master && bundle == cresus-*
info:
    --pub                   display info for submodules that have changed since last prod release (vlast)

arguments:
    <sku>                   same as '--sku' option
    <module-paths>          specific modules to visit (default to current module)
    
example:
    git sku enter sal --vlast     # enter last version recursively in SKU 'sal'
                                  # checkout 'sku/sal/vX.Y.Z' vtags and/or derived
    git sku enter sal --vnext     # enter next version recursively in SKU 'sal'
                                  # checkout 'sku/sal/X.Y' branches and/or derived
    git sku enter sal --dev       # enter development recursively in SKU 'sal'
                                  # checkout 'sku/sal/dev' branches and/or derived
    git sku enter                 # enter development recursively in current SKU 
    git sku enter --vnext         # enter next version in current SKU
    
    git sku info                  # display SKU info of bundle and current module
    git sku info -- ../m1         # display SKU info of bundle and sibling module 'm1'

    git sku config                # display submodules state (included|excluded)
    git sku config -r -x -l       # display excluded submodules recursively
    git sku config -i             # include all submodules in current SKU (default)
    git sku config -x             # exclude all submodules from current SKU
    git sku config -x sm1 sm2     # exclude submodules sm1 and sm2 from current SKU

    git sku config -m sm2         # change principal module ID (default to bundle ID without '-dev' suffix)
