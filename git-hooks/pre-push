#!/usr/bin/env bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

[[ -z $ZOUL_GIT_CORE ]] && . zoul-git-core
[[ -z $ZOUL_GIT_OPS ]]  && . zoul-git-ops
[[ -z $ZOUL_LOG ]]      && . zoul-log

pre_push_run()
{
	log_enter_hooks
	echo "$PWD @ ${*@Q}" &>>"$stdallRedir"

	local remote="$1" url="$2"
	local localRef localSha remoteRef remoteSha

	# echo "$PWD @ remote=$remote url=$url" &>>"$stdallRedir"

	while read localRef localSha remoteRef remoteSha;	do

		echo "$PWD @ localRef=$localRef remoteRef=$remoteRef localSha=${localSha::7} remoteSha=${remoteSha::7}" &>>"$stdallRedir"

		case "$remoteRef" in
			refs/tags/*)
				if [[ "${localSha::7}" == '0000000' ]]; then
					# Handle tag delete
					ops_append "gitx tag -d ${remoteRef##*/}" &>>"$stdallRedir"
					ops_append "gitx push --delete "$remote" ${remoteRef##*/}" &>>"$stdallRedir"
					gitx tag -d ${remoteRef##*/} &>>"$stdallRedir"
					ops_list_ops | xargs -n1 -d $'\n' echo '@@ ' &>>"$stdallRedir"
				fi
				;;
			refs/notes/zou-ops)
				# ops_list_ops | xargs -n1 -d $'\n' echo '@@ ' &>>"$stdallRedir"
				ops_execute &>>"$stdallRedir"
				;;
		esac
		# if [[ "$remoteRef" == */tags/* ]]; then
		# 	if [[ "$localSha" == "$z40" ]]; then
		# 		# Handle tag delete
		# 		ops_append "git tag -d ${remoteRef##*/}" &>>"$stdallRedir"
		# 		ops_append "git push --delete "$remote" ${remoteRef##*/}" &>>"$stdallRedir"
		# 		git tag -d ${remoteRef##*/} &>>"$stdallRedir"
		# 		ops_list_ops
		# 		# ops_push
		# 	fi
		# elif [["$remoteRef" == */tags/* ]]
		# fi

		# else
		# 	if [ "$remoteSha" = $z40 ]; then
		# 		# New branch, examine all commits
		# 		range="$localSha"
		# 	else
		# 		# Update to existing branch, examine new commits
		# 		range="$remoteSha..$localSha"
		# 	fi
		# 	# echo "$PWD @ range=$range" &>>"$stdallRedir"

		# 	# Check for WIP commit
		# 	# commit=$(gitx rev-list -n 1 --grep '^WIP' "$range" 2>>"$stderrDir")
		# 	# if [ -n "$commit" ]; then
		# 	# 	echo "$PWD @ Found WIP commit in $localRef, not pushing"
		# 	# 	exit 1
		# 	# fi
		# fi
	done
}

log_enter_hooks
pre_push_run "$@"
exit 0

